{
    "1-FullySupervisedLearning/nnUNet/nnunet/dataset_conversion/Task027_AutomaticCardiacDetectionChallenge.py": {
        "sklearn": {
            "KFold_98": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/network_trainer.py": {
        "sklearn": {
            "KFold_159": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_320": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_287": {
                "obj": {
                    "value": "save_this",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch + 1, 'state_dict': state_dict, 'optimizer_state_dict': optimizer_state_dict, 'lr_scheduler_state_dict': lr_sched_state_dct, 'plot_stuff': (self.all_tr_losses, self.all_val_losses, self.all_val_losses_tr_mode, self.all_val_eval_metrics), 'best_stuff': (self.best_epoch_based_on_MA_tr_loss, self.best_MA_tr_loss_for_patience, self.best_val_eval_criterion_MA)}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradScaler_403": {
                "variable": {
                    "value": "self.amp_grad_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_634": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_66": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_320": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_641": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2.py": {
        "sklearn": {
            "KFold_296": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_166": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__254": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__264": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/dataset_conversion/Task027_AutomaticCardiacDetectionChallenge.py": {
        "sklearn": {
            "KFold_98": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/.ipynb_checkpoints/nnUNetTrainerV2Finetune-checkpoint.py": {
        "sklearn": {
            "KFold_300": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_166": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__254": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__264": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/network_trainer.py": {
        "sklearn": {
            "KFold_159": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_320": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_287": {
                "obj": {
                    "value": "save_this",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch + 1, 'state_dict': state_dict, 'optimizer_state_dict': optimizer_state_dict, 'lr_scheduler_state_dict': lr_sched_state_dct, 'plot_stuff': (self.all_tr_losses, self.all_val_losses, self.all_val_losses_tr_mode, self.all_val_eval_metrics), 'best_stuff': (self.best_epoch_based_on_MA_tr_loss, self.best_MA_tr_loss_for_patience, self.best_val_eval_criterion_MA)}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradScaler_403": {
                "variable": {
                    "value": "self.amp_grad_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_634": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_66": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_320": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_641": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2.py": {
        "sklearn": {
            "KFold_296": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_166": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__254": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__264": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2Finetune.py": {
        "sklearn": {
            "KFold_300": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_166": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__254": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__264": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/dataset_conversion/Task027_AutomaticCardiacDetectionChallenge.py": {
        "sklearn": {
            "KFold_98": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/network_trainer.py": {
        "sklearn": {
            "KFold_159": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_320": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_287": {
                "obj": {
                    "value": "save_this",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch + 1, 'state_dict': state_dict, 'optimizer_state_dict': optimizer_state_dict, 'lr_scheduler_state_dict': lr_sched_state_dct, 'plot_stuff': (self.all_tr_losses, self.all_val_losses, self.all_val_losses_tr_mode, self.all_val_eval_metrics), 'best_stuff': (self.best_epoch_based_on_MA_tr_loss, self.best_MA_tr_loss_for_patience, self.best_val_eval_criterion_MA)}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradScaler_403": {
                "variable": {
                    "value": "self.amp_grad_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_634": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_66": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_320": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_641": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2.py": {
        "sklearn": {
            "KFold_296": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_166": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__254": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__264": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/dataset_conversion/Task027_AutomaticCardiacDetectionChallenge.py": {
        "sklearn": {
            "KFold_98": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/network_trainer.py": {
        "sklearn": {
            "KFold_159": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_320": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_287": {
                "obj": {
                    "value": "save_this",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch + 1, 'state_dict': state_dict, 'optimizer_state_dict': optimizer_state_dict, 'lr_scheduler_state_dict': lr_sched_state_dct, 'plot_stuff': (self.all_tr_losses, self.all_val_losses, self.all_val_losses_tr_mode, self.all_val_eval_metrics), 'best_stuff': (self.best_epoch_based_on_MA_tr_loss, self.best_MA_tr_loss_for_patience, self.best_val_eval_criterion_MA)}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradScaler_403": {
                "variable": {
                    "value": "self.amp_grad_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_634": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_66": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_320": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_641": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2.py": {
        "sklearn": {
            "KFold_296": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_166": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__254": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__264": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/inference/predict.py": {
        "torch": {
            "empty_cache_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/inference/predict_simple.py": {
        "torch": {
            "empty_cache_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/conv_blocks.py": {
        "torch": {
            "Sequential_52": {
                "variable": {
                    "value": "self.all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvDropoutNormReLU(input_channels, output_channels, kernel_size, network_props_first)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "block(input_channels, output_channels, kernel_size, network_props, first_stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.downsample_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "props['conv_op'](in_planes, out_planes, 1, stride_here, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.downsample_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "props['conv_op'](in_planes, out_planes, 1, stride_here, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/feature_response_normalization.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 32, 16, 16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_35": {
                "input": {
                    "value": "self.weight * x + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rsqrt_33": {
                "input": {
                    "value": "mean_tensor(x * x, [2, 3, 4], keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/helperModules.py": {
        "torch": {}
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/mish.py": {
        "torch": {
            "tanh_23": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/network_architecture/generic_UNet.py": {
        "torch": {
            "Sequential_131": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[basic_block(input_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs_first_conv, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs)] + [basic_block(output_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs) for _ in range(num_convs - 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_374": {
                "variable": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_376": {
                "variable": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_377": {
                "variable": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_378": {
                "variable": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[d](x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[-1](x)",
                            "Call"
                        ],
                        [
                            "self.td[d](x)",
                            "Call"
                        ],
                        [
                            "self.tu[u](x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, skips[-(u + 1)]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_localization[u](x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_380": {
                "variable": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[-(u + 1)])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "*args": {
                    "value": "StackedConvLayers(input_features, output_features, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, first_stride, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_348": {
                "*args": {
                    "value": "StackedConvLayers(n_features_after_tu_and_concat, nfeatures_from_skip, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/network_architecture/generic_UNet_DP.py": {
        "torch": {
            "zeros_111": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/network_architecture/generic_modular_UNet.py": {
        "torch": {
            "SGD_409": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_414": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 4, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_252": {
                "variable": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_253": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_254": {
                "variable": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[i + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "*args": {
                    "value": "seg_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_415": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/network_architecture/generic_modular_residual_UNet.py": {
        "torch": {
            "SGD_400": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_403": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_modalities, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_476": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_479": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_modalities, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_203": {
                "variable": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[i + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "*args": {
                    "value": "seg_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_404": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_480": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/network_architecture/initialization.py": {
        "torch": {}
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/network_architecture/neural_network.py": {
        "torch": {
            "zeros_507": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_566": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0], self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_332": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_356": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_363": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_642": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_665": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_669": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_672": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_353": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_662": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_527": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_531": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_535": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_539": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_543": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_547": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_551": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_586": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_590": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_594": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_526": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_530": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_534": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_538": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_542": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_546": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_550": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_585": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_589": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_593": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/run/load_pretrained_weights.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/data_augmentation/downsampling.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "convert_seg_image_to_one_hot_encoding_batched(seg, classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/loss_functions/TopK_loss.py": {
        "torch": {
            "topk_32": {
                "variable": {
                    "value": "(res, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "res.view((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(num_voxels * self.k / 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/loss_functions/crossentropy.py": {
        "torch": {}
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/loss_functions/deep_supervision.py": {
        "torch": {}
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/loss_functions/dice_loss.py": {
        "torch": {
            "stack_138": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_139": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_377": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_350": {
                "input": {
                    "value": "-dc_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unbind_138": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / volumes",
                            "BinOp"
                        ],
                        [
                            "tp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_139": {
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / volumes",
                            "BinOp"
                        ],
                        [
                            "fp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_140": {
                "input": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / volumes",
                            "BinOp"
                        ],
                        [
                            "fn.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_141": {
                "input": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/model_restore.py": {
        "torch": {
            "load_147": {
                "f": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_147": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/BraTS2020/nnUNetTrainerV2BraTSRegions.py": {
        "torch": {
            "Softmax_63": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_85": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_209": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_221": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_350": {
                "variable": {
                    "value": "output_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__409": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_381": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/BraTS2020/nnUNetTrainerV2BraTSRegions_moreDA.py": {
        "torch": {
            "Sigmoid_55": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_183": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/MMS/nnUNetTrainerV2_MMS.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainer.py": {
        "torch": {
            "Adam_269": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_271": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_692": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_693": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_694": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_686": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_281": {
                "*size": {
                    "value": "(1, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_284": {
                "*size": {
                    "value": "(1, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_CascadeFullRes.py": {
        "torch": {}
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_DDP.py": {
        "torch": {
            "manual_seed_60": {
                "seed": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__227": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__237": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_DP.py": {
        "torch": {
            "SGD_154": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_165": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "tuple(range(self.num_gpus))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__214": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_MMS.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_3ConvPerStage.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_3ConvPerStage_samefilters.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_BN.py": {
        "torch": {
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_FRN.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_GN.py": {
        "torch": {
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_GeLU.py": {
        "torch": {
            "gelu_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_LReLU_slope_2en1.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_Mish.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_NoNormalization.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU_biasInSegOutput.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU_convReLUIN.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet_DA3.py": {
        "torch": {
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet_DA3_BN.py": {
        "torch": {
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_allConv3x3.py": {
        "torch": {
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_lReLU_biasInSegOutput.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_lReLU_convlReLUIN.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_noDeepSupervision.py": {
        "torch": {
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_softDeepSupervision.py": {
        "torch": {}
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/benchmarking/nnUNetTrainerV2_2epochs.py": {
        "torch": {
            "rand_255": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_257": {
                "input": {
                    "value": "torch.rand((self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__125": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__135": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "autocast_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__209": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "autocast_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__275": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__285": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_257": {
                "*size": {
                    "value": "(self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/benchmarking/nnUNetTrainerV2_dummyLoad.py": {
        "torch": {
            "rand_31": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_106": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "round_108": {
                "variable": {
                    "value": "self.some_gt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((self.batch_size, *self.patch_size)) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__131": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_33": {
                "input": {
                    "value": "torch.rand((self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__50": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__60": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_108": {
                "*size": {
                    "value": "(self.batch_size, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "(self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_DA3.py": {
        "torch": {
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_insaneDA.py": {
        "torch": {}
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_noDA.py": {
        "torch": {}
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/loss_function/nnUNetTrainerV2_focalLoss.py": {
        "torch": {
            "exp_51": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "exp_103": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_48": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ],
                        [
                            "targets[not_ignored]",
                            "Subscript"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_100": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ],
                        [
                            "targets[not_ignored]",
                            "Subscript"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/miscellaneous/nnUNetTrainerV2_fullEvals.py": {
        "torch": {
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/nnUNetTrainerNoDA.py": {
        "torch": {}
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_Adam.py": {
        "torch": {
            "Adam_23": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_Adam_ReduceOnPlateau.py": {
        "torch": {
            "Adam_34": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_36": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_SGD_ReduceOnPlateau.py": {
        "torch": {
            "SGD_29": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_31": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum09.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum095.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum098.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum09in2D.py": {
        "torch": {
            "SGD_27": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "float"
                        ],
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_reduceMomentumDuringTraining.py": {
        "torch": {
            "SGD_37": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/training/optimizer/ranger.py": {
        "torch": {
            "zeros_like_95": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_96": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_99": {
                "variable": {
                    "value": "state[slow_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/utilities/distributed.py": {
        "torch": {
            "rand_64": {
                "variable": {
                    "value": "rnd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "c.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_78": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs, 2, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_device_61": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "allgather_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(input) for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_32": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/utilities/nd_softmax.py": {
        "torch": {
            "softmax_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/utilities/tensor_utilities.py": {
        "torch": {
            "arange_50": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "1-FullySupervisedLearning/nnUNet/nnunet/utilities/to_torch.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[maybe_to_torch(i) if not isinstance(i, torch.Tensor) else i for i in d]",
                            "ListComp"
                        ],
                        [
                            "torch.from_numpy(d).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/inference/predict.py": {
        "torch": {
            "empty_cache_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/inference/predict_simple.py": {
        "torch": {
            "empty_cache_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/conv_blocks.py": {
        "torch": {
            "Sequential_52": {
                "variable": {
                    "value": "self.all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvDropoutNormReLU(input_channels, output_channels, kernel_size, network_props_first)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "block(input_channels, output_channels, kernel_size, network_props, first_stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.downsample_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "props['conv_op'](in_planes, out_planes, 1, stride_here, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.downsample_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "props['conv_op'](in_planes, out_planes, 1, stride_here, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/feature_response_normalization.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 32, 16, 16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_35": {
                "input": {
                    "value": "self.weight * x + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rsqrt_33": {
                "input": {
                    "value": "mean_tensor(x * x, [2, 3, 4], keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/helperModules.py": {
        "torch": {}
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/mish.py": {
        "torch": {
            "tanh_23": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/network_architecture/generic_UNet.py": {
        "torch": {
            "Sequential_131": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[basic_block(input_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs_first_conv, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs)] + [basic_block(output_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs) for _ in range(num_convs - 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_374": {
                "variable": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_376": {
                "variable": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_377": {
                "variable": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_378": {
                "variable": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[d](x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[-1](x)",
                            "Call"
                        ],
                        [
                            "self.td[d](x)",
                            "Call"
                        ],
                        [
                            "self.tu[u](x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, skips[-(u + 1)]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_localization[u](x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_380": {
                "variable": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[-(u + 1)])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "*args": {
                    "value": "StackedConvLayers(input_features, output_features, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, first_stride, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_348": {
                "*args": {
                    "value": "StackedConvLayers(n_features_after_tu_and_concat, nfeatures_from_skip, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/network_architecture/generic_UNet_DP.py": {
        "torch": {
            "zeros_111": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/network_architecture/generic_modular_UNet.py": {
        "torch": {
            "SGD_409": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_414": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 4, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_252": {
                "variable": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_253": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_254": {
                "variable": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[i + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "*args": {
                    "value": "seg_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_415": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/network_architecture/generic_modular_residual_UNet.py": {
        "torch": {
            "SGD_400": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_403": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_modalities, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_476": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_479": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_modalities, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_203": {
                "variable": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[i + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "*args": {
                    "value": "seg_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_404": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_480": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/network_architecture/initialization.py": {
        "torch": {}
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/network_architecture/neural_network.py": {
        "torch": {
            "zeros_507": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_566": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0], self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_332": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_356": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_363": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_642": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_665": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_669": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_672": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_353": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_662": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_527": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_531": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_535": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_539": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_543": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_547": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_551": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_586": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_590": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_594": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_526": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_530": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_534": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_538": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_542": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_546": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_550": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_585": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_589": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_593": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/run/load_pretrained_weights.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/.ipynb_checkpoints/model_restore-checkpoint.py": {
        "torch": {
            "load_156": {
                "f": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_156": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/data_augmentation/downsampling.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "convert_seg_image_to_one_hot_encoding_batched(seg, classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/loss_functions/TopK_loss.py": {
        "torch": {
            "topk_32": {
                "variable": {
                    "value": "(res, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "res.view((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(num_voxels * self.k / 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/loss_functions/crossentropy.py": {
        "torch": {}
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/loss_functions/deep_supervision.py": {
        "torch": {}
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/loss_functions/dice_loss.py": {
        "torch": {
            "stack_138": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_139": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_377": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_350": {
                "input": {
                    "value": "-dc_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unbind_138": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / volumes",
                            "BinOp"
                        ],
                        [
                            "tp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_139": {
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / volumes",
                            "BinOp"
                        ],
                        [
                            "fp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_140": {
                "input": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / volumes",
                            "BinOp"
                        ],
                        [
                            "fn.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_141": {
                "input": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/model_restore.py": {
        "torch": {
            "load_156": {
                "f": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_156": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/BraTS2020/nnUNetTrainerV2BraTSRegions.py": {
        "torch": {
            "Softmax_63": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_85": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_209": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_221": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_350": {
                "variable": {
                    "value": "output_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__409": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_381": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/BraTS2020/nnUNetTrainerV2BraTSRegions_moreDA.py": {
        "torch": {
            "Sigmoid_55": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_183": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/MMS/nnUNetTrainerV2_MMS.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainer.py": {
        "torch": {
            "Adam_269": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_271": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_692": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_693": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_694": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_686": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_281": {
                "*size": {
                    "value": "(1, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_284": {
                "*size": {
                    "value": "(1, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_CascadeFullRes.py": {
        "torch": {}
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_DDP.py": {
        "torch": {
            "manual_seed_60": {
                "seed": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__227": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__237": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_DP.py": {
        "torch": {
            "SGD_154": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_165": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "tuple(range(self.num_gpus))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__214": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_3ConvPerStage.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_3ConvPerStage_samefilters.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_BN.py": {
        "torch": {
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_FRN.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_GN.py": {
        "torch": {
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_GeLU.py": {
        "torch": {
            "gelu_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_LReLU_slope_2en1.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_Mish.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_NoNormalization.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU_biasInSegOutput.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU_convReLUIN.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet_DA3.py": {
        "torch": {
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet_DA3_BN.py": {
        "torch": {
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_allConv3x3.py": {
        "torch": {
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_lReLU_biasInSegOutput.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_lReLU_convlReLUIN.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_noDeepSupervision.py": {
        "torch": {
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_softDeepSupervision.py": {
        "torch": {}
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/benchmarking/nnUNetTrainerV2_2epochs.py": {
        "torch": {
            "rand_255": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_257": {
                "input": {
                    "value": "torch.rand((self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__125": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__135": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "autocast_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__209": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "autocast_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__275": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__285": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_257": {
                "*size": {
                    "value": "(self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/benchmarking/nnUNetTrainerV2_dummyLoad.py": {
        "torch": {
            "rand_31": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_106": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "round_108": {
                "variable": {
                    "value": "self.some_gt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((self.batch_size, *self.patch_size)) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__131": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_33": {
                "input": {
                    "value": "torch.rand((self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__50": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__60": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_108": {
                "*size": {
                    "value": "(self.batch_size, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "(self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_DA3.py": {
        "torch": {
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_insaneDA.py": {
        "torch": {}
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_noDA.py": {
        "torch": {}
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/loss_function/nnUNetTrainerV2_focalLoss.py": {
        "torch": {
            "exp_51": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "exp_103": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_48": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ],
                        [
                            "targets[not_ignored]",
                            "Subscript"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_100": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ],
                        [
                            "targets[not_ignored]",
                            "Subscript"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/miscellaneous/nnUNetTrainerV2_fullEvals.py": {
        "torch": {
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/nnUNetTrainerNoDA.py": {
        "torch": {}
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_Adam.py": {
        "torch": {
            "Adam_23": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_Adam_ReduceOnPlateau.py": {
        "torch": {
            "Adam_34": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_36": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_SGD_ReduceOnPlateau.py": {
        "torch": {
            "SGD_29": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_31": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum09.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum095.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum098.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum09in2D.py": {
        "torch": {
            "SGD_27": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "float"
                        ],
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_reduceMomentumDuringTraining.py": {
        "torch": {
            "SGD_37": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/training/optimizer/ranger.py": {
        "torch": {
            "zeros_like_95": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_96": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_99": {
                "variable": {
                    "value": "state[slow_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/utilities/distributed.py": {
        "torch": {
            "rand_64": {
                "variable": {
                    "value": "rnd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "c.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_78": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs, 2, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_device_61": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "allgather_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(input) for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_32": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/utilities/nd_softmax.py": {
        "torch": {
            "softmax_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/utilities/tensor_utilities.py": {
        "torch": {
            "arange_50": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "2-Semi-supervisedLearning/nnUNet/nnunet/utilities/to_torch.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[maybe_to_torch(i) if not isinstance(i, torch.Tensor) else i for i in d]",
                            "ListComp"
                        ],
                        [
                            "torch.from_numpy(d).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/inference/predict.py": {
        "torch": {
            "empty_cache_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/inference/predict_simple.py": {
        "torch": {
            "empty_cache_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/conv_blocks.py": {
        "torch": {
            "Sequential_52": {
                "variable": {
                    "value": "self.all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvDropoutNormReLU(input_channels, output_channels, kernel_size, network_props_first)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "block(input_channels, output_channels, kernel_size, network_props, first_stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.downsample_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "props['conv_op'](in_planes, out_planes, 1, stride_here, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.downsample_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "props['conv_op'](in_planes, out_planes, 1, stride_here, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/feature_response_normalization.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 32, 16, 16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_35": {
                "input": {
                    "value": "self.weight * x + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rsqrt_33": {
                "input": {
                    "value": "mean_tensor(x * x, [2, 3, 4], keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/helperModules.py": {
        "torch": {}
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/network_architecture/custom_modules/mish.py": {
        "torch": {
            "tanh_23": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/network_architecture/generic_UNet.py": {
        "torch": {
            "Sequential_131": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[basic_block(input_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs_first_conv, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs)] + [basic_block(output_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs) for _ in range(num_convs - 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_374": {
                "variable": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_376": {
                "variable": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_377": {
                "variable": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_378": {
                "variable": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[d](x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[-1](x)",
                            "Call"
                        ],
                        [
                            "self.td[d](x)",
                            "Call"
                        ],
                        [
                            "self.tu[u](x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, skips[-(u + 1)]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_localization[u](x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_380": {
                "variable": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[-(u + 1)])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "*args": {
                    "value": "StackedConvLayers(input_features, output_features, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, first_stride, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_348": {
                "*args": {
                    "value": "StackedConvLayers(n_features_after_tu_and_concat, nfeatures_from_skip, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/network_architecture/generic_UNet_DP.py": {
        "torch": {
            "zeros_111": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/network_architecture/generic_modular_UNet.py": {
        "torch": {
            "SGD_409": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_414": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 4, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_252": {
                "variable": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_253": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_254": {
                "variable": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[i + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "*args": {
                    "value": "seg_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_415": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/network_architecture/generic_modular_residual_UNet.py": {
        "torch": {
            "SGD_400": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_403": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_modalities, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_476": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_479": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_modalities, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_203": {
                "variable": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[i + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "*args": {
                    "value": "seg_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_404": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_480": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/network_architecture/initialization.py": {
        "torch": {}
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/network_architecture/neural_network.py": {
        "torch": {
            "zeros_507": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_566": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0], self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_332": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_356": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_363": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_642": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_665": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_669": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_672": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_353": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_662": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_527": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_531": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_535": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_539": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_543": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_547": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_551": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_586": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_590": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_594": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_526": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_530": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_534": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_538": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_542": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_546": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_550": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_585": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_589": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_593": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/run/load_pretrained_weights.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/data_augmentation/downsampling.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "convert_seg_image_to_one_hot_encoding_batched(seg, classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/loss_functions/TopK_loss.py": {
        "torch": {
            "topk_32": {
                "variable": {
                    "value": "(res, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "res.view((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(num_voxels * self.k / 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/loss_functions/crossentropy.py": {
        "torch": {}
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/loss_functions/deep_supervision.py": {
        "torch": {}
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/loss_functions/dice_loss.py": {
        "torch": {
            "stack_138": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_139": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_377": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_350": {
                "input": {
                    "value": "-dc_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unbind_138": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / volumes",
                            "BinOp"
                        ],
                        [
                            "tp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_139": {
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / volumes",
                            "BinOp"
                        ],
                        [
                            "fp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_140": {
                "input": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / volumes",
                            "BinOp"
                        ],
                        [
                            "fn.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_141": {
                "input": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/model_restore.py": {
        "torch": {
            "load_147": {
                "f": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_147": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/BraTS2020/nnUNetTrainerV2BraTSRegions.py": {
        "torch": {
            "Softmax_63": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_85": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_209": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_221": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_350": {
                "variable": {
                    "value": "output_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__409": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_381": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/BraTS2020/nnUNetTrainerV2BraTSRegions_moreDA.py": {
        "torch": {
            "Sigmoid_55": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_183": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/MMS/nnUNetTrainerV2_MMS.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainer.py": {
        "torch": {
            "Adam_269": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_271": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_692": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_693": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_694": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_686": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_281": {
                "*size": {
                    "value": "(1, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_284": {
                "*size": {
                    "value": "(1, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_CascadeFullRes.py": {
        "torch": {}
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_DDP.py": {
        "torch": {
            "manual_seed_60": {
                "seed": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__227": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__237": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_DP.py": {
        "torch": {
            "SGD_154": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_165": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "tuple(range(self.num_gpus))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__214": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_MMS.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_3ConvPerStage.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_3ConvPerStage_samefilters.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_BN.py": {
        "torch": {
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_FRN.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_GN.py": {
        "torch": {
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_GeLU.py": {
        "torch": {
            "gelu_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_LReLU_slope_2en1.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_Mish.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_NoNormalization.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU_biasInSegOutput.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU_convReLUIN.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet_DA3.py": {
        "torch": {
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet_DA3_BN.py": {
        "torch": {
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_allConv3x3.py": {
        "torch": {
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_lReLU_biasInSegOutput.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_lReLU_convlReLUIN.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_noDeepSupervision.py": {
        "torch": {
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_softDeepSupervision.py": {
        "torch": {}
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/benchmarking/nnUNetTrainerV2_2epochs.py": {
        "torch": {
            "rand_255": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_257": {
                "input": {
                    "value": "torch.rand((self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__125": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__135": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "autocast_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__209": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "autocast_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__275": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__285": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_257": {
                "*size": {
                    "value": "(self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/benchmarking/nnUNetTrainerV2_dummyLoad.py": {
        "torch": {
            "rand_31": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_106": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "round_108": {
                "variable": {
                    "value": "self.some_gt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((self.batch_size, *self.patch_size)) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__131": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_33": {
                "input": {
                    "value": "torch.rand((self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__50": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__60": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_108": {
                "*size": {
                    "value": "(self.batch_size, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "(self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_DA3.py": {
        "torch": {
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_insaneDA.py": {
        "torch": {}
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_noDA.py": {
        "torch": {}
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/loss_function/nnUNetTrainerV2_focalLoss.py": {
        "torch": {
            "exp_51": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "exp_103": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_48": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ],
                        [
                            "targets[not_ignored]",
                            "Subscript"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_100": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ],
                        [
                            "targets[not_ignored]",
                            "Subscript"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/miscellaneous/nnUNetTrainerV2_fullEvals.py": {
        "torch": {
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/nnUNetTrainerNoDA.py": {
        "torch": {}
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_Adam.py": {
        "torch": {
            "Adam_23": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_Adam_ReduceOnPlateau.py": {
        "torch": {
            "Adam_34": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_36": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_SGD_ReduceOnPlateau.py": {
        "torch": {
            "SGD_29": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_31": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum09.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum095.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum098.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum09in2D.py": {
        "torch": {
            "SGD_27": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "float"
                        ],
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_reduceMomentumDuringTraining.py": {
        "torch": {
            "SGD_37": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/training/optimizer/ranger.py": {
        "torch": {
            "zeros_like_95": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_96": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_99": {
                "variable": {
                    "value": "state[slow_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/utilities/distributed.py": {
        "torch": {
            "rand_64": {
                "variable": {
                    "value": "rnd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "c.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_78": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs, 2, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_device_61": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "allgather_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(input) for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_32": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/utilities/nd_softmax.py": {
        "torch": {
            "softmax_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/utilities/tensor_utilities.py": {
        "torch": {
            "arange_50": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "3-WeaklySupervisedLearning/nnUNet/nnunet/utilities/to_torch.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[maybe_to_torch(i) if not isinstance(i, torch.Tensor) else i for i in d]",
                            "ListComp"
                        ],
                        [
                            "torch.from_numpy(d).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/inference/predict.py": {
        "torch": {
            "empty_cache_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/inference/predict_simple.py": {
        "torch": {
            "empty_cache_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/network_architecture/custom_modules/conv_blocks.py": {
        "torch": {
            "Sequential_52": {
                "variable": {
                    "value": "self.all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvDropoutNormReLU(input_channels, output_channels, kernel_size, network_props_first)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "block(input_channels, output_channels, kernel_size, network_props, first_stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.downsample_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "props['conv_op'](in_planes, out_planes, 1, stride_here, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.downsample_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "props['conv_op'](in_planes, out_planes, 1, stride_here, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/network_architecture/custom_modules/feature_response_normalization.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 32, 16, 16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_35": {
                "input": {
                    "value": "self.weight * x + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rsqrt_33": {
                "input": {
                    "value": "mean_tensor(x * x, [2, 3, 4], keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/network_architecture/custom_modules/helperModules.py": {
        "torch": {}
    },
    "4-ContinualLearning/nnUNet/nnunet/network_architecture/custom_modules/mish.py": {
        "torch": {
            "tanh_23": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/network_architecture/generic_UNet.py": {
        "torch": {
            "Sequential_131": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[basic_block(input_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs_first_conv, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs)] + [basic_block(output_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs) for _ in range(num_convs - 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_374": {
                "variable": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_376": {
                "variable": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_377": {
                "variable": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_378": {
                "variable": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[d](x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[-1](x)",
                            "Call"
                        ],
                        [
                            "self.td[d](x)",
                            "Call"
                        ],
                        [
                            "self.tu[u](x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, skips[-(u + 1)]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_localization[u](x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_380": {
                "variable": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[-(u + 1)])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "*args": {
                    "value": "StackedConvLayers(input_features, output_features, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, first_stride, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_348": {
                "*args": {
                    "value": "StackedConvLayers(n_features_after_tu_and_concat, nfeatures_from_skip, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/network_architecture/generic_UNet_DP.py": {
        "torch": {
            "zeros_111": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/network_architecture/generic_modular_UNet.py": {
        "torch": {
            "SGD_409": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_414": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 4, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_252": {
                "variable": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_253": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_254": {
                "variable": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[i + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "*args": {
                    "value": "seg_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_415": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/network_architecture/generic_modular_residual_UNet.py": {
        "torch": {
            "SGD_400": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_403": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_modalities, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_476": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_479": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_modalities, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_203": {
                "variable": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[i + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "*args": {
                    "value": "seg_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_404": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_480": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/network_architecture/initialization.py": {
        "torch": {}
    },
    "4-ContinualLearning/nnUNet/nnunet/network_architecture/neural_network.py": {
        "torch": {
            "zeros_507": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_566": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0], self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_332": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_356": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_363": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_642": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_665": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_669": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_672": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_353": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_662": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_527": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_531": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_535": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_539": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_543": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_547": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_551": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_586": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_590": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_594": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_526": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_530": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_534": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_538": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_542": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_546": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_550": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_585": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_589": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_593": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/run/load_pretrained_weights.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/data_augmentation/downsampling.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "convert_seg_image_to_one_hot_encoding_batched(seg, classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/loss_functions/TopK_loss.py": {
        "torch": {
            "topk_32": {
                "variable": {
                    "value": "(res, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "res.view((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(num_voxels * self.k / 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/loss_functions/crossentropy.py": {
        "torch": {}
    },
    "4-ContinualLearning/nnUNet/nnunet/training/loss_functions/deep_supervision.py": {
        "torch": {}
    },
    "4-ContinualLearning/nnUNet/nnunet/training/loss_functions/dice_loss.py": {
        "torch": {
            "stack_138": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_139": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_377": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_350": {
                "input": {
                    "value": "-dc_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unbind_138": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / volumes",
                            "BinOp"
                        ],
                        [
                            "tp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_139": {
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / volumes",
                            "BinOp"
                        ],
                        [
                            "fp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_140": {
                "input": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / volumes",
                            "BinOp"
                        ],
                        [
                            "fn.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_141": {
                "input": {
                    "value": "tn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/model_restore.py": {
        "torch": {
            "load_147": {
                "f": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_147": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/BraTS2020/nnUNetTrainerV2BraTSRegions.py": {
        "torch": {
            "Softmax_63": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_85": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_209": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_221": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_350": {
                "variable": {
                    "value": "output_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__409": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_381": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/BraTS2020/nnUNetTrainerV2BraTSRegions_moreDA.py": {
        "torch": {
            "Sigmoid_55": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_183": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_139": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/MMS/nnUNetTrainerV2_MMS.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNetTrainer.py": {
        "torch": {
            "Adam_269": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_271": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_692": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_693": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_694": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_686": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_281": {
                "*size": {
                    "value": "(1, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_284": {
                "*size": {
                    "value": "(1, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_CascadeFullRes.py": {
        "torch": {}
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_DDP.py": {
        "torch": {
            "manual_seed_60": {
                "seed": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_62": {
                "seed": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__227": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__237": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_DP.py": {
        "torch": {
            "SGD_154": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_165": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "tuple(range(self.num_gpus))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__214": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNetTrainerV2_MMS.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_3ConvPerStage.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_3ConvPerStage_samefilters.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_BN.py": {
        "torch": {
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_FRN.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_GN.py": {
        "torch": {
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_GeLU.py": {
        "torch": {
            "gelu_35": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_LReLU_slope_2en1.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_Mish.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_NoNormalization.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU_biasInSegOutput.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU_convReLUIN.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet_DA3.py": {
        "torch": {
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet_DA3_BN.py": {
        "torch": {
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_allConv3x3.py": {
        "torch": {
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_lReLU_biasInSegOutput.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_lReLU_convlReLUIN.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_noDeepSupervision.py": {
        "torch": {
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_softDeepSupervision.py": {
        "torch": {}
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/benchmarking/nnUNetTrainerV2_2epochs.py": {
        "torch": {
            "rand_255": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_257": {
                "input": {
                    "value": "torch.rand((self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__125": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__135": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "autocast_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__209": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "autocast_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__275": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__285": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_257": {
                "*size": {
                    "value": "(self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/benchmarking/nnUNetTrainerV2_dummyLoad.py": {
        "torch": {
            "rand_31": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_106": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "round_108": {
                "variable": {
                    "value": "self.some_gt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((self.batch_size, *self.patch_size)) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__131": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_33": {
                "input": {
                    "value": "torch.rand((self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__50": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__60": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_108": {
                "*size": {
                    "value": "(self.batch_size, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "(self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_DA3.py": {
        "torch": {
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_insaneDA.py": {
        "torch": {}
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_noDA.py": {
        "torch": {}
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/loss_function/nnUNetTrainerV2_focalLoss.py": {
        "torch": {
            "exp_51": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "exp_103": {
                "variable": {
                    "value": "pt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_48": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ],
                        [
                            "targets[not_ignored]",
                            "Subscript"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_100": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ],
                        [
                            "targets[not_ignored]",
                            "Subscript"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/miscellaneous/nnUNetTrainerV2_fullEvals.py": {
        "torch": {
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/nnUNetTrainerNoDA.py": {
        "torch": {}
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_Adam.py": {
        "torch": {
            "Adam_23": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_Adam_ReduceOnPlateau.py": {
        "torch": {
            "Adam_34": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_36": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_SGD_ReduceOnPlateau.py": {
        "torch": {
            "SGD_29": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_31": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum09.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum095.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum098.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum09in2D.py": {
        "torch": {
            "SGD_27": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "float"
                        ],
                        [
                            "0.9",
                            "float"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_reduceMomentumDuringTraining.py": {
        "torch": {
            "SGD_37": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/training/optimizer/ranger.py": {
        "torch": {
            "zeros_like_95": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_96": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_99": {
                "variable": {
                    "value": "state[slow_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/utilities/distributed.py": {
        "torch": {
            "rand_64": {
                "variable": {
                    "value": "rnd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "c.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_78": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs, 2, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_device_61": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "allgather_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(input) for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_32": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/utilities/nd_softmax.py": {
        "torch": {
            "softmax_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/utilities/tensor_utilities.py": {
        "torch": {
            "arange_50": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "4-ContinualLearning/nnUNet/nnunet/utilities/to_torch.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[maybe_to_torch(i) if not isinstance(i, torch.Tensor) else i for i in d]",
                            "ListComp"
                        ],
                        [
                            "torch.from_numpy(d).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}