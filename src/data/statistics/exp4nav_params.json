{
    "src/utils/logger.py": {
        "tensorflow": {
            "summary_iterator_433": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "variable"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/algos/base.py": {
        "torch": {
            "load_94": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config['pretrain_dir'], 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.config['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_78": {
                "obj": {
                    "value": "data_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'ckpt_step': step, 'global_iter': self.global_iter, 'state_dict': self.net_model.state_dict(), 'optimizer': self.optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.config['pretrain_dir'], 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/algos/ppo_map.py": {
        "torch": {
            "Adam_30": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_33": {
                "variable": {
                    "value": "self.val_loss_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_rollout(repeat_num=self.config['train_rollout_repeat'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(actions).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "actions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "returns",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "returns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_rollout(repeat_num=self.config['train_rollout_repeat'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(returns).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "returns",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "advs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "advs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_rollout(repeat_num=self.config['train_rollout_repeat'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(advs).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "(advs - advs.mean()) / (advs.std() + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "advs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "old_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "old_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(old_log_probs).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "old_log_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_195": {
                "variable": {
                    "value": "vals_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vals_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(vals_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_198": {
                "variable": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs - old_log_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_203": {
                "variable": {
                    "value": "pg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(pg_loss1, pg_loss2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_200": {
                "input": {
                    "value": "ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_probs - old_log_probs)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - self.config['cliprange']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + self.config['cliprange']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_203": {
                "input": {
                    "value": "pg_loss1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-advs * ratio",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_207": {
                "input": {
                    "value": "torch.pow(old_log_probs - log_probs, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__213": {
                "parameters": {
                    "value": "self.net_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.config['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_207": {
                "input": {
                    "value": "old_log_probs - log_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_204": {
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_218": {
                "input": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/il_pretrain/demo_dataset.py": {
        "torch": {}
    },
    "src/il_pretrain/il_map.py": {
        "torch": {
            "load_43": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'ckpt_{:08d}.pth'.format(global_iter))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_115": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and (not args.disable_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_154": {
                "variable": {
                    "value": "loss_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_159": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HumanDemoDatasetRGBMAP(root_dir=args.demo_dir, seq_len=args.traj_len, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HumanDemoDatasetRGBMAP(root_dir=args.demo_dir, seq_len=args.traj_len, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "data_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'global_iter': global_iter, 'global_step': global_step, 'state_dict': net_model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'ckpt_{:08d}.pth'.format(global_iter))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__191": {
                "parameters": {
                    "value": "net_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/il_pretrain/il_map_rgb.py": {
        "torch": {
            "load_42": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'ckpt_{:08d}.pth'.format(global_iter))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_114": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and (not args.disable_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_150": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_153": {
                "variable": {
                    "value": "loss_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HumanDemoDatasetRGBMAP(root_dir=args.demo_dir, seq_len=args.traj_len, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_160": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HumanDemoDatasetRGBMAP(root_dir=args.demo_dir, seq_len=args.traj_len, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_29": {
                "obj": {
                    "value": "data_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'global_iter': global_iter, 'global_step': global_step, 'state_dict': net_model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'ckpt_{:08d}.pth'.format(global_iter))",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'model_best.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(model_dir, 'ckpt_{:08d}.pth'.format(step))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__195": {
                "parameters": {
                    "value": "net_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "torch": {
            "device_60": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and (not args.disable_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/ppo_nets.py": {
        "torch": {
            "AvgPool2d_43": {
                "variable": {
                    "value": "self.large_map_resnet_model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.large_map_resnet_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.large_map_resnet_model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_46": {
                "variable": {
                    "value": "self.small_map_resnet_model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.small_map_resnet_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.large_map_resnet_model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.merge_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "num_in + 128",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "rnn_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.actor_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(rnn_hidden_dim, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.actor_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "act_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "act_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.critic_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(rnn_hidden_dim, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.critic_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_103": {
                "variable": {
                    "value": "rnn_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.merge_fc(cnn_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_108": {
                "variable": {
                    "value": "cat_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_head(self.actor_fc(rnn_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_40": {
                "variable": {
                    "value": "self.rgb_resnet_model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.rgb_resnet_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.large_map_resnet_model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "cnn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rgb_cnn_out, l_cnn_out, s_cnn_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "cnn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_cnn_out, s_cnn_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "rnn_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "rnn_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ELU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "self.rnn_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "large_maps.size()",
                            "Call"
                        ],
                        [
                            "small_maps.size()",
                            "Call"
                        ],
                        [
                            "rgb_ims.size()",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "self.rnn_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "large_maps.size()",
                            "Call"
                        ],
                        [
                            "small_maps.size()",
                            "Call"
                        ],
                        [
                            "rgb_ims.size()",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "self.rnn_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "large_maps.size()",
                            "Call"
                        ],
                        [
                            "small_maps.size()",
                            "Call"
                        ],
                        [
                            "rgb_ims.size()",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.rnn_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_113": {
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.actor_head(self.actor_fc(rnn_out))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/test_policy.py": {
        "torch": {
            "device_63": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and (not args.disable_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/common.py": {
        "torch": {
            "tensor_33": {
                "variable": {
                    "value": "rgb_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "rgb_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_26": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(imgs).float()",
                            "Call"
                        ],
                        [
                            "imgs.unsqueeze(dim=0)",
                            "Call"
                        ],
                        [
                            "imgs.permute(0, 1, 4, 2, 3).to(device)",
                            "Call"
                        ],
                        [
                            "imgs / 255.0",
                            "BinOp"
                        ],
                        [
                            "(imgs - rgb_mean) / rgb_std",
                            "BinOp"
                        ],
                        [
                            "imgs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}