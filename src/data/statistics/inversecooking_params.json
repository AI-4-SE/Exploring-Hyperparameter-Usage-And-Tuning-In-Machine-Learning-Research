{
    "src/data_loader.py": {
        "torch": {
            "stack_161": {
                "variable": {
                    "value": "image_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(image_input, 0)",
                            "Call"
                        ],
                        [
                            "torch.zeros((3, 224, 224))",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "ingrs_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ingrs_gt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack(ingrs_gt, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ilabels_gt).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_190": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Recipe1MDataset(data_dir=data_dir, aux_data_dir=aux_data_dir, split=split, maxseqlen=maxseqlen, maxnumlabels=maxnumlabels, maxnuminstrs=maxnuminstrs, maxnumims=maxnumims, transform=transform, max_num_samples=max_num_samples, use_lmdb=use_lmdb, suff=suff)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "ingrs_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ilabels_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.ones(self.max_num_labels) * self.ingrs_vocab('<pad>')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_138": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "image_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_166": {
                "*size": {
                    "value": "len(captions)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "inp_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_32": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ids.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_33": {
                "variable": {
                    "value": "mask_aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_80": {
                "variable": {
                    "value": "label_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_81": {
                "variable": {
                    "value": "eos_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "ingr_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingr_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(ingr_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_152": {
                "variable": {
                    "value": "(ingr_probs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ingr_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ingr_logits * mask_perminv.float().unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_158": {
                "variable": {
                    "value": "ingr_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingr_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.crit_ingr(ingr_probs, target_one_hot_smooth)",
                            "Call"
                        ],
                        [
                            "torch.mean(ingr_loss, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_163": {
                "input": {
                    "value": "(ingr_probs * target_one_hot).sum(1) - target_one_hot.sum(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_164": {
                "input": {
                    "value": "(ingr_probs * (1 - target_one_hot)).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/encoder.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(resnet.fc.in_features, embed_size, kernel_size=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_39": {
                "variable": {
                    "value": "embeddinglayer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "scale_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_54": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.linear.weight)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.dropout(embeddings, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "embeddings.permute(0, 2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.linear.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "resnet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_19": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/multihead_attention.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:end]",
                            "Subscript"
                        ],
                        [
                            "bias[start:]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_115": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q * self.scaling",
                            "BinOp"
                        ],
                        [
                            "self.in_proj_q(query)",
                            "Call"
                        ],
                        [
                            "self.in_proj_q(query)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_132": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_133": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + self.buffered_mask(attn_weights).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.float().masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf')).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights.float(), dim=-1).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.sum(dim=1) / self.num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_135": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_weights + self.buffered_mask(attn_weights).unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.float().masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf')).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz * self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_weights.float(), dim=-1).type_as(attn_weights)",
                            "Call"
                        ],
                        [
                            "F.dropout(attn_weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "attn_weights.view(bsz, self.num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_weights.sum(dim=1) / self.num_heads",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.in_proj_v(value)",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(src_len, bsz * self.num_heads, self.head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((saved_state['prev_value'], v), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_172": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.in_proj_weight",
                            "Attribute"
                        ],
                        [
                            "weight[:end, :]",
                            "Subscript"
                        ],
                        [
                            "weight[start:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.in_proj_bias",
                            "Attribute"
                        ],
                        [
                            "bias[:end]",
                            "Subscript"
                        ],
                        [
                            "bias[start:]",
                            "Subscript"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "triu_177": {
                "variable": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "fill_with_neg_inf(tensor.new(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "triu_179": {
                "variable": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "fill_with_neg_inf(self._mask.resize_(dim, dim))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(saved_state['prev_key'], k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(saved_state['prev_value'], v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/transformer_decoder.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_478": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_484": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_489": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_99": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(half_dim, dtype=torch.float) * -emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(emb), torch.cos(emb)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_158": {
                "variable": {
                    "value": "self.layer_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LayerNorm(self.embed_dim) for i in range(num_layer_norm)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(-1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(-1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.last_ln(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(captions)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layer_norms_in[2](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, ingr_features, ingr_mask, incremental_state, img_features)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_215": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(-1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(-1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.last_ln(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(captions)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layer_norms_in[2](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, ingr_features, ingr_mask, incremental_state, img_features)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_221": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_222": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(-1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(-1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.last_ln(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(captions)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layer_norms_in[2](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, ingr_features, ingr_mask, incremental_state, img_features)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.relu_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_224": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(-1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(-1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.last_ln(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(captions)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layer_norms_in[2](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, ingr_features, ingr_mask, incremental_state, img_features)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_249": {
                "variable": {
                    "value": "self.embed_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "scale_embed_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_261": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_304": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.maybe_layer_norm(0, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(0, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.maybe_layer_norm(-1, x, before=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.relu_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "residual + x",
                            "BinOp"
                        ],
                        [
                            "self.maybe_layer_norm(-1, x, after=True)",
                            "Call"
                        ],
                        [
                            "self.last_ln(x)",
                            "Call"
                        ],
                        [
                            "self.embed_scale * self.embed_tokens(captions)",
                            "BinOp"
                        ],
                        [
                            "x + positions",
                            "BinOp"
                        ],
                        [
                            "self.layer_norms_in[2](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "layer(x, ingr_features, ingr_mask, incremental_state, img_features)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_386": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sampled_ids[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_387": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(logits, 1)",
                            "Call"
                        ],
                        [
                            "finished[0][1]",
                            "Subscript"
                        ],
                        [
                            "sequences[0][1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_36": {
                "start": {
                    "value": "padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "max_pos",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "padding_idx + 1 + tensor.size(1)",
                            "BinOp"
                        ],
                        [
                            "self.padding_idx + 1 + seq_len",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "range_buf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor.new()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_104": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb, torch.zeros(num_embeddings, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_258": {
                "variable": {
                    "value": "self.layer_norms_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LayerNorm(embed_size) for i in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_456": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "finished[0][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_459": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sequences[0][0][1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_100": {
                "start": {
                    "value": "num_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_100": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "kv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_features, ingr_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(img_features.shape[1], img_features.shape[0], dtype=torch.uint8).to(device), ingr_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_345": {
                "*size": {
                    "value": "fs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ingr_features.size(0)",
                            "Call"
                        ],
                        [
                            "img_features.size(0)",
                            "Call"
                        ],
                        [
                            "ingr_features.size(0)",
                            "Call"
                        ],
                        [
                            "img_features.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_371": {
                "variable": {
                    "value": "outputs_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "outputs + predicted_mask",
                            "BinOp"
                        ],
                        [
                            "outputs.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "div_376": {
                "variable": {
                    "value": "outputs_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "temperature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "topk_380": {
                "variable": {
                    "value": "(prob_prev_topk, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(outputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.div(outputs.squeeze(1), temperature)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(outputs_prob, dim=-1).data",
                            "Attribute"
                        ],
                        [
                            "torch.nn.functional.log_softmax(outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "beam",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_381": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_prev_topk",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_400": {
                "*size": {
                    "value": "fs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ingr_features.size(0)",
                            "Call"
                        ],
                        [
                            "img_features.size(0)",
                            "Call"
                        ],
                        [
                            "ingr_features.size(0)",
                            "Call"
                        ],
                        [
                            "img_features.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_428": {
                "variable": {
                    "value": "outputs_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "outputs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "outputs + predicted_mask",
                            "BinOp"
                        ],
                        [
                            "outputs.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_429": {
                "variable": {
                    "value": "(probs, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(outputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.div(outputs.squeeze(1), temperature)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(outputs_prob, dim=-1).data",
                            "Attribute"
                        ],
                        [
                            "torch.nn.functional.log_softmax(outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_99": {
                "start": {
                    "value": "half_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embedding_dim // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_353": {
                "tensors": {
                    "value": "sampled_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[first_word]",
                            "List"
                        ],
                        [
                            "torch.stack(sampled_ids[1:], 1)",
                            "Call"
                        ],
                        [
                            "torch.stack(finished[0][0][1:], 1)",
                            "Call"
                        ],
                        [
                            "torch.stack(sequences[0][0][1:], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_359": {
                "variable": {
                    "value": "predicted_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "num_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_377": {
                "input": {
                    "value": "outputs_prob",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(outputs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.div(outputs.squeeze(1), temperature)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(outputs_prob, dim=-1).data",
                            "Attribute"
                        ],
                        [
                            "torch.nn.functional.log_softmax(outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_412": {
                "tensors": {
                    "value": "sequences[rem][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_418": {
                "variable": {
                    "value": "predicted_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "outputs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_101": {
                "input": {
                    "value": "emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_101": {
                "input": {
                    "value": "emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "math.log(10000) / (half_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(torch.arange(half_dim, dtype=torch.float) * -emb)",
                            "Call"
                        ],
                        [
                            "torch.arange(num_embeddings, dtype=torch.float).unsqueeze(1) * emb.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.sin(emb), torch.cos(emb)], dim=1).view(num_embeddings, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([emb, torch.zeros(num_embeddings, 1)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_206": {
                "*size": {
                    "value": "img_features.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "img_features.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_382": {
                "input": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "predicted",
                    "type": "Call",
                    "possible_values": [
                        [
                            "predicted.detach()",
                            "Call"
                        ],
                        [
                            "torch.multinomial(prob_prev_topk, 1).view(-1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(indices, dim=1, index=predicted)[:, 0].detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/modules/utils.py": {
        "torch": {
            "load_70": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda s, l: default_restore_location(s, 'cpu')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_148": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda s, l: default_restore_location(s, 'cpu')",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "remainder_345": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range - num_pads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src_tokens.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "remainder_347": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "range + num_pads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src_tokens.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_177": {
                "obj": {
                    "value": "maybe_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_260": {
                "variable": {
                    "value": "embed_dict[pieces[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_309": {
                "start": {
                    "value": "padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "max_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padding_idx + 1 + tensor.size(1)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "make_positions.range_buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_325": {
                "start": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "buffered_arange.buf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_360": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_24": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_tensor_38": {
                "obj": {
                    "value": "state_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'args': args, 'model': convert_state_dict_type(model.state_dict()), 'optimizer_history': optim_history + [{'criterion_name': criterion.__class__.__name__, 'optimizer_name': optimizer.__class__.__name__, 'lr_scheduler_state': lr_scheduler.state_dict(), 'num_updates': num_updates}], 'last_optimizer_state': convert_state_dict_type(optimizer.state_dict()), 'extra_state': extra_state}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "src/sample.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "inp_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_203": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_204": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_102": {
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, args.project_name, args.model_name, 'checkpoints', 'modelbest.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_132": {
                "variable": {
                    "value": "perplexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recipe_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "losses['recipe_loss']",
                            "Subscript"
                        ],
                        [
                            "recipe_loss.view(true_caps_shift.size())",
                            "Call"
                        ],
                        [
                            "torch.sum(recipe_loss * non_pad_mask, dim=-1) / torch.sum(non_pad_mask, dim=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_145": {
                "variable": {
                    "value": "iou_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softIoU(pred_one_hot, target_one_hot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_131": {
                "input": {
                    "value": "non_pad_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "true_caps_shift.ne(instrs_vocab_size - 1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_52": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, 'optim' + suff + '.ckpt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_163": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': params}, {'params': params_cnn, 'lr': args.learning_rate * args.scale_learning_rate_cnn}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_169": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "list(model.ingredient_decoder.parameters())",
                            "Call"
                        ],
                        [
                            "list(model.recipe_decoder.parameters()) + list(model.ingredient_encoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(model.recipe_decoder.parameters()) + list(model.ingredient_decoder.parameters()) + list(model.ingredient_encoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "params + list(model.image_encoder.linear.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_184": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, args.project_name, args.transfer_from, 'checkpoints', 'modelbest.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save_dir, args.project_name, args.model_name, 'checkpoints', 'model.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save_dir, args.project_name, args.transfer_from, 'checkpoints', 'modelbest.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataParallel_190": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_model(args, ingr_vocab_size, instrs_vocab_size)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_394": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_395": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_35": {
                "f": {
                    "value": "model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, args.project_name, args.transfer_from, 'checkpoints', 'modelbest.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save_dir, args.project_name, args.model_name, 'checkpoints', 'model.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save_dir, args.project_name, args.transfer_from, 'checkpoints', 'modelbest.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_count_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_45": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, 'model' + suff + '.ckpt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_49": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, 'model' + suff + '.ckpt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_221": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': params}, {'params': params_cnn, 'lr': decay_factor * args.learning_rate * args.scale_learning_rate_cnn}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "decay_factor * args.learning_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_174": {
                "f": {
                    "value": "optim_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, args.project_name, args.model_name, 'checkpoints', 'optim.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_179": {
                "f": {
                    "value": "model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.save_dir, args.project_name, args.transfer_from, 'checkpoints', 'modelbest.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save_dir, args.project_name, args.model_name, 'checkpoints', 'model.ckpt')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.save_dir, args.project_name, args.transfer_from, 'checkpoints', 'modelbest.ckpt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_count_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_290": {
                "variable": {
                    "value": "perplexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recipe_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "losses['recipe_loss']",
                            "Subscript"
                        ],
                        [
                            "recipe_loss.view(true_caps_batch.size())",
                            "Call"
                        ],
                        [
                            "torch.sum(recipe_loss * non_pad_mask, dim=-1) / torch.sum(non_pad_mask, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "recipe_loss.mean()",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "synchronize_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_289": {
                "input": {
                    "value": "non_pad_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "true_caps_batch.ne(instrs_vocab_size - 1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_272": {
                "input": {
                    "value": "iou_sample.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/metrics.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_23": {
                "variable": {
                    "value": "lprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}