{
    "tensorflow/assessors/aestheticsnet.py": {
        "tensorflow": {
            "reverse_40": {
                "variable": {
                    "value": "myinput_BGR",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "myinput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(myinput, [0] + [channel_dim] + [i for i in range(1, 4) if i != channel_dim])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_43": {
                "variable": {
                    "value": "myinput_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "myinput_channels_first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels_first(myinput_227)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_56": {
                "variable": {
                    "value": "paddings_2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, 0], [2, 2], [2, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_57": {
                "variable": {
                    "value": "paddings_1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, 0], [1, 1], [1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_62": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "myinput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(myinput, [0] + [channel_dim] + [i for i in range(1, 4) if i != channel_dim])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[11, 11]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv1.weight'].numpy(), [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv1.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_74": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=myinput, data_format='channels_first', filters=96, kernel_size=[11, 11], strides=[4, 4], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['conv1.weight'].numpy(), [2, 3, 1, 0])), bias_initializer=tf.constant_initializer(state_dict['conv1.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_79": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.local_response_normalization(tf.transpose(pool1, [0, 2, 3, 1]), depth_radius=2, alpha=2e-05, beta=0.75, bias=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_83": {
                "variable": {
                    "value": "norm1_padd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.nn.local_response_normalization(tf.transpose(pool1, [0, 2, 3, 1]), depth_radius=2, alpha=2e-05, beta=0.75, bias=1), [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [0, 0], [2, 2], [2, 2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_88": {
                "variable": {
                    "value": "conv2_group1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "norm1_padd_group1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm1_padd[:, tf.constant(0):tf.constant(48), :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv2.weight'].numpy()[0:128, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv2.bias'].numpy()[0:128])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "conv2_group2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "norm1_padd_group2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm1_padd[:, tf.constant(48):tf.constant(96), :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv2.weight'].numpy()[128:256, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv2.bias'].numpy()[128:256])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv2_group1, conv2_group2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pooling2d_115": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([conv2_group1, conv2_group2], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_118": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.local_response_normalization(tf.transpose(pool2, [0, 2, 3, 1]), depth_radius=2, alpha=2e-05, beta=0.75, bias=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_122": {
                "variable": {
                    "value": "norm2_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.nn.local_response_normalization(tf.transpose(pool2, [0, 2, 3, 1]), depth_radius=2, alpha=2e-05, beta=0.75, bias=1), [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [0, 0], [1, 1], [1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_125": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "norm2_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(norm2, paddings_1)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv3.weight'].numpy(), [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv3.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_135": {
                "variable": {
                    "value": "conv3_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=norm2_padded, data_format='channels_first', filters=384, kernel_size=[3, 3], strides=[1, 1], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['conv3.weight'].numpy(), [2, 3, 1, 0])), bias_initializer=tf.constant_initializer(state_dict['conv3.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [0, 0], [1, 1], [1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_140": {
                "variable": {
                    "value": "conv4_group1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3_padded_group1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv3_padded[:, tf.constant(0):tf.constant(192), :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv4.weight'].numpy()[0:192, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv4.bias'].numpy()[0:192])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_153": {
                "variable": {
                    "value": "conv4_group2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3_padded_group2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv3_padded[:, tf.constant(192):tf.constant(384), :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv4.weight'].numpy()[192:384, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv4.bias'].numpy()[192:384])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_165": {
                "variable": {
                    "value": "conv4_padded_group1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv4_group1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=conv3_padded_group1, data_format='channels_first', filters=192, kernel_size=[3, 3], strides=[1, 1], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['conv4.weight'].numpy()[0:192, :, :, :], [2, 3, 1, 0])), bias_initializer=tf.constant_initializer(state_dict['conv4.bias'].numpy()[0:192]))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [0, 0], [1, 1], [1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_166": {
                "variable": {
                    "value": "conv4_padded_group2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv4_group2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=conv3_padded_group2, data_format='channels_first', filters=192, kernel_size=[3, 3], strides=[1, 1], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['conv4.weight'].numpy()[192:384, :, :, :], [2, 3, 1, 0])), bias_initializer=tf.constant_initializer(state_dict['conv4.bias'].numpy()[192:384]))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [0, 0], [1, 1], [1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_169": {
                "variable": {
                    "value": "conv5_group1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv4_padded_group1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(conv4_group1, paddings_1)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv5.weight'].numpy()[0:128, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv5.bias'].numpy()[0:128])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_181": {
                "variable": {
                    "value": "conv5_group2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv4_padded_group2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(conv4_group2, paddings_1)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv5.weight'].numpy()[128:256, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv5.bias'].numpy()[128:256])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_193": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv5_group1, conv5_group2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pooling2d_196": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([conv5_group1, conv5_group2], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_200": {
                "variable": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool5_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.Flatten(data_format='channels_last')(pool5)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc6.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc6.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_208": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=pool5_flat, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc6.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc6.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc7.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_216": {
                "variable": {
                    "value": "fc8",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_new.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_new.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_224": {
                "variable": {
                    "value": "fc8_BalancingElement",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_BalancingElement.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_BalancingElement.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_233": {
                "variable": {
                    "value": "BalancingElement",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_BalancingElement",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=256, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8_BalancingElement.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8_BalancingElement.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc9_BalancingElement.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc9_BalancingElement.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_242": {
                "variable": {
                    "value": "fc8_ColorHarmony",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_ColorHarmony.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_ColorHarmony.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_250": {
                "variable": {
                    "value": "ColorHarmony",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_ColorHarmony",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=256, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8_ColorHarmony.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8_ColorHarmony.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc9_ColorHarmony.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc9_ColorHarmony.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_261": {
                "variable": {
                    "value": "fc8_Content",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_Content.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_Content.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_268": {
                "variable": {
                    "value": "Content",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_Content",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=256, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8_Content.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8_Content.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc9_Content.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc9_Content.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_279": {
                "variable": {
                    "value": "fc8_DoF",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_DoF.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_DoF.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_286": {
                "variable": {
                    "value": "DoF",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_DoF",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=256, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8_DoF.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8_DoF.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc9_DoF.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc9_DoF.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_296": {
                "variable": {
                    "value": "fc8_Light",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_Light.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_Light.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_303": {
                "variable": {
                    "value": "Light",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_Light",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=256, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8_Light.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8_Light.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc9_Light.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc9_Light.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_314": {
                "variable": {
                    "value": "fc8_MotionBlur",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_MotionBlur.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_MotionBlur.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_322": {
                "variable": {
                    "value": "MotionBlur",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_MotionBlur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=256, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8_MotionBlur.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8_MotionBlur.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc9_MotionBlur.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc9_MotionBlur.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_333": {
                "variable": {
                    "value": "fc8_Object",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_Object.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_Object.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_340": {
                "variable": {
                    "value": "Object",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_Object",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=256, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8_Object.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8_Object.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc9_Object.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc9_Object.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_351": {
                "variable": {
                    "value": "fc8_Repetition",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_Repetition.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_Repetition.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_359": {
                "variable": {
                    "value": "Repetition",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_Repetition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=256, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8_Repetition.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8_Repetition.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc9_Repetition.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc9_Repetition.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_369": {
                "variable": {
                    "value": "fc8_RuleOfThirds",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_RuleOfThirds.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_RuleOfThirds.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_377": {
                "variable": {
                    "value": "RuleOfThirds",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_RuleOfThirds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=256, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8_RuleOfThirds.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8_RuleOfThirds.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc9_RuleOfThirds.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc9_RuleOfThirds.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_388": {
                "variable": {
                    "value": "fc8_Symmetry",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_Symmetry.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_Symmetry.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_395": {
                "variable": {
                    "value": "Symmetry",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_Symmetry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=256, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8_Symmetry.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8_Symmetry.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc9_Symmetry.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc9_Symmetry.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_406": {
                "variable": {
                    "value": "fc8_VividColor",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8_VividColor.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8_VividColor.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_414": {
                "variable": {
                    "value": "VividColor",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_VividColor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=256, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8_VividColor.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8_VividColor.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc9_VividColor.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc9_VividColor.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_424": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fc8, fc8_BalancingElement, fc8_ColorHarmony, fc8_Content, fc8_DoF, fc8_Light, fc8_MotionBlur, fc8_Object, fc8_Repetition, fc8_RuleOfThirds, fc8_Symmetry, fc8_VividColor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_428": {
                "variable": {
                    "value": "f10_merge",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fc8, fc8_BalancingElement, fc8_ColorHarmony, fc8_Content, fc8_DoF, fc8_Light, fc8_MotionBlur, fc8_Object, fc8_Repetition, fc8_RuleOfThirds, fc8_Symmetry, fc8_VividColor], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc10_Merge.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc10_Merge.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_436": {
                "variable": {
                    "value": "fc11_score",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "f10_merge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=concat, units=128, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc10_Merge.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc10_Merge.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc11_score.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc11_score.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_35": {
                "variable": {
                    "value": "myinput",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "myinput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(myinput, [0] + [channel_dim] + [i for i in range(1, 4) if i != channel_dim])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0] + [channel_dim] + [i for i in range(1, 4) if i != channel_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_41": {
                "value": {
                    "value": "[227, 227]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_43": {
                "value": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(mean_image_file)",
                            "Call"
                        ],
                        [
                            "mu[:, 14:241, 14:241]",
                            "Subscript"
                        ],
                        [
                            "self.get_mu(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'mean_AADB_regression_warp256_lore.npy'))",
                            "Call"
                        ]
                    ]
                }
            },
            "local_response_normalization_80": {
                "input": {
                    "value": "tf.transpose(pool1, [0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "depth_radius": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "bias": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "local_response_normalization_119": {
                "input": {
                    "value": "tf.transpose(pool2, [0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "depth_radius": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "bias": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_199": {
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_69": {
                "value": {
                    "value": "np.transpose(state_dict['conv1.weight'].numpy(), [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_71": {
                "value": {
                    "value": "state_dict['conv1.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_80": {
                "a": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv1, pool_size=3, strides=2, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_95": {
                "value": {
                    "value": "np.transpose(state_dict['conv2.weight'].numpy()[0:128, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_98": {
                "value": {
                    "value": "state_dict['conv2.bias'].numpy()[0:128]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_107": {
                "value": {
                    "value": "np.transpose(state_dict['conv2.weight'].numpy()[128:256, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_110": {
                "value": {
                    "value": "state_dict['conv2.bias'].numpy()[128:256]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_119": {
                "a": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv2, pool_size=3, strides=2, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_132": {
                "value": {
                    "value": "np.transpose(state_dict['conv3.weight'].numpy(), [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_134": {
                "value": {
                    "value": "state_dict['conv3.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_148": {
                "value": {
                    "value": "np.transpose(state_dict['conv4.weight'].numpy()[0:192, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_151": {
                "value": {
                    "value": "state_dict['conv4.bias'].numpy()[0:192]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_160": {
                "value": {
                    "value": "np.transpose(state_dict['conv4.weight'].numpy()[192:384, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_163": {
                "value": {
                    "value": "state_dict['conv4.bias'].numpy()[192:384]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_176": {
                "value": {
                    "value": "np.transpose(state_dict['conv5.weight'].numpy()[0:128, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_179": {
                "value": {
                    "value": "state_dict['conv5.bias'].numpy()[0:128]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_188": {
                "value": {
                    "value": "np.transpose(state_dict['conv5.weight'].numpy()[128:256, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_191": {
                "value": {
                    "value": "state_dict['conv5.bias'].numpy()[128:256]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_203": {
                "value": {
                    "value": "np.transpose(state_dict['fc6.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_205": {
                "value": {
                    "value": "state_dict['fc6.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_211": {
                "value": {
                    "value": "np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_213": {
                "value": {
                    "value": "state_dict['fc7.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_219": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_new.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_221": {
                "value": {
                    "value": "state_dict['fc8_new.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_227": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_BalancingElement.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_230": {
                "value": {
                    "value": "state_dict['fc8_BalancingElement.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_236": {
                "value": {
                    "value": "np.transpose(state_dict['fc9_BalancingElement.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_238": {
                "value": {
                    "value": "state_dict['fc9_BalancingElement.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_245": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_ColorHarmony.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_247": {
                "value": {
                    "value": "state_dict['fc8_ColorHarmony.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_253": {
                "value": {
                    "value": "np.transpose(state_dict['fc9_ColorHarmony.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_255": {
                "value": {
                    "value": "state_dict['fc9_ColorHarmony.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_264": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_Content.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_266": {
                "value": {
                    "value": "state_dict['fc8_Content.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_271": {
                "value": {
                    "value": "np.transpose(state_dict['fc9_Content.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_273": {
                "value": {
                    "value": "state_dict['fc9_Content.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_282": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_DoF.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_284": {
                "value": {
                    "value": "state_dict['fc8_DoF.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_289": {
                "value": {
                    "value": "np.transpose(state_dict['fc9_DoF.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_291": {
                "value": {
                    "value": "state_dict['fc9_DoF.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_299": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_Light.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_301": {
                "value": {
                    "value": "state_dict['fc8_Light.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_306": {
                "value": {
                    "value": "np.transpose(state_dict['fc9_Light.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_308": {
                "value": {
                    "value": "state_dict['fc9_Light.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_317": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_MotionBlur.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_319": {
                "value": {
                    "value": "state_dict['fc8_MotionBlur.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_325": {
                "value": {
                    "value": "np.transpose(state_dict['fc9_MotionBlur.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_327": {
                "value": {
                    "value": "state_dict['fc9_MotionBlur.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_336": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_Object.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_338": {
                "value": {
                    "value": "state_dict['fc8_Object.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_343": {
                "value": {
                    "value": "np.transpose(state_dict['fc9_Object.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_345": {
                "value": {
                    "value": "state_dict['fc9_Object.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_354": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_Repetition.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_356": {
                "value": {
                    "value": "state_dict['fc8_Repetition.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_362": {
                "value": {
                    "value": "np.transpose(state_dict['fc9_Repetition.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_364": {
                "value": {
                    "value": "state_dict['fc9_Repetition.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_372": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_RuleOfThirds.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_374": {
                "value": {
                    "value": "state_dict['fc8_RuleOfThirds.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_380": {
                "value": {
                    "value": "np.transpose(state_dict['fc9_RuleOfThirds.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_382": {
                "value": {
                    "value": "state_dict['fc9_RuleOfThirds.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_391": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_Symmetry.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_393": {
                "value": {
                    "value": "state_dict['fc8_Symmetry.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_398": {
                "value": {
                    "value": "np.transpose(state_dict['fc9_Symmetry.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_400": {
                "value": {
                    "value": "state_dict['fc9_Symmetry.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_409": {
                "value": {
                    "value": "np.transpose(state_dict['fc8_VividColor.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_411": {
                "value": {
                    "value": "state_dict['fc8_VividColor.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_417": {
                "value": {
                    "value": "np.transpose(state_dict['fc9_VividColor.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_419": {
                "value": {
                    "value": "state_dict['fc9_VividColor.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_431": {
                "value": {
                    "value": "np.transpose(state_dict['fc10_Merge.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_433": {
                "value": {
                    "value": "state_dict['fc10_Merge.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_439": {
                "value": {
                    "value": "np.transpose(state_dict['fc11_score.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_441": {
                "value": {
                    "value": "state_dict['fc11_score.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_84": {
                "value": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_85": {
                "value": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_136": {
                "value": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_137": {
                "value": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/assessors/memnet.py": {
        "tensorflow": {
            "constant_40": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_41": {
                "variable": {
                    "value": "crops_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, 3, 227, 227]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_65": {
                "variable": {
                    "value": "(_, crops_list, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[myinput, crops_list, i]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([None, 256, 256, 3]), tf.TensorShape([None, 3, 227, 227]), i.get_shape()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_83": {
                "variable": {
                    "value": "myinput_BGR",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "myinput_channels_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels_last(myinput)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "subtract_85": {
                "variable": {
                    "value": "myinput_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "myinput_256",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(myinput_BGR, tf.constant([256, 256]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_100": {
                "variable": {
                    "value": "paddings_2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, 0], [2, 2], [2, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_101": {
                "variable": {
                    "value": "paddings_1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [0, 0], [1, 1], [1, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "myinput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(myinput, [i for i in range(4) if i != channel_dim] + [channel_dim])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[11, 11]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv1.weight'].numpy(), [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv1.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_118": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=myinput, data_format='channels_first', filters=96, kernel_size=[11, 11], strides=[4, 4], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['conv1.weight'].numpy(), [2, 3, 1, 0])), bias_initializer=tf.constant_initializer(state_dict['conv1.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_123": {
                "variable": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.local_response_normalization(tf.transpose(pool1, [0, 2, 3, 1]), depth_radius=2, alpha=2e-05, beta=0.75, bias=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_127": {
                "variable": {
                    "value": "norm1_padd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.nn.local_response_normalization(tf.transpose(pool1, [0, 2, 3, 1]), depth_radius=2, alpha=2e-05, beta=0.75, bias=1), [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [0, 0], [2, 2], [2, 2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_132": {
                "variable": {
                    "value": "conv2_group1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "norm1_padd_group1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm1_padd[:, tf.constant(0):tf.constant(48), :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv2.weight'].numpy()[0:128, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv2.bias'].numpy()[0:128])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_144": {
                "variable": {
                    "value": "conv2_group2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "norm1_padd_group2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm1_padd[:, tf.constant(48):tf.constant(96), :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv2.weight'].numpy()[128:256, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv2.bias'].numpy()[128:256])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_156": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv2_group1, conv2_group2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pooling2d_159": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([conv2_group1, conv2_group2], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_162": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.nn.local_response_normalization(tf.transpose(pool2, [0, 2, 3, 1]), depth_radius=2, alpha=2e-05, beta=0.75, bias=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_166": {
                "variable": {
                    "value": "norm2_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.nn.local_response_normalization(tf.transpose(pool2, [0, 2, 3, 1]), depth_radius=2, alpha=2e-05, beta=0.75, bias=1), [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [0, 0], [1, 1], [1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_169": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "norm2_padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(norm2, paddings_1)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv3.weight'].numpy(), [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv3.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_179": {
                "variable": {
                    "value": "conv3_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=norm2_padded, data_format='channels_first', filters=384, kernel_size=[3, 3], strides=[1, 1], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['conv3.weight'].numpy(), [2, 3, 1, 0])), bias_initializer=tf.constant_initializer(state_dict['conv3.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [0, 0], [1, 1], [1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_184": {
                "variable": {
                    "value": "conv4_group1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3_padded_group1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv3_padded[:, tf.constant(0):tf.constant(192), :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv4.weight'].numpy()[0:192, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv4.bias'].numpy()[0:192])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_196": {
                "variable": {
                    "value": "conv4_group2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3_padded_group2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv3_padded[:, tf.constant(192):tf.constant(384), :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv4.weight'].numpy()[192:384, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv4.bias'].numpy()[192:384])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_208": {
                "variable": {
                    "value": "conv4_padded_group1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv4_group1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=conv3_padded_group1, data_format='channels_first', filters=192, kernel_size=[3, 3], strides=[1, 1], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['conv4.weight'].numpy()[0:192, :, :, :], [2, 3, 1, 0])), bias_initializer=tf.constant_initializer(state_dict['conv4.bias'].numpy()[0:192]))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [0, 0], [1, 1], [1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_209": {
                "variable": {
                    "value": "conv4_padded_group2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv4_group2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=conv3_padded_group2, data_format='channels_first', filters=192, kernel_size=[3, 3], strides=[1, 1], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['conv4.weight'].numpy()[192:384, :, :, :], [2, 3, 1, 0])), bias_initializer=tf.constant_initializer(state_dict['conv4.bias'].numpy()[192:384]))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [0, 0], [1, 1], [1, 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_212": {
                "variable": {
                    "value": "conv5_group1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv4_padded_group1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(conv4_group1, paddings_1)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv5.weight'].numpy()[0:128, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv5.bias'].numpy()[0:128])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_224": {
                "variable": {
                    "value": "conv5_group2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv4_padded_group2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(conv4_group2, paddings_1)",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['conv5.weight'].numpy()[128:256, :, :, :], [2, 3, 1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['conv5.bias'].numpy()[128:256])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_236": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[conv5_group1, conv5_group2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pooling2d_239": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([conv5_group1, conv5_group2], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_first",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_243": {
                "variable": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool5_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.Flatten(data_format='channels_last')(pool5)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc6.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc6.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_251": {
                "variable": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=pool5_flat, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc6.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc6.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc7.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_259": {
                "variable": {
                    "value": "fc8",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc6, units=4096, activation=tf.nn.relu, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc7.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.constant_initializer(np.transpose(state_dict['fc8.weight'].numpy(), [1, 0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(state_dict['fc8.bias'].numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_265": {
                "variable": {
                    "value": "fc8_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fc8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=1, activation=None, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_268": {
                "variable": {
                    "value": "fc8_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=fc7, units=1, activation=None, kernel_initializer=tf.constant_initializer(np.transpose(state_dict['fc8.weight'].numpy(), [1, 0])), bias_initializer=tf.constant_initializer(state_dict['fc8.bias'].numpy()))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "average_pooling1d_269": {
                "variable": {
                    "value": "fc8_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fc8_expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(fc8, 0)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_271": {
                "variable": {
                    "value": "fc8_mean_squeeze",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc8_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_mean(fc8, 0)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling1d(inputs=fc8_expand, pool_size=[10], strides=[10], padding='valid', data_format='channels_last')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_274": {
                "variable": {
                    "value": "mean_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.7626",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_275": {
                "variable": {
                    "value": "mean_pred_add",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.65",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_276": {
                "variable": {
                    "value": "pred_rescale",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_277": {
                "variable": {
                    "value": "pred_min",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_278": {
                "variable": {
                    "value": "pred_max",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_281": {
                "variable": {
                    "value": "memorability",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.maximum((fc8_mean_squeeze - mean_pred) * pred_rescale + mean_pred_add, pred_min)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_48": {
                "variable": {
                    "value": "cropped_size",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "227",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_57": {
                "variable": {
                    "value": "crops_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[crops_list, [tf.transpose(img[center:center + cropped_size, center:center + cropped_size, :], (2, 0, 1))]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_61": {
                "variable": {
                    "value": "crops_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[crops_list, [tf.reverse(crops_list[-1], tf.constant([2]))]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "myinput",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "myinput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(myinput, [i for i in range(4) if i != channel_dim] + [channel_dim])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[i for i in range(4) if i != channel_dim] + [channel_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_44": {
                "x": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(batch)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_84": {
                "value": {
                    "value": "[256, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_85": {
                "value": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(mean_image_file)",
                            "Call"
                        ],
                        [
                            "scipy.io.loadmat(mean_image_file)",
                            "Call"
                        ],
                        [
                            "mu['image_mean']",
                            "Subscript"
                        ],
                        [
                            "mu.transpose((1, 2, 0))",
                            "Call"
                        ],
                        [
                            "self.get_mu(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'memnet_mean.mat'))",
                            "Call"
                        ]
                    ]
                }
            },
            "local_response_normalization_124": {
                "input": {
                    "value": "tf.transpose(pool1, [0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "depth_radius": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "bias": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "local_response_normalization_163": {
                "input": {
                    "value": "tf.transpose(pool2, [0, 2, 3, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "depth_radius": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "alpha": {
                    "value": "2e-05",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                },
                "bias": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_242": {
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_281": {
                "x": {
                    "value": "(fc8_mean_squeeze - mean_pred) * pred_rescale + mean_pred_add",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "pred_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_54": {
                "variable": {
                    "value": "crops_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[crops_list, [tf.transpose(temp_img, (2, 0, 1))]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "crops_list",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[crops_list, [tf.reverse(crops_list[-1], tf.constant([2]))]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_initializer_113": {
                "value": {
                    "value": "np.transpose(state_dict['conv1.weight'].numpy(), [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_115": {
                "value": {
                    "value": "state_dict['conv1.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_124": {
                "a": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv1, pool_size=3, strides=2, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_139": {
                "value": {
                    "value": "np.transpose(state_dict['conv2.weight'].numpy()[0:128, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_142": {
                "value": {
                    "value": "state_dict['conv2.bias'].numpy()[0:128]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_151": {
                "value": {
                    "value": "np.transpose(state_dict['conv2.weight'].numpy()[128:256, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_154": {
                "value": {
                    "value": "state_dict['conv2.bias'].numpy()[128:256]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "a": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=conv2, pool_size=3, strides=2, data_format='channels_first')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_176": {
                "value": {
                    "value": "np.transpose(state_dict['conv3.weight'].numpy(), [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_178": {
                "value": {
                    "value": "state_dict['conv3.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_191": {
                "value": {
                    "value": "np.transpose(state_dict['conv4.weight'].numpy()[0:192, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_194": {
                "value": {
                    "value": "state_dict['conv4.bias'].numpy()[0:192]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_203": {
                "value": {
                    "value": "np.transpose(state_dict['conv4.weight'].numpy()[192:384, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_206": {
                "value": {
                    "value": "state_dict['conv4.bias'].numpy()[192:384]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_219": {
                "value": {
                    "value": "np.transpose(state_dict['conv5.weight'].numpy()[0:128, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_222": {
                "value": {
                    "value": "state_dict['conv5.bias'].numpy()[0:128]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_231": {
                "value": {
                    "value": "np.transpose(state_dict['conv5.weight'].numpy()[128:256, :, :, :], [2, 3, 1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_234": {
                "value": {
                    "value": "state_dict['conv5.bias'].numpy()[128:256]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_246": {
                "value": {
                    "value": "np.transpose(state_dict['fc6.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_248": {
                "value": {
                    "value": "state_dict['fc6.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_254": {
                "value": {
                    "value": "np.transpose(state_dict['fc7.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_256": {
                "value": {
                    "value": "state_dict['fc7.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_262": {
                "value": {
                    "value": "np.transpose(state_dict['fc8.weight'].numpy(), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_264": {
                "value": {
                    "value": "state_dict['fc8.bias'].numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_44": {
                "input": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorShape_66": {
                "dims": {
                    "value": "[None, 256, 256, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_67": {
                "dims": {
                    "value": "[None, 3, 227, 227]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_128": {
                "value": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_129": {
                "value": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_180": {
                "value": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_181": {
                "value": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "a": {
                    "value": "img[center:center + cropped_size, center:center + cropped_size, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "(2, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reverse_61": {
                "tensor": {
                    "value": "crops_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.constant([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_54": {
                "a": {
                    "value": "temp_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img[i:i + cropped_size, j:j + cropped_size, :]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "(2, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reverse_55": {
                "tensor": {
                    "value": "crops_list[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "tf.constant([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_55": {
                "value": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/generators/biggan.py": {
        "tensorflow": {
            "identity_41": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs['z']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "z_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_42": {
                "variable": {
                    "value": "truncation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs['truncation']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "truncation_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs['y']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "y_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_48": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_49": {
                "variable": {
                    "value": "truncation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_50": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_value_59": {
                "t": {
                    "value": "(biggan_output + 1) / 2.0 * 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.get_shape().as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/test_tf.py": {
        "tensorflow": {
            "InteractiveSession_68": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_69": {
                "variable": {
                    "value": "new_saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "os.path.join(opts['checkpoint_dir'], 'model.ckpt-' + str(opts['checkpoint']) + '.meta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_89": {
                "variable": {
                    "value": "input_step_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_90": {
                "variable": {
                    "value": "gan_image",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_91": {
                "variable": {
                    "value": "image_score",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_92": {
                "variable": {
                    "value": "z_new",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_93": {
                "variable": {
                    "value": "transformed_gan_image",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_94": {
                "variable": {
                    "value": "transformed_image_score",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/train_tf.py": {
        "tensorflow": {
            "InteractiveSession_70": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "step_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "step_sizes_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_101": {
                "variable": {
                    "value": "z_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.norm(z, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_105": {
                "variable": {
                    "value": "z_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformation.transform(z, z_norm, y, step_sizes)",
                            "Call"
                        ],
                        [
                            "tf.identity(z_new, name='z_new_ganalyze')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "z_new_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_112": {
                "variable": {
                    "value": "gan_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gan_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.generate(inputs)",
                            "Call"
                        ],
                        [
                            "tf.identity(gan_image, name='gan_image_ganalyze')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "gan_image_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_114": {
                "variable": {
                    "value": "image_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assessor(gan_image)",
                            "Call"
                        ],
                        [
                            "tf.identity(image_score, name='image_score_ganalyze')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "image_score_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_118": {
                "variable": {
                    "value": "transformed_gan_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_gan_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.generate(transformed_inputs)",
                            "Call"
                        ],
                        [
                            "tf.identity(transformed_gan_image, name='transformed_gan_image_ganalyze')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "transformed_gan_image_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_120": {
                "variable": {
                    "value": "transformed_image_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transformed_image_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assessor(transformed_gan_image)",
                            "Call"
                        ],
                        [
                            "tf.identity(transformed_image_score, name='transformed_image_score_ganalyze')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "transformed_image_score_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_132": {
                "variable": {
                    "value": "step_sizes_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "step_sizes_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(step_sizes, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(step_sizes_expanded, axis=-1)",
                            "Call"
                        ],
                        [
                            "step_sizes",
                            "variable"
                        ],
                        [
                            "tf.identity(step_sizes_expanded, name='expanded_step_sizes_ganalyze')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "expanded_step_sizes_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_134": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_score + step_sizes_expanded",
                            "BinOp"
                        ],
                        [
                            "tf.identity(target, name='target_ganalyze')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "target_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_138": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformation.compute_loss(transformed_image_score, target)",
                            "Call"
                        ],
                        [
                            "tf.identity(loss, name='loss_ganalyze')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss_ganalyze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_144": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "float"
                        ]
                    ]
                }
            },
            "Saver_151": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_101": {
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['z']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_126": {
                "variable": {
                    "value": "step_sizes_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "step_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, 1), name='step_sizes_ganalyze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_128": {
                "variable": {
                    "value": "step_sizes_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "step_sizes_expanded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(step_sizes, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(step_sizes_expanded, axis=-1)",
                            "Call"
                        ],
                        [
                            "step_sizes",
                            "variable"
                        ],
                        [
                            "tf.identity(step_sizes_expanded, name='expanded_step_sizes_ganalyze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "trainable_variables_144": {
                "scope": {
                    "value": "parameters_to_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "latest_checkpoint_157": {
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('./checkpoints', opts['generator_arch'] + '__' + model_sub_dir, opts['assessor'], opts['transformer'][0] + '_' + opts['transformer'][1], version)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_158": {
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('./checkpoints', opts['generator_arch'] + '__' + model_sub_dir, opts['assessor'], opts['transformer'][0] + '_' + opts['transformer'][1], version)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/transformations/__init__.py": {
        "tensorflow": {}
    },
    "tensorflow/transformations/tensorflow.py": {
        "tensorflow": {
            "expand_dims_17": {
                "variable": {
                    "value": "z_new_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.norm(z_new, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_23": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(current - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_28": {
                "variable": {
                    "value": "overall_loss_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "w_ganalyze",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, dim_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "parameters_to_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_17": {
                "tensor": {
                    "value": "z_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "z_new + step_sizes * self.w",
                            "BinOp"
                        ],
                        [
                            "z_norm * z_new / z_new_norm",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_23": {
                "x": {
                    "value": "current - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/utils/tensorflow.py": {
        "tensorflow": {
            "global_variables_22": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_variable_initialized_23": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variables_initializer_28": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for (v, f) in zip(global_vars, is_not_initialized) if not f]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch/assessors/emonet.py": {
        "torch": {
            "load_29": {
                "variable": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./assessors/EmoNet_valence_moments_resnet50_5_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "cropped_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "227",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "cropped_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "227",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.model.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_86": {
                "variable": {
                    "value": "crops[img_index, 9, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "crops[img_index, curr, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_81": {
                "variable": {
                    "value": "crops[img_index, curr + 5, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "crops[img_index, curr, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_50": {
                "tensors": {
                    "value": "[normalize(x / 255) for x in crop]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "[normalize(x / 255) for x in image]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/generators/biggan.py": {
        "torch": {
            "Parameter_51": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_77": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_82": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_103": {
                "variable": {
                    "value": "attn_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(self.g(x)).view(m_batchsize, -1, N // 4)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_208": {
                "variable": {
                    "value": "self.GBlock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GBlock(16 * chn, 16 * chn, n_class=n_class, z_dim=z_dim), GBlock(16 * chn, 8 * chn, n_class=n_class, z_dim=z_dim), GBlock(8 * chn, 4 * chn, n_class=n_class, z_dim=z_dim), GBlock(4 * chn, 2 * chn, n_class=n_class, z_dim=z_dim), GBlock(2 * chn, 1 * chn, n_class=n_class, z_dim=z_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "chunk_223": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "self.num_split",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_235": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_244": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_253": {
                "variable": {
                    "value": "self.GBlock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GBlock(16 * chn, 16 * chn, n_class=n_class), GBlock(16 * chn, 8 * chn, n_class=n_class), GBlock(8 * chn, 8 * chn, n_class=n_class), GBlock(8 * chn, 4 * chn, n_class=n_class), GBlock(4 * chn, 2 * chn, n_class=n_class), GBlock(2 * chn, 1 * chn, n_class=n_class)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "chunk_269": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "self.num_split",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_281": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_301": {
                "variable": {
                    "value": "self.GBlock",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GBlock(16 * chn, 16 * chn, n_class=n_class, z_dim=z_dim), GBlock(16 * chn, 8 * chn, n_class=n_class, z_dim=z_dim), GBlock(8 * chn, 8 * chn, n_class=n_class, z_dim=z_dim), GBlock(8 * chn, 4 * chn, n_class=n_class, z_dim=z_dim), GBlock(4 * chn, 2 * chn, n_class=n_class, z_dim=z_dim), GBlock(2 * chn, 1 * chn, n_class=n_class, z_dim=z_dim), GBlock(1 * chn, 1 * chn, n_class=n_class, z_dim=z_dim)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "chunk_318": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "self.num_split",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_330": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_346": {
                "variable": {
                    "value": "self.pre_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SpectralNorm(nn.Conv2d(3, 1 * chn, 3, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_352": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(1 * chn, 1 * chn, downsample=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_362": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_371": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_391": {
                "variable": {
                    "value": "self.pre_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SpectralNorm(nn.Conv2d(3, 1 * chn, 3, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_399": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(1 * chn, 1 * chn, downsample=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_413": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_422": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_444": {
                "variable": {
                    "value": "self.pre_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SpectralNorm(nn.Conv2d(3, 1 * chn, 3, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_452": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv(1 * chn, 1 * chn, downsample=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_467": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_476": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_170": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_178": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[code, class_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_237": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_277": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[code, class_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_283": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_326": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[code, class_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_332": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.o_conv(attn_g)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "gamma.view(-1, self.num_features, 1, 1) * out + beta.view(-1, self.num_features, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "self.HyperBN(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv0(out)",
                            "Call"
                        ],
                        [
                            "self.HyperBN_1(out, condition)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.G_linear(codes[0])",
                            "Call"
                        ],
                        [
                            "out.view(-1, 4, 4, self.first_view).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.ScaledCrossReplicaBN(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.colorize(out)",
                            "Call"
                        ],
                        [
                            "self.attention(out)",
                            "Call"
                        ],
                        [
                            "GBlock(out, condition)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "out + self.pre_skip(F.avg_pool2d(input, 2))",
                            "BinOp"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ],
                        [
                            "self.pre_conv(input)",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), out.size(1), -1)",
                            "Call"
                        ],
                        [
                            "out.sum(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_490": {
                "f": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(os.path.realpath(__file__)), 'biggan-256.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(os.path.dirname(os.path.realpath(__file__)), 'biggan-512.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_497": {
                "f": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(os.path.realpath(__file__)), 'biggan-256.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(os.path.dirname(os.path.realpath(__file__)), 'biggan-512.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "in_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_101": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x)",
                            "Call"
                        ],
                        [
                            "theta.view(m_batchsize, -1, N)",
                            "Call"
                        ],
                        [
                            "theta.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x)",
                            "Call"
                        ],
                        [
                            "self.pool(phi)",
                            "Call"
                        ],
                        [
                            "phi.view(m_batchsize, -1, N // 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True if bn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True if bn else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "interpolate_184": {
                "variable": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "F.interpolate(skip, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(skip)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(skip, 2)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_187": {
                "variable": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "F.interpolate(skip, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_sc(skip)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(skip, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * 16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "in_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * 16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_266": {
                "in_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * 16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_315": {
                "in_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_349": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_350": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_360": {
                "in_features": {
                    "value": "16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_395": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_397": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "in_features": {
                    "value": "16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_420": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_448": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_450": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_465": {
                "in_features": {
                    "value": "16 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_474": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "input": {
                    "value": "_w.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self.module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "l2normalize(torch.matmul(_w, v))",
                            "Call"
                        ],
                        [
                            "Parameter(w.data.new(height).normal_(0, 1), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_32": {
                "input": {
                    "value": "_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.view(height, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self.module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "l2normalize(torch.matmul(_w.t(), u))",
                            "Call"
                        ],
                        [
                            "Parameter(w.data.new(height).normal_(0, 1), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_150": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_346": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_348": {
                "in_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_369": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_392": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_394": {
                "in_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_445": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_447": {
                "in_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * chn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/generators/layers/batchnorm.py": {
        "torch": {
            "batch_norm_51": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/test_pytorch.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(opts[gpu_id]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.common.truncated_z_sample(num_samples, dim_z, truncation)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(zs).type(torch.FloatTensor).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(y, num_samples)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ys).to(device)",
                            "Call"
                        ],
                        [
                            "utils.pytorch.one_hot(ys, vocab_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_191": {
                "variable": {
                    "value": "step_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "step_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(np.array(opts['alpha']), num_samples * dim_z).reshape([num_samples, dim_z])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(step_sizes).type(torch.FloatTensor).to(device)",
                            "Call"
                        ],
                        [
                            "feed_dict['step_sizes']",
                            "Subscript"
                        ],
                        [
                            "-step_sizes",
                            "UnaryOp"
                        ],
                        [
                            "-step_sizes",
                            "UnaryOp"
                        ],
                        [
                            "-step_sizes",
                            "UnaryOp"
                        ],
                        [
                            "-step_sizes",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_138": {
                "f": {
                    "value": "os.path.join(checkpoint_dir, file_to_load)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_141": {
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'pytorch_model_' + str(opts['checkpoint']) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/train_pytorch.py": {
        "torch": {
            "Adam_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformation.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(opts[gpu_id]) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_39": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "zs[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ys[s]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "step_sizes_broadcast",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "step_sizes_broadcast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(step_sizes, dim_z).reshape([batch_size, dim_z])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(step_sizes_broadcast).type(torch.FloatTensor).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_210": {
                "obj": {
                    "value": "transformation.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'pytorch_model_{}.pth'.format(opts['num_samples']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "step_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(train_alpha_b - train_alpha_a) * np.random.random(size=batch_size) + train_alpha_a",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_207": {
                "obj": {
                    "value": "transformation.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'pytorch_model_{}.pth'.format(batch_start))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_139": {
                "f": {
                    "value": "os.path.join(checkpoint_dir, file_to_load)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_142": {
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'pytorch_model_{}.pth'.format(opts['checkpoint_resume']))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/transformations/pytorch.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.dim_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_15": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.NN_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_43": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_14": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim_z",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch/utils/pytorch.py": {
        "torch": {
            "zeros_5": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "index.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}