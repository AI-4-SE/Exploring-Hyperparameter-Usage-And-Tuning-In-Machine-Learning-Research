{
    "demo/executer.py": {
        "torch": {}
    },
    "demo/nets.py": {
        "torch": {
            "Sequential_82": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.get_layers()",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_156": {
                "variable": {
                    "value": "(action_means, action_variances)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "super().forward(obs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(self.action_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "variances",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.diag(variance) for variance in variances]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "input": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultivariateNormal_169": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "variances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([torch.diag(variance) for variance in variances])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_225": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.process_sequence(obs)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(obs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "(obs, actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "mlp_input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_mlp_input_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "mlp_input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_mlp_input_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.network_config['mlp_layers'][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "self.network_config['mlp_layers'][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_166": {
                "input": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_37": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_layers, 1, self.hidden_size).type(torch.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "self.network_config['mlp_layers'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.network_config['mlp_layers'][i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.init_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_layers, 1, self.hidden_size).type(torch.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_70": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "batch_size * [self.init_h]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "batch_size * [self.init_h]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "batch_size * [self.init_c]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "demo/policy.py": {
        "torch": {
            "load_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'checkpoint.pth'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_43": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pad_sequence(obs, batch_first=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "obs[0].unsqueeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "environment/baseEnv.py": {
        "torch": {
            "split_640": {
                "tensor": {
                    "value": "actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "actions[0]",
                            "Subscript"
                        ],
                        [
                            "list(torch.split(actions, 6))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_497": {
                "tensors": {
                    "value": "critic_next_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_668": {
                "tensors": {
                    "value": "critic_obs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_493": {
                "tensors": {
                    "value": "(obs, torch.FloatTensor([0.0] * 6))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_666": {
                "tensors": {
                    "value": "(obs, action)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "environment/utils.py": {
        "torch": {}
    },
    "policy/ActorCritic.py": {
        "torch": {
            "stack_85": {
                "variable": {
                    "value": "action_variances",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.diag(action_variance) for action_variance in action_variances]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_47": {
                "variable": {
                    "value": "trained_policy",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_75": {
                "variable": {
                    "value": "(action_means, action_variances)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.actor(observation)",
                            "Call"
                        ],
                        [
                            "{'actor': self.actor, 'critic': self.critic}",
                            "Dict"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.action_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_78": {
                "variable": {
                    "value": "(action_means, action_variances)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.actor(observation)",
                            "Call"
                        ],
                        [
                            "{'actor': self.actor, 'critic': self.critic}",
                            "Dict"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.action_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultivariateNormal_89": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "action_means",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "action_variances",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp_min((action_variances + 1) / 2, 1e-08)",
                            "Call"
                        ],
                        [
                            "[action_variances]",
                            "List"
                        ],
                        [
                            "torch.stack([torch.diag(action_variance) for action_variance in action_variances])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_132": {
                "obj": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.actor(observation)",
                            "Call"
                        ],
                        [
                            "{'actor': self.actor, 'critic': self.critic}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_112": {
                "input": {
                    "value": "action",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dist.sample()",
                            "Call"
                        ],
                        [
                            "action.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_116": {
                "input": {
                    "value": "state_value",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.critic(observation)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_86": {
                "input": {
                    "value": "action_variance",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "policy/BaseNet.py": {
        "torch": {
            "Sequential_82": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.get_layers()",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_156": {
                "variable": {
                    "value": "(action_means, action_variances)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "super().forward(obs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "int(self.action_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "variances",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.diag(variance) for variance in variances]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "input": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultivariateNormal_169": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "variances",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([torch.diag(variance) for variance in variances])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_225": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.process_sequence(obs)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(obs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_226": {
                "tensors": {
                    "value": "(obs, actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "mlp_input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_mlp_input_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "mlp_input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_mlp_input_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.network_config['mlp_layers'][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "self.network_config['mlp_layers'][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_166": {
                "input": {
                    "value": "variance",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_37": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_layers, 1, self.hidden_size).type(torch.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "self.network_config['mlp_layers'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.network_config['mlp_layers'][i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.init_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_layers, 1, self.hidden_size).type(torch.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_63": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_70": {
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "batch_size * [self.init_h]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "batch_size * [self.init_h]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "batch_size * [self.init_c]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "policy/BaseRLAlgo.py": {
        "torch": {
            "save_61": {
                "obj": {
                    "value": "{'networks': self.get_state_dicts_to_save(), 'stats': self.get_stats_to_save()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}/ckpt_{}_{:05d}'.format(self.logdir, self.policy_key, int(self.stats['update_steps'] / self.save_interval))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "policy/SAC.py": {
        "torch": {
            "Adam_62": {
                "variable": {
                    "value": "self.policy_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.pi_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "self.Q1_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q1.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "self.Q2_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.Q2.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.q_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MSELoss_124": {
                "variable": {
                    "value": "self.Q_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_280": {
                "variable": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(rewards, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_281": {
                "variable": {
                    "value": "terminals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "terminals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(terminals, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_287": {
                "variable": {
                    "value": "new_obs_action_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_obs_action_logprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(new_obs_action_logprobs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_294": {
                "variable": {
                    "value": "next_obs_action_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_obs_action_logprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(next_obs_action_logprobs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_297": {
                "variable": {
                    "value": "q_new_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Q1(obs=critic_obs, actions=new_obs_actions * self.action_scaling)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_77": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.replay_buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_sequence_160": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pad_sequence(obs, batch_first=True).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(obs[0], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_317": {
                "input": {
                    "value": "self.Q1_target(critic_next_obs, new_next_obs_action * self.action_scaling)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_162": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "policy/utils.py": {
        "torch": {
            "DataLoader_151": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BehaviourCloneDataset(args.expert_trajectories)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['behaviour-clone']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_162": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "policy.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config['behaviour-clone']['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config['behaviour-clone']['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_sequence_137": {
                "variable": {
                    "value": "self.observations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequences": {
                    "value": "self.observations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_sequence_70": {
                "sequences": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_208": {
                "obj": {
                    "value": "{'networks': {'policy': policy.state_dict(), 'opt': optimizer.state_dict()}, 'stats': {'batches': batch_count, 'epochs': epoch}}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "output_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "abspath('{}/ckpt_{:05d}'.format(writer.logdir, epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_98": {
                "data": {
                    "value": "float(self.data['rewards'][idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "float(self.data['is_terminal'][idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "float(self.data['rewards'][idx])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "data": {
                    "value": "float(self.data['is_terminal'][idx])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "is_available_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_229": {
                "data": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_231": {
                "data": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}