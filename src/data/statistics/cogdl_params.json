{
    "cogdl/datasets/customized_data.py": {
        "sklearn": {
            "StandardScaler_31": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scaler.transform(feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_41": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "(2, num_edges)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "num_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randint_43": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_118": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'data.pt'",
                            "MethodArgument"
                        ],
                        [
                            "'cus_graph_data.pt'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_120": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[idata.y for idata in data]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "load_69": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'data.pt'",
                            "MethodArgument"
                        ],
                        [
                            "'cus_graph_data.pt'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_107": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(x=x, edge_index=edge_index, y=y, train_mask=train_mask, val_mask=val_mask, test_mask=test_mask)",
                            "Call"
                        ],
                        [
                            "self.process()",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "self.process()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "f": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(x=x, edge_index=edge_index, y=y, train_mask=train_mask, val_mask=val_mask, test_mask=test_mask)",
                            "Call"
                        ],
                        [
                            "self.process()",
                            "Call"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "self.process()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "f": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/saint_data.py": {
        "sklearn": {
            "StandardScaler_116": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_28": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.load(names[3])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(feats).float()",
                            "Call"
                        ],
                        [
                            "data.x.numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scaler.transform(feats)).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((feats.shape[0], len(item)), dtype=float)",
                            "Call"
                        ],
                        [
                            "np.zeros(feats.shape[0], dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scaler.transform(feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "row",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(row, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "col",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(col, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(x=feats, y=labels, edge_index=edge_index_full, edge_attr=edge_attr_full, edge_index_train=edge_index_train, edge_attr_train=edge_attr_train, train_mask=train_mask, val_mask=val_mask, test_mask=test_mask)",
                            "Call"
                        ],
                        [
                            "adj.data",
                            "Attribute"
                        ],
                        [
                            "read_saint_data(self.raw_dir)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_72": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_97": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(x=feats, y=labels, edge_index=edge_index_full, edge_attr=edge_attr_full, edge_index_train=edge_index_train, edge_attr_train=edge_attr_train, train_mask=train_mask, val_mask=val_mask, test_mask=test_mask)",
                            "Call"
                        ],
                        [
                            "adj.data",
                            "Attribute"
                        ],
                        [
                            "read_saint_data(self.raw_dir)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_87": {
                "input": {
                    "value": "self.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/defense/gnnguard.py": {
        "sklearn": {
            "cosine_similarity_116": {
                "variable": {
                    "value": "sim_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "features_copy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "features.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "features.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "features_copy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "features.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "features.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_126": {
                "variable": {
                    "value": "att_dense_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "att_dense",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lil_matrix((n_node, n_node), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "att_dense - sp.diags(att_dense.diagonal(), offsets=0, format='lil')",
                            "BinOp"
                        ],
                        [
                            "lil_matrix((n_node, n_node), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "att_dense - sp.diags(att_dense.diagonal(), offsets=0, format='lil')",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_271": {
                "variable": {
                    "value": "sim_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "features_copy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "features.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "features.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "features_copy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "features.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "features.cpu().data.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_281": {
                "variable": {
                    "value": "att_dense_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "att_dense",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lil_matrix((n_node, n_node), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "att_dense - sp.diags(att_dense.diagonal(), offsets=0, format='lil')",
                            "BinOp"
                        ],
                        [
                            "lil_matrix((n_node, n_node), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "att_dense - sp.diags(att_dense.diagonal(), offsets=0, format='lil')",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "ModuleList_75": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.drop_learn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "att_edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(att_edge_weight)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "att_adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.vstack((row, col))",
                            "Call"
                        ],
                        [
                            "torch.tensor(att_adj, dtype=torch.int64).to(features.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_227": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.drop_learn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "character",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "character.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_133": {
                "variable": {
                    "value": "drop_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.drop_learn(character)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(drop_score)",
                            "Call"
                        ],
                        [
                            "mm(drop_score)",
                            "Call"
                        ],
                        [
                            "mm_2(-drop_score)",
                            "Call"
                        ],
                        [
                            "self.drop_learn(character)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(drop_score)",
                            "Call"
                        ],
                        [
                            "mm(drop_score)",
                            "Call"
                        ],
                        [
                            "mm_2(-drop_score)",
                            "Call"
                        ]
                    ]
                }
            },
            "Threshold_134": {
                "variable": {
                    "value": "mm",
                    "type": "Variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Threshold_136": {
                "variable": {
                    "value": "mm_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-0.49",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_244": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_286": {
                "variable": {
                    "value": "character",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "character.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_288": {
                "variable": {
                    "value": "drop_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.drop_learn(character)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(drop_score)",
                            "Call"
                        ],
                        [
                            "mm(drop_score)",
                            "Call"
                        ],
                        [
                            "mm_2(-drop_score)",
                            "Call"
                        ],
                        [
                            "self.drop_learn(character)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(drop_score)",
                            "Call"
                        ],
                        [
                            "mm(drop_score)",
                            "Call"
                        ],
                        [
                            "mm_2(-drop_score)",
                            "Call"
                        ]
                    ]
                }
            },
            "Threshold_289": {
                "variable": {
                    "value": "mm",
                    "type": "Variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Threshold_291": {
                "variable": {
                    "value": "mm_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "-0.49",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_78": {
                "normalized_shape": {
                    "value": "n_features[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LayerNorm_230": {
                "normalized_shape": {
                    "value": "n_features[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/dngr.py": {
        "sklearn": {
            "normalize_123": {
                "variable": {
                    "value": "emb_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "emb_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ut * np.sqrt(s)",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(emb_matrix, 'l2')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.num_node, self.hidden_size1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_size2, self.hidden_size1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "input_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.get_denoised_matrix(PPMI).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_141": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_142": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "self.num_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "self.hidden_size1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "self.hidden_size2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "self.hidden_size1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_node",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/grarep.py": {
        "sklearn": {
            "normalize_39": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray(nx.adjacency_matrix(self.G).todense(), dtype=float)",
                            "Call"
                        ],
                        [
                            "preprocessing.normalize(A, 'l1')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_80": {
                "variable": {
                    "value": "emb_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "emb_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ut * np.sqrt(s)",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(emb_matrix, 'l2')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/hope.py": {
        "sklearn": {
            "normalize_63": {
                "variable": {
                    "value": "emb_matrix_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "emb_matrix_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb_matrix_1 * np.sqrt(s)",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(emb_matrix_1, 'l2')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_64": {
                "variable": {
                    "value": "emb_matrix_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "emb_matrix_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb_matrix_2 * np.sqrt(s)",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(emb_matrix_2, 'l2')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/line.py": {
        "sklearn": {
            "normalize_93": {
                "variable": {
                    "value": "embedding1",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.emb_vertex",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_100": {
                "variable": {
                    "value": "embedding2",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.emb_vertex",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/netsmf.py": {
        "sklearn": {
            "randomized_svd_128": {
                "variable": {
                    "value": "(U, Sigma, VT)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "M": {
                    "value": "smat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sp.csc_matrix(matrix)",
                            "Call"
                        ]
                    ]
                },
                "n_components": {
                    "value": "self.dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_130": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "U",
                    "type": "Name",
                    "possible_values": [
                        [
                            "U * np.sqrt(Sigma)",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(U, 'l2')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/prone.py": {
        "sklearn": {
            "randomized_svd_69": {
                "variable": {
                    "value": "(U, Sigma, VT)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "M": {
                    "value": "smat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sp.csc_matrix(matrix)",
                            "Call"
                        ]
                    ]
                },
                "n_components": {
                    "value": "self.dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_71": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "U",
                    "type": "Name",
                    "possible_values": [
                        [
                            "U * np.sqrt(Sigma)",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(U, 'l2')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_77": {
                "variable": {
                    "value": "C1",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "tran",
                    "type": "Variable",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_104": {
                "variable": {
                    "value": "DA",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sp.eye(num_node) + A",
                            "BinOp"
                        ]
                    ]
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/pte.py": {
        "sklearn": {
            "normalize_106": {
                "variable": {
                    "value": "embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.emb_vertex",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/spectral.py": {
        "sklearn": {
            "normalize_37": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "emb_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ut * np.sqrt(s)",
                            "BinOp"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/agc.py": {
        "sklearn": {
            "SpectralClustering_54": {
                "variable": {
                    "value": "clustering",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "assign_labels": {
                    "value": "discretize",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "mm_52": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "spmm(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_53": {
                "input": {
                    "value": "k.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/utils/evaluator.py": {
        "sklearn": {
            "f1_score_156": {
                "variable": {
                    "value": "micro",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_true.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y_pred.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "preds.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "y_pred.max(1)[1].type_as(y_true)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "log_softmax_170": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(y_pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(self.y_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(y_pred, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_119": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(y_pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(self.y_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(y_pred, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_171": {
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(y_pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(self.y_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(y_pred, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y_true.squeeze().long()",
                            "Call"
                        ],
                        [
                            "y_true.squeeze().long()",
                            "Call"
                        ],
                        [
                            "y_true.long()",
                            "Call"
                        ],
                        [
                            "y_true.float()",
                            "Call"
                        ],
                        [
                            "torch.cat(self.y_true, dim=0)",
                            "Call"
                        ],
                        [
                            "y_true.long()",
                            "Call"
                        ],
                        [
                            "y_true.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_178": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(loss, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.y_true",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_62": {
                "obj": {
                    "value": "tp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(y_true * y_pred).sum().to(torch.float32)",
                            "Call"
                        ],
                        [
                            "pred.sum().int()",
                            "Call"
                        ],
                        [
                            "tp.item()",
                            "Call"
                        ],
                        [
                            "np.sum(self.tp)",
                            "Call"
                        ],
                        [
                            "(y_pred * y_true).sum().to(torch.float32).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_120": {
                "input": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(y_pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(self.y_pred, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(y_pred, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y_true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y_true.squeeze().long()",
                            "Call"
                        ],
                        [
                            "y_true.squeeze().long()",
                            "Call"
                        ],
                        [
                            "y_true.long()",
                            "Call"
                        ],
                        [
                            "y_true.float()",
                            "Call"
                        ],
                        [
                            "torch.cat(self.y_true, dim=0)",
                            "Call"
                        ],
                        [
                            "y_true.long()",
                            "Call"
                        ],
                        [
                            "y_true.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_128": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean(loss, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_176": {
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_126": {
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_178": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(y_pred, y_true)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mean(loss, dim=0))",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(y_pred, y_true)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mean(loss, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_128": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(y_pred, y_true)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mean(loss, dim=0))",
                            "Call"
                        ],
                        [
                            "torch.nn.BCEWithLogitsLoss(reduction=reduction)(y_pred, y_true)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mean(loss, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/utils/prone_utils.py": {
        "sklearn": {
            "normalize_240": {
                "variable": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "U",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(U)",
                            "Call"
                        ],
                        [
                            "U[:, :dimension]",
                            "Subscript"
                        ],
                        [
                            "U * s",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(U, 'l2')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_16": {
                "variable": {
                    "value": "mx_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "mx.transpose()",
                    "type": "Call",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_32": {
                "variable": {
                    "value": "mx_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "mx",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mx + sp.eye(emb.shape[0])",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(mx, 'l1')",
                            "Call"
                        ],
                        [
                            "mx + sp.eye(row_num)",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(mx, 'l1')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_41": {
                "variable": {
                    "value": "mx",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "mx",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mx + sp.eye(emb.shape[0])",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(mx, 'l1')",
                            "Call"
                        ],
                        [
                            "mx + sp.eye(row_num)",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(mx, 'l1')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_72": {
                "variable": {
                    "value": "mx_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "mx",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mx + sp.eye(emb.shape[0])",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(mx, 'l1')",
                            "Call"
                        ],
                        [
                            "mx + sp.eye(row_num)",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(mx, 'l1')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_106": {
                "variable": {
                    "value": "mx_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "mx",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mx + sp.eye(emb.shape[0])",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(mx, 'l1')",
                            "Call"
                        ],
                        [
                            "mx + sp.eye(row_num)",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(mx, 'l1')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_127": {
                "variable": {
                    "value": "mx",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "mx",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "mx + sp.eye(emb.shape[0])",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(mx, 'l1')",
                            "Call"
                        ],
                        [
                            "mx + sp.eye(row_num)",
                            "BinOp"
                        ],
                        [
                            "preprocessing.normalize(mx, 'l1')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_137": {
                "variable": {
                    "value": "adj_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "adj_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mx.dot(q_)",
                            "Call"
                        ],
                        [
                            "preprocessing.normalize(adj_norm, 'l1')",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_153": {
                "variable": {
                    "value": "DA",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sp.eye(node_number) + A",
                            "BinOp"
                        ]
                    ]
                },
                "norm": {
                    "value": "l1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/data_wrapper/pretraining/gcc_dw.py": {
        "sklearn": {
            "normalize_120": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(n, k)",
                            "Call"
                        ]
                    ]
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_122": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "preprocessing.normalize(u, norm='l2')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x.astype('float32'))",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, hidden_size - k), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "eigen_decomposision(n, k, laplacian, hidden_size, retry)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, hidden_size - k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unique_147": {
                "variable": {
                    "value": "subv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trace",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "subg.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "subg.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "labeled_batcher() if self.finetune else batcher()",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True if self.finetune else False",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g.num_nodes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g.num_nodes",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(n - 2, hidden_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/clustering/daegc_mw.py": {
        "sklearn": {
            "KMeans_86": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "sum_102": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.getQ(z, cluster_center)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "t.clone().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((Q, t.unsqueeze(0)), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_56": {
                "input": {
                    "value": "F.softmax(torch.mm(z, z.t()))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_63": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_73": {
                "variable": {
                    "value": "data.adj_mx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "torch.stack(data.edge_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "torch.ones(data.edge_index[0].shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([data.x.shape[0], data.x.shape[0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_92": {
                "variable": {
                    "value": "dis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(z[i].repeat(self.num_clusters, 1) - cluster_center) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "input": {
                    "value": "torch.mm(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_59": {
                "reduce": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Q, t.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_56": {
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model(graph)",
                            "Call"
                        ],
                        [
                            "self.model(graph)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "kmeans.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "t",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1 / (1 + dis)",
                            "BinOp"
                        ],
                        [
                            "t / torch.sum(t)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_104": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "P",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.getP(Q).detach()",
                            "Call"
                        ],
                        [
                            "torch.sum(Q, dim=0).repeat(Q.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "Q ** 2 / P",
                            "BinOp"
                        ],
                        [
                            "P / (torch.ones(1, self.num_clusters, device=self.device) * torch.sum(P, dim=1).unsqueeze(-1))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_74": {
                "tensors": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "data.edge_index[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/heterogeneous/heterogeneous_embedding_mw.py": {
        "sklearn": {
            "LogisticRegression_40": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "f1_score_43": {
                "variable": {
                    "value": "test_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clf.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_34": {
                "variable": {
                    "value": "train_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data.train_node, data.valid_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/heterogeneous/multiplex_embedding_mw.py": {
        "sklearn": {
            "precision_recall_curve_38": {
                "variable": {
                    "value": "(ps, rs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(true_list)",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(prediction_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_39": {
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(true_list)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(prediction_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_39": {
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(true_list)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(prediction_list), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_39": {
                "x": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "transpose_82": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/link_prediction/embedding_link_prediction_mw.py": {
        "sklearn": {
            "precision_recall_curve_45": {
                "variable": {
                    "value": "(ps, rs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(true_list)",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(prediction_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_46": {
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(true_list)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(prediction_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_46": {
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(true_list)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(len(prediction_list), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_46": {
                "x": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ps",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/link_prediction/gnn_link_prediction_mw.py": {
        "sklearn": {
            "roc_auc_score_46": {
                "variable": {
                    "value": "auc_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_64": {
                "variable": {
                    "value": "auc_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "BCELoss_13": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_pos_edges, train_neg_edges]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_28": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(emb[edge_index[0]] * emb[edge_index[1]]).sum(1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "(emb[edges[0]] * emb[edges[1]]).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "(emb[edges[0]] * emb[edges[1]]).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_37": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_edges, neg_edges]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(emb[edge_index[0]] * emb[edge_index[1]]).sum(1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "(emb[edges[0]] * emb[edges[1]]).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "(emb[edges[0]] * emb[edges[1]]).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_55": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_edges, neg_edges]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_62": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(emb[edge_index[0]] * emb[edge_index[1]]).sum(1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "(emb[edges[0]] * emb[edges[1]]).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "(emb[edges[0]] * emb[edges[1]]).sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_pos + num_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/m3s_mw.py": {
        "sklearn": {
            "KMeans_42": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/self_auxiliary_mw.py": {
        "sklearn": {
            "cosine_similarity_410": {
                "variable": {
                    "value": "sims",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KMeans_335": {
                "variable": {
                    "value": "clustering",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.num_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Linear_102": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "self.pseudo_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(mask_num), torch.zeros(mask_num)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "self.node_pairs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.masked_edges, self.neg_edges]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_127": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear(torch.abs(embeddings[self.node_pairs[0]] - embeddings[self.node_pairs[1]]))",
                            "Call"
                        ],
                        [
                            "self.linear(embeddings[self.masked_nodes])",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings[node_pairs[0]] - embeddings[node_pairs[1]]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_index",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ]
                    ]
                }
            },
            "t_133": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "graph.x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mse_loss_172": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear(torch.abs(embeddings[self.node_pairs[0]] - embeddings[self.node_pairs[1]]))",
                            "Call"
                        ],
                        [
                            "self.linear(embeddings[self.masked_nodes])",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings[node_pairs[0]] - embeddings[node_pairs[1]]))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.pseudo_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_285": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear(torch.abs(embeddings[self.node_pairs[0]] - embeddings[self.node_pairs[1]]))",
                            "Call"
                        ],
                        [
                            "self.linear(embeddings[self.masked_nodes])",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings[node_pairs[0]] - embeddings[node_pairs[1]]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "variable": {
                    "value": "pseudo_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_311": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_clusters",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_353": {
                "variable": {
                    "value": "self.distance_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.distance_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_364": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nll_loss_128": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ],
                        [
                            "self.linear(embeddings)",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings[node_pairs[0]] - embeddings[node_pairs[1]]))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.pseudo_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "sampled",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[next(itr) for _ in range(edge_num)]",
                            "ListComp"
                        ],
                        [
                            "random.sample(remain, 1024) if len(remain) > 1024 else remain",
                            "IfExp"
                        ],
                        [
                            "random.sample(stack, 1024) if len(stack) > 1024 else stack",
                            "IfExp"
                        ],
                        [
                            "np.random.choice(np.arange(len(self.dis_node_pairs[i])), num_per_class, replace=False)",
                            "Call"
                        ],
                        [
                            "torch.tensor([]).long()",
                            "Call"
                        ],
                        [
                            "torch.cat([sampled, torch.tensor(tmp[x:x + k]).long().t()], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([sampled, torch.tensor(tmp).long().t()], 1)",
                            "Call"
                        ],
                        [
                            "self.sample(self.k, num_nodes)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "t_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nll_loss_286": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ],
                        [
                            "self.linear(embeddings)",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings[node_pairs[0]] - embeddings[node_pairs[1]]))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "pseudo_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor([]).long()",
                            "Call"
                        ],
                        [
                            "torch.cat([pseudo_labels, torch.ones(k).long() * i])",
                            "Call"
                        ],
                        [
                            "torch.cat([pseudo_labels, torch.ones(len(tmp)).long() * i])",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_357": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ],
                        [
                            "self.linear(embeddings)",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings[node_pairs[0]] - embeddings[node_pairs[1]]))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.distance_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_442": {
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(embeddings, dim=1)",
                            "Call"
                        ],
                        [
                            "self.linear(embeddings)",
                            "Call"
                        ],
                        [
                            "self.linear(torch.abs(embeddings[node_pairs[0]] - embeddings[node_pairs[1]]))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.pseudo_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_126": {
                "input": {
                    "value": "embeddings[self.node_pairs[0]] - embeddings[self.node_pairs[1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_161": {
                "condition": {
                    "value": "~graph.train_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_248": {
                "variable": {
                    "value": "self.dis_node_pairs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_index",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ]
                    ]
                }
            },
            "transpose_248": {
                "variable": {
                    "value": "self.dis_node_pairs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_284": {
                "input": {
                    "value": "embeddings[node_pairs[0]] - embeddings[node_pairs[1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled, torch.tensor(tmp[x:x + k]).long().t()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "pseudo_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pseudo_labels, torch.ones(k).long() * i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled, torch.tensor(tmp).long().t()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "pseudo_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pseudo_labels, torch.ones(len(tmp)).long() * i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_327": {
                "tensors": {
                    "value": "edge_index",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ]
                    ]
                }
            },
            "transpose_327": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_372": {
                "tensors": {
                    "value": "edge_index",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ]
                    ]
                }
            },
            "transpose_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_417": {
                "variable": {
                    "value": "pair",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[i, node]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_418": {
                "variable": {
                    "value": "sim",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sims[i][node]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_441": {
                "input": {
                    "value": "embeddings[node_pairs[0]] - embeddings[node_pairs[1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_255": {
                "tensors": {
                    "value": "edge_index",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "graph.edge_index",
                            "Attribute"
                        ]
                    ]
                }
            },
            "transpose_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_419": {
                "tensors": {
                    "value": "[self.node_pairs, pair]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_420": {
                "tensors": {
                    "value": "[self.pseudo_labels, sim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_295": {
                "data": {
                    "value": "tmp[x:x + k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_302": {
                "data": {
                    "value": "tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(np.where((distance >= self.class_split[i][0]) * (distance < self.class_split[i][1]))).transpose()",
                            "Call"
                        ],
                        [
                            "np.array(np.where(distance == -1)).transpose()",
                            "Call"
                        ],
                        [
                            "self.dis_node_pairs[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_302": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_300": {
                "*size": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_303": {
                "*size": {
                    "value": "len(tmp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_119": {
                "*size": {
                    "value": "mask_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(masked)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_119": {
                "*size": {
                    "value": "mask_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(masked)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/wrappers/tools/wrapper_utils.py": {
        "sklearn": {
            "KFold_247": {
                "variable": {
                    "value": "kf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SVC_255": {
                "variable": {
                    "value": "svc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GridSearchCV_256": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "svc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SVC()",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'C': [0.01, 0.1, 1]}",
                            "Dict"
                        ]
                    ]
                }
            },
            "f1_score_260": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "y[training_size:, :]",
                            "Subscript"
                        ],
                        [
                            "labels[test_index]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clf.predict(X_test, top_k_list)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KMeans_271": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SpectralClustering_274": {
                "variable": {
                    "value": "clustering",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "assign_labels": {
                    "value": "discretize",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_289": {
                "variable": {
                    "value": "macro_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "truth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "clusters",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "kmeans.labels_",
                            "Attribute"
                        ],
                        [
                            "clustering.labels_",
                            "Attribute"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_222": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "y[training_size:, :]",
                            "Subscript"
                        ],
                        [
                            "labels[test_index]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "Call",
                    "possible_values": [
                        [
                            "clf.predict(X_test, top_k_list)",
                            "Call"
                        ],
                        [
                            "clf.predict(x_test)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LogisticRegression_216": {
                "solver": {
                    "value": "liblinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_290": {
                "labels_true": {
                    "value": "clusters",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "kmeans.labels_",
                            "Attribute"
                        ],
                        [
                            "clustering.labels_",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "truth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalized_mutual_info_score_292": {
                "labels_true": {
                    "value": "clusters",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "kmeans.labels_",
                            "Attribute"
                        ],
                        [
                            "clustering.labels_",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "truth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "one_hot_101": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "degrees[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "max_degree",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "max(deg.max().item(), max_degree)",
                            "Call"
                        ],
                        [
                            "int(max_degree) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ft_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "data": {
                    "value": "(tp, fnp)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "(tp, fp, fn)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_169": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "log.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/dgraph/utils/evaluator.py": {
        "sklearn": {
            "roc_auc_score_55": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_true.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_59": {
                "variable": {
                    "value": "auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_onehot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "onehot_code[y_true]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y_pred.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "y_pred.argmax(axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "tests/test_utils.py": {
        "sklearn": {
            "f1_score_28": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target_one",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randint(0, 5, (20,))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "_pred.max(1)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_33": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target_mult",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randint(0, 2, (20, 5)).float()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(pred, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_18": {
                "variable": {
                    "value": "target_one",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(20,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_19": {
                "variable": {
                    "value": "target_mult",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(20, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_25": {
                "variable": {
                    "value": "_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(20, 5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_31": {
                "variable": {
                    "value": "_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(20, 5)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/attack/injection/fgsm.py": {
        "torch": {
            "argmax_122": {
                "variable": {
                    "value": "labels_origin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_origin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(getGraph(adj_tensor, features, device=self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, features_attack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "features_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_origin, features_attack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_261": {
                "variable": {
                    "value": "features_attack",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_attack",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((self.n_inject_max, n_feat))",
                            "Call"
                        ],
                        [
                            "self.update_features(model=model, adj_attack=adj_attack, features_origin=features, features_attack=features_attack, labels_origin=labels_origin, target_mask=target_mask, feat_norm=feat_norm, adj_norm_func=adj_norm_func)",
                            "Call"
                        ],
                        [
                            "feat_preprocess(features=features_attack, feat_norm=feat_norm, device=self.device)",
                            "Call"
                        ],
                        [
                            "features_attack.clone() + epsilon * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(features_attack, feat_lim_min, feat_lim_max)",
                            "Call"
                        ],
                        [
                            "features_attack.detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "feat_lim_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "feat_lim_max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_168": {
                "condition": {
                    "value": "target_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.test_mask",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/attack/injection/pgd.py": {
        "torch": {
            "argmax_124": {
                "variable": {
                    "value": "labels_origin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_origin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(getGraph(adj_tensor, features, device=self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, features_attack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "features_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_origin, features_attack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_265": {
                "variable": {
                    "value": "features_attack",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_attack",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.normal(loc=0, scale=self.feat_lim_max / 10, size=(self.n_inject_max, n_feat))",
                            "Call"
                        ],
                        [
                            "self.update_features(model=model, adj_attack=adj_attack, features_origin=features, features_attack=features_attack, labels_origin=labels_origin, target_mask=target_mask, feat_norm=feat_norm, adj_norm_func=adj_norm_func)",
                            "Call"
                        ],
                        [
                            "feat_preprocess(features=features_attack, feat_norm=feat_norm, device=self.device)",
                            "Call"
                        ],
                        [
                            "features_attack.clone() + epsilon * grad.sign()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(features_attack, feat_lim_min, feat_lim_max)",
                            "Call"
                        ],
                        [
                            "features_attack.detach()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "feat_lim_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "feat_lim_max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_172": {
                "condition": {
                    "value": "target_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.test_mask",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/attack/injection/rand.py": {
        "torch": {
            "argmax_92": {
                "variable": {
                    "value": "labels_origin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_origin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(getGraph(adj_tensor, features, device=self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, features_attack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "features_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_origin, features_attack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_138": {
                "condition": {
                    "value": "target_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.test_mask",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/attack/injection/speit.py": {
        "torch": {
            "argmax_125": {
                "variable": {
                    "value": "labels_origin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_origin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(getGraph(adj_tensor, features, device=self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, features_attack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_373": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[features_attack]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_377": {
                "variable": {
                    "value": "features_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_origin, features_attack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_310": {
                "condition": {
                    "value": "target_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.test_mask",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_279": {
                "condition": {
                    "value": "target_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.test_mask",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/attack/injection/tdgia.py": {
        "torch": {
            "argmax_133": {
                "variable": {
                    "value": "labels_origin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_origin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(getGraph(adj_tensor, features, device=self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, features_attack)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_238": {
                "variable": {
                    "value": "n_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.test_mask",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_439": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[features_added, features_attack]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_440": {
                "variable": {
                    "value": "loss_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_450": {
                "variable": {
                    "value": "features_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features_origin, features_add, features_attacked)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_457": {
                "variable": {
                    "value": "pred_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_func(pred[:n_origin][target_mask], labels_origin[target_mask]).to(self.device)",
                            "Call"
                        ],
                        [
                            "F.relu(-pred_loss + smooth_factor) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.mean(pred_loss)",
                            "Call"
                        ],
                        [
                            "-pred_loss",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "softmax_141": {
                "variable": {
                    "value": "current_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(getGraph(adj_tensor, features_attack, device=self.device))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_160": {
                "variable": {
                    "value": "features_attack_add",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_inject_cur, n_feat)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "features_attack",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(features, features_attack_add)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_448": {
                "variable": {
                    "value": "features_add",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_added",
                    "type": "Call",
                    "possible_values": [
                        [
                            "features_current[n_origin:].cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "features_added / feat_lim_max",
                            "BinOp"
                        ],
                        [
                            "np.arcsin(features_added)",
                            "Call"
                        ],
                        [
                            "feat_preprocess(features=features_added, feat_norm=feat_norm, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "feat_lim_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "feat_lim_max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_449": {
                "variable": {
                    "value": "features_attacked",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_attack",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "features_attack[n_total:]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((features, features_attack_add), dim=0)",
                            "Call"
                        ],
                        [
                            "feat_preprocess(features=features_attack, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "feat_lim_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "feat_lim_max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_246": {
                "condition": {
                    "value": "target_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.test_mask",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sin_445": {
                "input": {
                    "value": "features_added",
                    "type": "Call",
                    "possible_values": [
                        [
                            "features_current[n_origin:].cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "features_added / feat_lim_max",
                            "BinOp"
                        ],
                        [
                            "np.arcsin(features_added)",
                            "Call"
                        ],
                        [
                            "feat_preprocess(features=features_added, feat_norm=feat_norm, device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_446": {
                "input": {
                    "value": "features_attack",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "features_attack[n_total:]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((features, features_attack_add), dim=0)",
                            "Call"
                        ],
                        [
                            "feat_preprocess(features=features_attack, device=self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_454": {
                "input": {
                    "value": "-pred_loss + smooth_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/attack/modification/fga.py": {
        "torch": {
            "argmax_30": {
                "variable": {
                    "value": "labels_origin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_origin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(getGraph(adj_tensor, features, device=self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_68": {
                "variable": {
                    "value": "grad_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad[index_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_69": {
                "variable": {
                    "value": "index_max_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_max.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_66": {
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.loss(pred[index_target], labels_origin[index_target])",
                            "Call"
                        ],
                        [
                            "F.cross_entropy",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adj_attack",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.modification(model=model, adj_origin=adj, features_origin=features, labels_origin=labels_origin, index_target=graph.test_nid, feat_norm=feat_norm, adj_norm_func=adj_norm_func)",
                            "Call"
                        ],
                        [
                            "adj_origin.clone().to_dense()",
                            "Call"
                        ],
                        [
                            "adj_origin.todense()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(adj_attack)",
                            "Call"
                        ],
                        [
                            "adj_attack.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "sp.csr_matrix(adj_attack)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/attack/modification/pgd.py": {
        "torch": {
            "argmax_62": {
                "variable": {
                    "value": "labels_origin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_origin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(getGraph(adj_tensor, features, device=self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_172": {
                "variable": {
                    "value": "features_attack",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_attack",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.update_features(model=model, adj_attack=adj_attack, features_origin=features, labels_origin=labels_origin, index_target=index_target)",
                            "Call"
                        ],
                        [
                            "feat_preprocess(features=features_origin, feat_norm=feat_norm, device=self.device)",
                            "Call"
                        ],
                        [
                            "features_attack.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(features_attack, feat_lim_min, feat_lim_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "feat_lim_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "feat_lim_max",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/attack/modification/prbcd.py": {
        "torch": {
            "tanh_27": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-margin / normalizer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_27": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_102": {
                "variable": {
                    "value": "labels_origin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_origin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(getGraph(adj_tensor, features, device=self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj.indices().to(self.device), perturbed_edge_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj.values().to(self.device), perturbed_edge_weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argsort_331": {
                "variable": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed_edge_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "best_perturbed_edge_weight.to(self.device)",
                            "Call"
                        ],
                        [
                            "self.update_edge_weights(perturbed_edge_weight, epoch, grad)",
                            "Call"
                        ],
                        [
                            "self.project(perturbed_edge_weight)",
                            "Call"
                        ],
                        [
                            "best_perturbed_edge_weight.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.full_like(current_search_space, self.eps, dtype=torch.float32, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "perturbed_edge_weight + lr * gradient",
                            "BinOp"
                        ],
                        [
                            "perturbed_edge_weight[sorted_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.full_like(current_search_space, self.eps, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "perturbed_edge_weight[is_not_self_loop]",
                            "Subscript"
                        ],
                        [
                            "perturbed_edge_weight.detach()",
                            "Call"
                        ],
                        [
                            "best_edges.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_433": {
                "variable": {
                    "value": "symmetric_edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_index, edge_index.flip(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randint_252": {
                "variable": {
                    "value": "current_search_space",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.n_possible_edges",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "(self.search_space_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_253": {
                "variable": {
                    "value": "current_search_space",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_search_space",
                    "type": "Call",
                    "possible_values": [
                        [
                            "best_current_search_space.to(self.device)",
                            "Call"
                        ],
                        [
                            "best_current_search_space.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.randint(self.n_possible_edges, (self.search_space_size,), device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.unique(current_search_space, sorted=True)",
                            "Call"
                        ],
                        [
                            "current_search_space[is_not_self_loop]",
                            "Subscript"
                        ],
                        [
                            "current_search_space[sorted_idx]",
                            "Subscript"
                        ],
                        [
                            "current_search_space[is_not_self_loop]",
                            "Subscript"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_like_262": {
                "variable": {
                    "value": "perturbed_edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_search_space",
                    "type": "Call",
                    "possible_values": [
                        [
                            "best_current_search_space.to(self.device)",
                            "Call"
                        ],
                        [
                            "best_current_search_space.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.randint(self.n_possible_edges, (self.search_space_size,), device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.unique(current_search_space, sorted=True)",
                            "Call"
                        ],
                        [
                            "current_search_space[is_not_self_loop]",
                            "Subscript"
                        ],
                        [
                            "current_search_space[sorted_idx]",
                            "Subscript"
                        ],
                        [
                            "current_search_space[is_not_self_loop]",
                            "Subscript"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_346": {
                "variable": {
                    "value": "lin_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "self.n_possible_edges",
                    "type": "Attribute",
                    "possible_values": []
                },
                "high": {
                    "value": "(n_edges_resample,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_348": {
                "variable": {
                    "value": "(current_search_space, unique_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((current_search_space, lin_index))",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_like_359": {
                "variable": {
                    "value": "perturbed_edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_search_space",
                    "type": "Call",
                    "possible_values": [
                        [
                            "best_current_search_space.to(self.device)",
                            "Call"
                        ],
                        [
                            "best_current_search_space.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.randint(self.n_possible_edges, (self.search_space_size,), device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.unique(current_search_space, sorted=True)",
                            "Call"
                        ],
                        [
                            "current_search_space[is_not_self_loop]",
                            "Subscript"
                        ],
                        [
                            "current_search_space[sorted_idx]",
                            "Subscript"
                        ],
                        [
                            "current_search_space[is_not_self_loop]",
                            "Subscript"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_421": {
                "tensors": {
                    "value": "(row_idx, col_idx)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_427": {
                "tensors": {
                    "value": "(row_idx, col_idx)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_156": {
                "condition": {
                    "value": "index_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(index_target)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_213": {
                "variable": {
                    "value": "features_attack",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_attack",
                    "type": "Call",
                    "possible_values": [
                        [
                            "feat_preprocess(features=features_origin, feat_norm=feat_norm, device=self.device)",
                            "Call"
                        ],
                        [
                            "best_features_attack.to(self.device)",
                            "Call"
                        ],
                        [
                            "features_attack.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(features_attack, self.feat_lim_min, self.feat_lim_max)",
                            "Call"
                        ],
                        [
                            "best_features_attack.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.feat_lim_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.feat_lim_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_321": {
                "input": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "values.clone()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_383": {
                "variable": {
                    "value": "sampled_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed_edge_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "best_perturbed_edge_weight.to(self.device)",
                            "Call"
                        ],
                        [
                            "self.update_edge_weights(perturbed_edge_weight, epoch, grad)",
                            "Call"
                        ],
                        [
                            "self.project(perturbed_edge_weight)",
                            "Call"
                        ],
                        [
                            "best_perturbed_edge_weight.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.full_like(current_search_space, self.eps, dtype=torch.float32, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "perturbed_edge_weight + lr * gradient",
                            "BinOp"
                        ],
                        [
                            "perturbed_edge_weight[sorted_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.full_like(current_search_space, self.eps, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "perturbed_edge_weight[is_not_self_loop]",
                            "Subscript"
                        ],
                        [
                            "perturbed_edge_weight.detach()",
                            "Call"
                        ],
                        [
                            "best_edges.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_386": {
                "variable": {
                    "value": "sampled_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed_edge_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "best_perturbed_edge_weight.to(self.device)",
                            "Call"
                        ],
                        [
                            "self.update_edge_weights(perturbed_edge_weight, epoch, grad)",
                            "Call"
                        ],
                        [
                            "self.project(perturbed_edge_weight)",
                            "Call"
                        ],
                        [
                            "best_perturbed_edge_weight.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.full_like(current_search_space, self.eps, dtype=torch.float32, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "perturbed_edge_weight + lr * gradient",
                            "BinOp"
                        ],
                        [
                            "perturbed_edge_weight[sorted_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.full_like(current_search_space, self.eps, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "perturbed_edge_weight[is_not_self_loop]",
                            "Subscript"
                        ],
                        [
                            "perturbed_edge_weight.detach()",
                            "Call"
                        ],
                        [
                            "best_edges.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_325": {
                "input": {
                    "value": "values - miu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_327": {
                "input": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "values.clone()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_349": {
                "tensors": {
                    "value": "(current_search_space, lin_index)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_445": {
                "input": {
                    "value": "edge_weights - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "floor_419": {
                "input": {
                    "value": "torch.sqrt(-8 * lin_idx.double() + 4 * n * (n - 1) - 7) / 2.0 - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "topk_384": {
                "input": {
                    "value": "perturbed_edge_weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "best_perturbed_edge_weight.to(self.device)",
                            "Call"
                        ],
                        [
                            "self.update_edge_weights(perturbed_edge_weight, epoch, grad)",
                            "Call"
                        ],
                        [
                            "self.project(perturbed_edge_weight)",
                            "Call"
                        ],
                        [
                            "best_perturbed_edge_weight.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.full_like(current_search_space, self.eps, dtype=torch.float32, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "perturbed_edge_weight + lr * gradient",
                            "BinOp"
                        ],
                        [
                            "perturbed_edge_weight[sorted_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.full_like(current_search_space, self.eps, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "perturbed_edge_weight[is_not_self_loop]",
                            "Subscript"
                        ],
                        [
                            "perturbed_edge_weight.detach()",
                            "Call"
                        ],
                        [
                            "best_edges.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.n_edge_mod",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_419": {
                "input": {
                    "value": "-8 * lin_idx.double() + 4 * n * (n - 1) - 7",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/data/batch.py": {
        "torch": {
            "full_76": {
                "variable": {
                    "value": "item",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_82": {
                "obj": {
                    "value": "item",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "data[key]",
                            "Subscript"
                        ],
                        [
                            "item + cumsum[key]",
                            "BinOp"
                        ],
                        [
                            "torch.full((num_nodes,), i, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch[key][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "data_list[0].cat_dim(key, item)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_60": {
                "obj": {
                    "value": "item",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "data[key]",
                            "Subscript"
                        ],
                        [
                            "item + cumsum[key]",
                            "BinOp"
                        ],
                        [
                            "torch.full((num_nodes,), i, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch[key][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_58": {
                "obj": {
                    "value": "item",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "data[key]",
                            "Subscript"
                        ],
                        [
                            "item + cumsum[key]",
                            "BinOp"
                        ],
                        [
                            "torch.full((num_nodes,), i, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch[key][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_92": {
                "variable": {
                    "value": "_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[k] + num_nodes_cum[i] for (i, x) in enumerate(batch[key])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "item.cat_dim(k, None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[k][:-1] + num_edges_cum[i] for (i, x) in enumerate(batch[key][:-1])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "item.cat_dim(k, None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_item, batch[key][-1][k] + num_edges_cum[-2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "item.cat_dim(k, None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "_item",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[k] for (i, x) in enumerate(batch[key])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "item.cat_dim(k, None)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/data/data.py": {
        "torch": {
            "cat_196": {
                "variable": {
                    "value": "self.row",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.row, row)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "self.col",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.col, col)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_837": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_843": {
                "variable": {
                    "value": "row_ptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * size + size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_907": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_908": {
                "variable": {
                    "value": "(nodes, new_edge_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([row, col])",
                            "Call"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_159": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_edges",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_182": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.row",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.weight, values)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_203": {
                "variable": {
                    "value": "attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_204": {
                "variable": {
                    "value": "self.attr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.attr, attr)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_245": {
                "variable": {
                    "value": "edge_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degrees",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(self.row_ptr[1:] - self.row_ptr[:-1]).float()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_264": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_edges",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_435": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(row, col)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_435": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_817": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "_node_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([batch, np.setdiff1d(col_nodes, batch)])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_821": {
                "variable": {
                    "value": "col_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[assoc_dict[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_822": {
                "variable": {
                    "value": "row_ptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indptr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.indptr",
                            "Attribute"
                        ],
                        [
                            "indptr.numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indptr)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_825": {
                "variable": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(nodes.shape[0] - row_ptr.shape[0] + 1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "row_ptr[-1].item()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "row_ptr.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_826": {
                "variable": {
                    "value": "row_ptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row_ptr, padding]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_832": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.indices",
                            "Attribute"
                        ],
                        [
                            "indices.numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_834": {
                "variable": {
                    "value": "indptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indptr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.indptr",
                            "Attribute"
                        ],
                        [
                            "indptr.numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indptr)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_849": {
                "obj": {
                    "value": "node_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "node_idx.cpu()",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.unique(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "np.array(node_idx, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(node_idx)",
                            "Call"
                        ],
                        [
                            "node_idx.long().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_852": {
                "variable": {
                    "value": "node_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "node_idx.cpu()",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.unique(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "np.array(node_idx, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(node_idx)",
                            "Call"
                        ],
                        [
                            "node_idx.long().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unique_855": {
                "variable": {
                    "value": "node_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "node_idx.cpu()",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.unique(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "np.array(node_idx, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(node_idx)",
                            "Call"
                        ],
                        [
                            "node_idx.long().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_896": {
                "variable": {
                    "value": "sub_g.row_indptr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sub_adj.indptr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_897": {
                "variable": {
                    "value": "sub_g.col_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sub_adj.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_898": {
                "variable": {
                    "value": "sub_g.edge_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sub_adj.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_939": {
                "start": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_167": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.row_ptr.size(0) - 1",
                            "BinOp"
                        ],
                        [
                            "int(self.num_nodes)",
                            "Call"
                        ],
                        [
                            "x.shape[0] if x is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_195": {
                "start": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pow_249": {
                "variable": {
                    "value": "edge_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "degrees",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(self.row_ptr[1:] - self.row_ptr[:-1]).float()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_285": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.row.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_791": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(batch, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_796": {
                "obj": {
                    "value": "batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(batch, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_831": {
                "obj": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.indices",
                            "Attribute"
                        ],
                        [
                            "indices.numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_833": {
                "obj": {
                    "value": "indptr",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.indptr",
                            "Attribute"
                        ],
                        [
                            "indptr.numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indptr)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_875": {
                "variable": {
                    "value": "node_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "node_idx.cpu()",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.unique(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "np.array(node_idx, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(node_idx)",
                            "Call"
                        ],
                        [
                            "node_idx.long().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "*size": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isinf_246": {
                "input": {
                    "value": "edge_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.pow(degrees, -0.5).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.pow(degrees, -1).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_478": {
                "obj": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_790": {
                "obj": {
                    "value": "batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(batch, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "batch.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_877": {
                "variable": {
                    "value": "node_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "node_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "node_idx.cpu()",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.unique(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "np.array(node_idx, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(node_idx)",
                            "Call"
                        ],
                        [
                            "node_idx.long().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_882": {
                "obj": {
                    "value": "node_idx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "node_idx.cpu()",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.unique(node_idx)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(node_idx, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "np.array(node_idx, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(node_idx)",
                            "Call"
                        ],
                        [
                            "node_idx.long().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "isinf_250": {
                "input": {
                    "value": "edge_norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.pow(degrees, -0.5).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.pow(degrees, -1).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_575": {
                "condition": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.row == self.col",
                            "Compare"
                        ],
                        [
                            "getattr(self, f'{split}_mask')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_747": {
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/data/dataloader.py": {
        "torch": {}
    },
    "cogdl/data/dataset.py": {
        "torch": {}
    },
    "cogdl/data/sampler.py": {
        "torch": {
            "arange_45": {
                "variable": {
                    "value": "self.node_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.data.x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_51": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "subgraph.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([self.clusters[i] for i in batch])",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_187": {
                "variable": {
                    "value": "self.parts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "self.n_cluster",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_199": {
                "variable": {
                    "value": "self.parts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "self.n_cluster",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "division",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[] for _ in range(n_cluster)]",
                            "ListComp"
                        ]
                    ]
                },
                "f": {
                    "value": "save_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'{self.dataset_name}-{n_cluster}.cluster'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "load_130": {
                "f": {
                    "value": "save_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'{self.dataset_name}-{n_cluster}.cluster'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "where_190": {
                "condition": {
                    "value": "self.parts == idx",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/__init__.py": {
        "torch": {
            "load_91": {
                "f": {
                    "value": "data_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/gatne.py": {
        "torch": {
            "load_57": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_78": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph()",
                            "Call"
                        ],
                        [
                            "read_gatne_data(self.raw_dir)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/gcc_data.py": {
        "torch": {
            "t_72": {
                "variable": {
                    "value": "edge_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(node2id)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(label2id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Graph(edge_index=torch.LongTensor(edge_list).t(), x=None, y=y)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/geom_data.py": {
        "torch": {
            "load_94": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_284": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_132": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(x=features, edge_index=edge_index, y=labels, all_masks=all_masks)",
                            "Call"
                        ],
                        [
                            "read_geom_data(self.raw_dir, self.name)",
                            "Call"
                        ],
                        [
                            "read_planetoid_data(self.raw_dir, self.name[:-5])",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_321": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(x=features, edge_index=edge_index, y=labels, all_masks=all_masks)",
                            "Call"
                        ],
                        [
                            "read_geom_data(self.raw_dir, self.name)",
                            "Call"
                        ],
                        [
                            "read_planetoid_data(self.raw_dir, self.name[:-5])",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_118": {
                "input": {
                    "value": "self.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_307": {
                "input": {
                    "value": "self.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/grb_data.py": {
        "torch": {
            "tensor_176": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "row",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(row, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "col",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(col, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_178": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.data",
                            "Attribute"
                        ],
                        [
                            "Graph(x=torch.from_numpy(features).type(torch.FloatTensor), y=torch.from_numpy(labels), grb_adj=adj_to_tensor(adj), edge_index=edge_index, edge_attr=edge_attr, train_mask=train_mask, val_mask=val_mask, test_mask=test_mask)",
                            "Call"
                        ],
                        [
                            "self.read_grb_data(self.raw_dir, self.mode, self.feat_norm)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_69": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.data",
                            "Attribute"
                        ],
                        [
                            "Graph(x=torch.from_numpy(features).type(torch.FloatTensor), y=torch.from_numpy(labels), grb_adj=adj_to_tensor(adj), edge_index=edge_index, edge_attr=edge_attr, train_mask=train_mask, val_mask=val_mask, test_mask=test_mask)",
                            "Call"
                        ],
                        [
                            "self.read_grb_data(self.raw_dir, self.mode, self.feat_norm)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "ndarray": {
                    "value": "features",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "lim_min + k * (features - features.min())",
                            "BinOp"
                        ],
                        [
                            "(features - features.mean()) / features.std()",
                            "BinOp"
                        ],
                        [
                            "2 * np.arctan(features) / np.pi",
                            "BinOp"
                        ],
                        [
                            "(features - features.mean()) / features.std()",
                            "BinOp"
                        ],
                        [
                            "np.tanh(features)",
                            "Call"
                        ],
                        [
                            "(features - features.mean()) / features.std()",
                            "BinOp"
                        ],
                        [
                            "features",
                            "Name"
                        ],
                        [
                            "np.load(osp.join(folder, 'features.npz')).get('data')",
                            "Call"
                        ],
                        [
                            "feat_normalize(features, norm=feat_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_133": {
                "ndarray": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load(osp.join(folder, 'labels.npz')).get('data')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/datasets/gtn_data.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "node_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pickle.load(open(osp.join(folder, 'node_features.pkl'), 'rb'))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "data.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "node_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(num_nodes, dtype=int)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_72": {
                "variable": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_79": {
                "variable": {
                    "value": "edge_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(0, num_nodes), torch.arange(0, num_nodes))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_80": {
                "variable": {
                    "value": "value_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "edges[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "data.train_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(labels[0])[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "data.train_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(labels[0])[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "data.valid_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(labels[1])[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "data.valid_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(labels[1])[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "data.test_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(labels[2])[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "variable": {
                    "value": "data.test_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(labels[2])[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "x_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data.train_node, data.valid_node, data.test_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "y_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data.train_target, data.valid_target, data.test_target)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros(num_nodes, dtype=int)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "edge_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((edge.nonzero()[0], edge.nonzero()[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "edge_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((edge.nonzero()[0], edge.nonzero()[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_77": {
                "variable": {
                    "value": "value_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_tmp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_125": {
                "obj": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_40": {
                "input": {
                    "value": "self.data.train_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_79": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "edges[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/datasets/han_data.py": {
        "torch": {
            "load_32": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_90": {
                "variable": {
                    "value": "edge_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(0, num_nodes), torch.arange(0, num_nodes))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_91": {
                "variable": {
                    "value": "value_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "truefeatures.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "truefeatures",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "data.train_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_idx[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "data.train_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.argmax(y[train_mask, :], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "data.valid_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val_idx[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "data.valid_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.argmax(y[val_mask, :], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "data.test_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_idx[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "data.test_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.argmax(y[test_mask, :], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_105": {
                "variable": {
                    "value": "x_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data.train_node, data.valid_node, data.test_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "y_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data.train_target, data.valid_target, data.test_target)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "truelabels",
                            "Name"
                        ],
                        [
                            "np.zeros(num_nodes, dtype=int)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "edge_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((edge.nonzero()[0], edge.nonzero()[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_88": {
                "variable": {
                    "value": "value_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_tmp.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_47": {
                "input": {
                    "value": "self.data.train_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_90": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "truefeatures.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/datasets/kg_data.py": {
        "torch": {
            "t_45": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_69": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "triple_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Graph()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "triple_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(self.processed_paths[1])",
                            "Call"
                        ],
                        [
                            "{'triples': triples, 'train_start_index': train_start_index, 'valid_start_index': valid_start_index, 'test_start_index': test_start_index, 'num_entities': num_entities, 'num_relations': num_relations}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/matlab_matrix.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "group.todense()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(row_ind), torch.tensor(col_ind)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj_matrix[row_ind, col_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([torch.tensor(row_ind), torch.tensor(col_ind)], dim=0)",
                            "Call"
                        ],
                        [
                            "f.read().strip().split('\\n')",
                            "Call"
                        ],
                        [
                            "[[int(i) for i in x.split('\\t')] for x in edge_index]",
                            "ListComp"
                        ],
                        [
                            "np.array(edge_index, dtype=np.int64).transpose()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(edge_index)",
                            "Call"
                        ],
                        [
                            "torch.cat((edge_index, rev_edge_index), dim=1)",
                            "Call"
                        ],
                        [
                            "edge_index[:, self_loop_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_143": {
                "variable": {
                    "value": "rev_edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index[1], edge_index[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_index, rev_edge_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((num_nodes, num_classes), dtype=np.float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_69": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(edge_index=edge_index, edge_attr=edge_attr, x=None, y=y)",
                            "Call"
                        ],
                        [
                            "Graph(x=None, y=labels, edge_index=edge_index)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(edge_index=edge_index, edge_attr=edge_attr, x=None, y=y)",
                            "Call"
                        ],
                        [
                            "Graph(x=None, y=labels, edge_index=edge_index)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_154": {
                "input": {
                    "value": "edge_index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([torch.tensor(row_ind), torch.tensor(col_ind)], dim=0)",
                            "Call"
                        ],
                        [
                            "f.read().strip().split('\\n')",
                            "Call"
                        ],
                        [
                            "[[int(i) for i in x.split('\\t')] for x in edge_index]",
                            "ListComp"
                        ],
                        [
                            "np.array(edge_index, dtype=np.int64).transpose()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(edge_index)",
                            "Call"
                        ],
                        [
                            "torch.cat((edge_index, rev_edge_index), dim=1)",
                            "Call"
                        ],
                        [
                            "edge_index[:, self_loop_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_64": {
                "data": {
                    "value": "col_ind",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/ogb.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "row",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[0], edge_index[1]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[0], edge_index[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "col",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(col)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[1], edge_index[0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(col)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(col)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[1], edge_index[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_48": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index[0], edge_index[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index[1], edge_index[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_62": {
                "variable": {
                    "value": "data.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(data.num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_63": {
                "variable": {
                    "value": "data.val_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(data.num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_64": {
                "variable": {
                    "value": "data.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(data.num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y.squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "row",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[0], edge_index[1]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[0], edge_index[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "col",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(col)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[1], edge_index[0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(col)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(col)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[1], edge_index[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "full_124": {
                "variable": {
                    "value": "data.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(data.num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_125": {
                "variable": {
                    "value": "data.val_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(data.num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_126": {
                "variable": {
                    "value": "data.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(data.num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.num_nodes, edge_attr.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_138": {
                "variable": {
                    "value": "deg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data.degrees()",
                            "Call"
                        ],
                        [
                            "torch.clamp(deg, min=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_142": {
                "variable": {
                    "value": "node_species",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "graph['node_species']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_143": {
                "variable": {
                    "value": "(n_species, new_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "node_species",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(graph['node_species'])",
                            "Call"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_144": {
                "variable": {
                    "value": "one_hot_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "new_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "torch.max(new_index).int().item()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data.x, one_hot_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_255": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "row",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[0], edge_index[1]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(row)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[0], edge_index[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_256": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "col",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(col)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[1], edge_index[0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(col)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(col)",
                            "Call"
                        ],
                        [
                            "torch.cat([edge_index[1], edge_index[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_257": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index[0], edge_index[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index[1], edge_index[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_264": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_291": {
                "variable": {
                    "value": "train_edge",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "idx['train']['edge'].T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_292": {
                "variable": {
                    "value": "val_edge",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "idx['valid']['edge'].T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_293": {
                "variable": {
                    "value": "test_edge",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "idx['test']['edge'].T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_70": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(x=x, edge_index=edge_index, edge_attr=edge_attr, y=y)",
                            "Call"
                        ],
                        [
                            "Graph(x=None, edge_index=(row, col), edge_attr=edge_attr, y=y)",
                            "Call"
                        ],
                        [
                            "Graph(x=torch.tensor(graph['node_feat'], dtype=torch.float), edge_index=torch.tensor(graph['edge_index']), edge_attr=None if 'edge_feat' not in graph else torch.tensor(graph['edge_feat'], dtype=torch.float), y=torch.tensor(label))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(x=x, edge_index=edge_index, edge_attr=edge_attr, y=y)",
                            "Call"
                        ],
                        [
                            "Graph(x=None, edge_index=(row, col), edge_attr=edge_attr, y=y)",
                            "Call"
                        ],
                        [
                            "Graph(x=torch.tensor(graph['node_feat'], dtype=torch.float), edge_index=torch.tensor(graph['edge_index']), edge_attr=None if 'edge_feat' not in graph else torch.tensor(graph['edge_feat'], dtype=torch.float), y=torch.tensor(label))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "graph['node_feat']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_49": {
                "data": {
                    "value": "graph['edge_feat']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_117": {
                "data": {
                    "value": "graph['edge_feat']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "data": {
                    "value": "graph['node_feat']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "as_tensor_258": {
                "data": {
                    "value": "graph['edge_feat']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_144": {
                "input": {
                    "value": "new_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "data": {
                    "value": "graph['node_feat']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "data": {
                    "value": "graph['edge_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "data": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "data": {
                    "value": "graph['edge_feat']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/planetoid_data.py": {
        "torch": {
            "full_20": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.stack([_row, _col], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([row_dom, col_dom], axis=1)",
                            "Call"
                        ],
                        [
                            "np.stack([_row, _col], axis=0)",
                            "Call"
                        ],
                        [
                            "edge_index[:, order]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(edge_index, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.stack([row, col])",
                            "Call"
                        ],
                        [
                            "edge_index_from_dict(graph, num_nodes=y.size(0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index[0], edge_index[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index[1], edge_index[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_51": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Tensor_66": {
                "variable": {
                    "value": "test_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "train_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_74": {
                "variable": {
                    "value": "val_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "y.size(0) + 500",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[allx, tx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_176": {
                "variable": {
                    "value": "x_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "tx_ext",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len_test_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(test_index.max() - test_index.min()).item() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "tx.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "ty_ext",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len_test_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(test_index.max() - test_index.min()).item() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "ty.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_121": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(x=x, edge_index=edge_index, y=y)",
                            "Call"
                        ],
                        [
                            "self.get(0)",
                            "Call"
                        ],
                        [
                            "read_planetoid_data(self.raw_dir, self.name)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_178": {
                "input": {
                    "value": "x_rev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_sum.pow(-1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_179": {
                "input": {
                    "value": "x_rev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_sum.pow(-1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_70": {
                "ndarray": {
                    "value": "item.todense()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "ndarray": {
                    "value": "item",
                    "type": "Name",
                    "possible_values": [
                        [
                            "names[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "[ally, ty]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_90": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_143": {
                "input": {
                    "value": "self.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/rd2cd_data.py": {
        "torch": {
            "tensor_18": {
                "variable": {
                    "value": "y_index_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(range(total_node_num))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_node_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_node_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_node_num",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load(self.raw_dir + '/x.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load(self.raw_dir + '/y.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy_edge_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load(self.raw_dir + '/edge_index.npy')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_107": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Graph(x=x, edge_index=edge_index, y=y, train_mask=train_mask, val_mask=val_mask, test_mask=test_mask)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/rec_data.py": {
        "torch": {
            "load_147": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph()",
                            "Call"
                        ],
                        [
                            "build_recommendation_data(dataset, train_cf, valid_cf, test_cf)",
                            "Call"
                        ],
                        [
                            "read_recommendation_data(self.raw_dir, self.name)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/datasets/tu_data.py": {
        "torch": {
            "sum_17": {
                "variable": {
                    "value": "x_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "src",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[float(x) for x in line.split(sep)[start:end]] for line in src]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(src, dtype=dtype).squeeze()",
                            "Call"
                        ],
                        [
                            "f.read().split('\\n')[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_27": {
                "variable": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_81": {
                "variable": {
                    "value": "indexptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "indptr[..., i].item()",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "indptr[..., i + 1].item()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_83": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.index_select(indptr.dim() - 1, indexptr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "indptr.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "out_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "indptr.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "ptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ptr, ptr.new_full((1,), value.size(0))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "node_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "read_file(folder, prefix, 'node_labels', torch.long)",
                            "Call"
                        ],
                        [
                            "node_labels.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "node_labels - node_labels.min(dim=0)[0]",
                            "BinOp"
                        ],
                        [
                            "node_labels.unbind(dim=-1)",
                            "Call"
                        ],
                        [
                            "[F.one_hot(x, num_classes=-1) for x in node_labels]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(node_labels, dim=-1).to(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "edge_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "read_file(folder, prefix, 'edge_labels', torch.long)",
                            "Call"
                        ],
                        [
                            "edge_labels.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "edge_labels - edge_labels.min(dim=0)[0]",
                            "BinOp"
                        ],
                        [
                            "edge_labels.unbind(dim=-1)",
                            "Call"
                        ],
                        [
                            "[F.one_hot(e, num_classes=-1) for e in edge_labels]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(edge_labels, dim=-1).to(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_225": {
                "variable": {
                    "value": "(self.data, self.y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_19": {
                "input": {
                    "value": "x_rev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_sum.pow(-1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_20": {
                "input": {
                    "value": "x_rev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_sum.pow(-1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_45": {
                "tensors": {
                    "value": "seq",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[item for item in seq if item is not None]",
                            "ListComp"
                        ],
                        [
                            "[item.unsqueeze(-1) if item.dim() == 1 else item for item in seq]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_119": {
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "read_tu_data(self.raw_dir, self.name)",
                            "Call"
                        ],
                        [
                            "self.get(self.indices()[idx])",
                            "Call"
                        ],
                        [
                            "data if self.transform is None else self.transform(data)",
                            "IfExp"
                        ]
                    ]
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_108": {
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_138": {
                "tensor": {
                    "value": "x",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "x.split(node_slice)",
                            "Call"
                        ],
                        [
                            "cat([node_attributes, node_labels])",
                            "Call"
                        ],
                        [
                            "x[:, num_node_attributes(x):]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_151": {
                "tensor": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/experiments.py": {
        "torch": {
            "is_available_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_244": {
                "device": {
                    "value": "args.pid_to_cuda[pid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_164": {
                "input": {
                    "value": "torch.stack(dataset.data.edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_165": {
                "input": {
                    "value": "dataset.data.edge_attr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_164": {
                "tensors": {
                    "value": "dataset.data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/actgcn_layer.py": {
        "torch": {}
    },
    "cogdl/layers/actgcnii_layer.py": {
        "torch": {}
    },
    "cogdl/layers/actlinear_layer.py": {
        "torch": {}
    },
    "cogdl/layers/actmlp_layer.py": {
        "torch": {
            "ModuleList_48": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[QLinear(shapes[layer], shapes[layer + 1], bias=bias) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.norm_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(QBatchNorm1d(x) for x in shapes[1:-1])",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/actsage_layer.py": {
        "torch": {
            "cat_58": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_61": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.aggr(graph, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, out], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.normalize(out, p=2.0, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "self.act(out)",
                            "Call"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/base_layer.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "graph.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/deepergcn_layer.py": {
        "torch": {
            "ReLU_34": {
                "variable": {
                    "value": "self.message_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "learn_msg_scale and use_msg_norm",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "norm_59": {
                "variable": {
                    "value": "x_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Embedding(size, emb_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_60": {
                "variable": {
                    "value": "msg_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "msg",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self.bond_emb_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([beta])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "learn_beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([p])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "learn_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_93": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Embedding(size, emb_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_150": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "edge_softmax(graph, self.beta * edge_msg.contiguous())",
                            "Call"
                        ],
                        [
                            "edge_msg * h",
                            "BinOp"
                        ],
                        [
                            "edge_softmax(graph, edge_msg)",
                            "Call"
                        ],
                        [
                            "edge_msg * h",
                            "BinOp"
                        ],
                        [
                            "batch_max_pooling(h, edge_index[0])",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x).scatter_add_(dim=0, index=edge_index[0].unsqueeze(-1).repeat(1, dim), src=h)",
                            "Call"
                        ],
                        [
                            "edge_msg.pow(self.p) / deg[edge_index[0]].unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "edge_msg * deg_rev[edge_index[0]].unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "edge_msg",
                            "Name"
                        ],
                        [
                            "h.pow(1.0 / self.p)",
                            "Call"
                        ],
                        [
                            "self.message_norm(x, h)",
                            "Call"
                        ],
                        [
                            "h + x",
                            "BinOp"
                        ],
                        [
                            "self.mlp(h)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "h * dropout",
                            "BinOp"
                        ],
                        [
                            "checkpoint(self.conv, graph, h, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.conv(graph, h, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "h + x",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_182": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isinf_85": {
                "input": {
                    "value": "deg_rev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deg.pow(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/layers/disengcn_layer.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_feats, out_feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dt.unsqueeze(0) for dt in h]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_24": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "node_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "add_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sigmoid_26": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_28": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_44": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PReLU_30": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/gat_layer.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_feats, out_feats * nhead)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.a_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, nhead, out_feats))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.a_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, nhead, out_feats))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_40": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats * nhead",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "size": {
                    "value": "(1, nhead, out_feats)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "size": {
                    "value": "(1, nhead, out_feats)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_61": {
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.W).view(-1, self.nhead, self.out_features)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/layers/gcn_layer.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_37": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_39": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/gcnii_layer.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/gin_layer.py": {
        "torch": {
            "Parameter_29": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([eps])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/gine_layer.py": {
        "torch": {
            "Parameter_25": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([eps])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_40": {
                "input": {
                    "value": "x + attr",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/han_layer.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_20": {
                "variable": {
                    "value": "self.gat_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_14": {
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.linear(x).view(-1, 1, x.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_14": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/mixhop_layer.py": {
        "torch": {
            "ModuleList_13": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "output_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dim_per_pow",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/layers/mlp_layer.py": {
        "torch": {
            "ModuleList_43": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(shapes[layer], shapes[layer + 1], bias=bias) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fc(x)",
                            "Call"
                        ],
                        [
                            "self.mlp[-1](x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.norm_list[i](x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.norm_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.LayerNorm(x) for x in shapes[1:-1])",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "shapes[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "shapes[layer + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.norm_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.BatchNorm1d(x) for x in shapes[1:-1])",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "LayerNorm_48": {
                "normalized_shape": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fc(x)",
                            "Call"
                        ],
                        [
                            "self.mlp[-1](x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.norm_list[i](x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_50": {
                "num_features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fc(x)",
                            "Call"
                        ],
                        [
                            "self.mlp[-1](x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.norm_list[i](x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/layers/pprgo_layer.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_29": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "nn.functional.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_25": {
                "input": {
                    "value": "fan_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "shapes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "shapes[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/reversible_layer.py": {
        "torch": {
            "grad_254": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "temp_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ctx.fn(*detached_inputs)",
                            "Call"
                        ],
                        [
                            "(temp_output,)",
                            "Tuple"
                        ]
                    ]
                },
                "inputs": {
                    "value": "filtered_detached_inputs + ctx.weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "grad_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "chunk_419": {
                "variable": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "InvertibleCheckpointFunction.apply(self._fn.inverse, self._fn.forward, self.keep_input_inverse, self.num_bwd_passes, self.preserve_rng_state, len(yin), *yin + tuple([p for p in self._fn.parameters() if p.requires_grad]))",
                            "Call"
                        ],
                        [
                            "self._fn.inverse(*yin)",
                            "Call"
                        ],
                        [
                            "torch.cat([x1, x2], dim=self.split_dim)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs[::-1], dim=self.split_dim)",
                            "Call"
                        ],
                        [
                            "ys[i] - fmd",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y1, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_429": {
                "variable": {
                    "value": "(y1, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "InvertibleCheckpointFunction.apply(self._fn.forward, self._fn.inverse, self.keep_input, self.num_bwd_passes, self.preserve_rng_state, len(xin), *xin + tuple([p for p in self._fn.parameters() if p.requires_grad]))",
                            "Call"
                        ],
                        [
                            "self._fn(*xin)",
                            "Call"
                        ],
                        [
                            "xs[i] + fmd",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_435": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_448": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "InvertibleCheckpointFunction.apply(self._fn.inverse, self._fn.forward, self.keep_input_inverse, self.num_bwd_passes, self.preserve_rng_state, len(yin), *yin + tuple([p for p in self._fn.parameters() if p.requires_grad]))",
                            "Call"
                        ],
                        [
                            "self._fn.inverse(*yin)",
                            "Call"
                        ],
                        [
                            "torch.cat([x1, x2], dim=self.split_dim)",
                            "Call"
                        ],
                        [
                            "torch.cat(xs[::-1], dim=self.split_dim)",
                            "Call"
                        ],
                        [
                            "ys[i] - fmd",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_465": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.chunk(y, self.group, dim=self.split_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_470": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "InvertibleCheckpointFunction.apply(self._fn.forward, self._fn.inverse, self.keep_input, self.num_bwd_passes, self.preserve_rng_state, len(xin), *xin + tuple([p for p in self._fn.parameters() if p.requires_grad]))",
                            "Call"
                        ],
                        [
                            "self._fn(*xin)",
                            "Call"
                        ],
                        [
                            "xs[i] + fmd",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "self.group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_489": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xs[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_497": {
                "variable": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_155": {
                "variable": {
                    "value": "ctx.fwd_cpu_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_239": {
                "mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_rng_state_220": {
                "new_state": {
                    "value": "ctx.fwd_cpu_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_450": {
                "input": {
                    "value": "arg",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "self.group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_472": {
                "input": {
                    "value": "arg",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "self.group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/rgcn_layer.py": {
        "torch": {
            "dropout_109": {
                "variable": {
                    "value": "h_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sum(h_list)",
                            "Call"
                        ],
                        [
                            "F.dropout(h_result, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(h_result)",
                            "Call"
                        ],
                        [
                            "h_result + self.bias",
                            "BinOp"
                        ],
                        [
                            "h_result + F.dropout(torch.matmul(x, self.weight_self_loop), p=self.self_dropout, training=self.training)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(self.alpha, self.weight.view(self.num_bases, -1))",
                            "Call"
                        ],
                        [
                            "weight.view(self.num_edge_types, self.in_feats, self.out_feats)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_153": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_156": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_type.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_bases, in_feats, out_feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.weight_self_loop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_feats, out_feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_88": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "elementwise_affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight.view(self.num_bases, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_164": {
                "variable": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "abc,bcd->abd",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.view(-1, self.num_bases, self.block_in_feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "h_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.out_feats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_edge_types, self.num_bases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_edge_types, self.num_bases, self.block_in_feats * self.block_out_feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "input": {
                    "value": "torch.matmul(x, self.weight_self_loop)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.self_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight_self_loop",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/sage_layer.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * in_feats",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_74": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.aggr(graph, x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, out], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.normalize(out, p=2.0, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.norm(out)",
                            "Call"
                        ],
                        [
                            "self.act(out)",
                            "Call"
                        ],
                        [
                            "out + self.residual(x)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/saint_layer.py": {
        "torch": {
            "ReLU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.f_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.f_lin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_63": {
                "variable": {
                    "value": "self.f_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_64": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.f_bias + self.offset + self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_71": {
                "variable": {
                    "value": "self.f_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_dim_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim_out * ((aggr == 'concat') * (order + 1) + (aggr == 'mean'))",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "feat_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_partial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self._f_feat_trans(ft, idf) for (idf, ft) in enumerate(feat_hop)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "data": {
                    "value": "torch.zeros(dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "data": {
                    "value": "torch.zeros(dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "data": {
                    "value": "torch.ones(dim_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rsqrt_79": {
                "input": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feat.var(dim=1, unbiased=False).view(feat.shape[0], 1) + 1e-09",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/layers/se_layer.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.encoder_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, se_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_23": {
                "variable": {
                    "value": "x_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "se_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/set2set.py": {
        "torch": {
            "LSTM_39": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.out_channels",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "q_star",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q, r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/layers/sgc_layer.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/base_model.py": {
        "torch": {}
    },
    "cogdl/models/defense/gcnsvd.py": {
        "torch": {
            "ModuleList_71": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_74": {
                "normalized_shape": {
                    "value": "n_features[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/defense/robustgcn.py": {
        "torch": {
            "ModuleList_80": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_115": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.mean_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.var_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_182": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_153": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_116": {
                "input": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "mean * 1",
                            "BinOp"
                        ],
                        [
                            "self.var_conv(var)",
                            "Call"
                        ],
                        [
                            "self.act1(var)",
                            "Call"
                        ],
                        [
                            "var * attention * attention",
                            "BinOp"
                        ],
                        [
                            "torch.spmm(adj1, var)",
                            "Call"
                        ],
                        [
                            "self.act1(var)",
                            "Call"
                        ],
                        [
                            "self.dropout(var)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/dgk.py": {
        "torch": {
            "stack_43": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/gatne.py": {
        "torch": {
            "Adam_153": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.parameters()}, {'params': nsloss.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_205": {
                "variable": {
                    "value": "self.node_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(num_nodes, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_206": {
                "variable": {
                    "value": "self.node_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(num_nodes, edge_type_count, embedding_u_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_207": {
                "variable": {
                    "value": "self.trans_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(edge_type_count, embedding_u_size, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_208": {
                "variable": {
                    "value": "self.trans_weights_s1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(edge_type_count, embedding_u_size, dim_a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_209": {
                "variable": {
                    "value": "self.trans_weights_s2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(edge_type_count, dim_a, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "node_embed_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[node_embed_neighbors[:, i, :, i, :].unsqueeze(1) for i in range(self.edge_type_count)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_226": {
                "variable": {
                    "value": "node_type_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_embed_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([node_embed_neighbors[:, i, :, i, :].unsqueeze(1) for i in range(self.edge_type_count)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_232": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(F.tanh(torch.matmul(node_type_embed, trans_w_s1)), trans_w_s2).squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_232": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "variable": {
                    "value": "node_type_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(torch.matmul(F.tanh(torch.matmul(node_type_embed, trans_w_s1)), trans_w_s2).squeeze()).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "node_type_embed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(node_embed_tmp, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, node_type_embed)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_238": {
                "variable": {
                    "value": "last_node_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.node_embeddings[train_inputs]",
                            "Subscript"
                        ],
                        [
                            "node_embed + torch.matmul(node_type_embed, trans_w).squeeze()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_249": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(num_nodes, embedding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_250": {
                "variable": {
                    "value": "self.sample_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor([(math.log(k + 2) - math.log(k + 1)) / math.log(num_nodes + 1) for k in range(num_nodes)])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_262": {
                "variable": {
                    "value": "log_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(torch.sum(torch.mul(embs, self.weights[label]), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_263": {
                "variable": {
                    "value": "negs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sample_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_sampled * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "neg_264": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights[negs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_265": {
                "variable": {
                    "value": "sum_log_sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.sigmoid(torch.bmm(noise, embs.unsqueeze(2))))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_265": {
                "variable": {
                    "value": "sum_log_sampled",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "train_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[i for _ in range(edge_type_count)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "train_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(range(edge_type_count))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_189": {
                "variable": {
                    "value": "node_neigh",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[neighbors[i] for _ in range(edge_type_count)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_236": {
                "input": {
                    "value": "node_type_embed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(node_embed_tmp, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, node_type_embed)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trans_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.trans_weights[train_types]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_262": {
                "input": {
                    "value": "torch.sum(torch.mul(embs, self.weights[label]), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_262": {
                "input": {
                    "value": "torch.mul(embs, self.weights[label])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_386": {
                "data": {
                    "value": "neigh",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_233": {
                "input": {
                    "value": "node_type_embed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(node_embed_tmp, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(attention, node_type_embed)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trans_w_s1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.trans_weights_s1[train_types]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_262": {
                "input": {
                    "value": "embs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(data[0].to(device), data[2].to(device), data[3].to(device))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weights[label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_265": {
                "input": {
                    "value": "torch.sigmoid(torch.bmm(noise, embs.unsqueeze(2)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_265": {
                "input": {
                    "value": "torch.bmm(noise, embs.unsqueeze(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_265": {
                "input": {
                    "value": "noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.neg(self.weights[negs])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embs.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_233": {
                "input": {
                    "value": "torch.matmul(node_type_embed, trans_w_s1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/graph2vec.py": {
        "torch": {
            "stack_52": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/hin2vec.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.Wx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_node, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.Wr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_relation, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_25": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.arange(num_node)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_node",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_26": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.arange(num_relation)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_relation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_27": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_30": {
                "variable": {
                    "value": "clamp_embr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embr",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "6.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_31": {
                "variable": {
                    "value": "sigmod1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clamp_embr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.clamp(embr, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_33": {
                "variable": {
                    "value": "re_embr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigmod1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(clamp_embr)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - sigmod1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "self.preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(torch.sum(torch.mul(torch.mul(self.embx, self.emby), self.re_embr), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.preds, 1 - self.preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.arange(0, self.num_node)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_node",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_191": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_52": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.one_hot(torch.arange(0, self.num_node), num_classes=self.num_node).float().to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.Wx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_20": {
                "*size": {
                    "value": "num_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_21": {
                "*size": {
                    "value": "num_relation",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_38": {
                "input": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.one_hot(torch.arange(0, self.num_node), num_classes=self.num_node).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_39": {
                "input": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_40": {
                "input": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_42": {
                "input": {
                    "value": "r_one",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.Wr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_45": {
                "input": {
                    "value": "torch.sum(torch.mul(torch.mul(self.embx, self.emby), self.re_embr), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "batch_pairs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pairs[i * self.batch_size:(i + 1) * self.batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "torch.mul(torch.mul(self.embx, self.emby), self.re_embr)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(label).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_208": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(pred, dim=0)",
                            "Call"
                        ],
                        [
                            "pred.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_45": {
                "input": {
                    "value": "self.embx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.emby",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_25": {
                "start": {
                    "value": "num_node",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_26": {
                "start": {
                    "value": "num_relation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_51": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_node",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/emb/sdne.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.encode0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.encode1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.decode0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.decode1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_node",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_32": {
                "variable": {
                    "value": "t0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.encode0(adj_mat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_33": {
                "variable": {
                    "value": "t0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.encode1(t0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_35": {
                "variable": {
                    "value": "t0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decode0(t0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_36": {
                "variable": {
                    "value": "t0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decode1(t0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "L_2nd",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(adj_mat - t0) * adj_mat * self.beta * ((adj_mat - t0) * adj_mat * self.beta)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nx.adjacency_matrix(G).todense().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "nx.laplacian_matrix(G).todense().astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_124": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_38": {
                "input": {
                    "value": "torch.mm(torch.mm(torch.t(self.embedding), l_mat), self.embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_38": {
                "input": {
                    "value": "torch.t(self.embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "l_mat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "param * param",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_38": {
                "input": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "param",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/models/nn/actgcn.py": {
        "torch": {
            "ModuleList_65": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ActGCNLayer(shapes[i], shapes[i + 1], dropout=dropout if i != num_layers - 1 else 0, residual=residual if i != num_layers - 1 else None, norm=norm if i != num_layers - 1 else None, activation=activation if i != num_layers - 1 else None, rp_ratio=rp_ratio) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/autognn.py": {
        "torch": {
            "ModuleList_33": {
                "variable": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_15": {
                "modules": {
                    "value": "[GCNLayer(shapes[i], shapes[i + 1], dropout=dropout if i != num_layers - 1 else 0, residual=residual if i != num_layers - 1 else None, norm=norm if i != num_layers - 1 else None, activation=activation if i != num_layers - 1 else None) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "p": {
                    "value": "dropout2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_216": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - drop_rates",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_216": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_67": {
                "num_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_214": {
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dropout_41": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/compgcn.py": {
        "torch": {
            "Parameter_25": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_bases, in_feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * num_rels, num_bases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_87": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_in, num_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "rel_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rel_embed, self.loop_rel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "loop_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(num_entities), torch.arange(num_entities))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_109": {
                "variable": {
                    "value": "loop_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_entities,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "rel_embed.shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "trans_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_embed",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.rel_transform(tail_emb, rel_emb)",
                            "Call"
                        ],
                        [
                            "torch.matmul(trans_embed, weight)",
                            "Call"
                        ],
                        [
                            "trans_embed * edge_weight.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "ent_embed - rel_embed",
                            "BinOp"
                        ],
                        [
                            "ent_embed * rel_embed",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(self.alpha, self.weight)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(torch.Tensor(num_in, num_out))",
                            "Call"
                        ],
                        [
                            "getattr(self, f'weight_{mode}')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "trans_embed.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_167": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_268": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_entities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[col, row]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(_row, _col)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "edge_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_types, edge_types_rev]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_286": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_288": {
                "variable": {
                    "value": "(reindexed_node, reindexed_edge_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.edge_index",
                            "Attribute"
                        ],
                        [
                            "torch.cat((_row, _col), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.stack(graph.edge_index)",
                            "Call"
                        ],
                        [
                            "torch.stack([row, col])",
                            "Call"
                        ]
                    ]
                },
                "return_inverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_299": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_316": {
                "variable": {
                    "value": "(sampled_nodes, reindexed_edges)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_326": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_entities",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_140": {
                "input": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x.shape[0], dim).to(device).scatter_add_(0, edge_index[0].unsqueeze(-1).repeat(1, dim), trans_embed)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_163": {
                "variable": {
                    "value": "self.init_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_bases",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_165": {
                "variable": {
                    "value": "self.init_rel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2 * num_rels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_122": {
                "input": {
                    "value": "rel_embed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.basis_weight()",
                            "Call"
                        ],
                        [
                            "torch.cat((rel_embed, self.loop_rel), dim=0)",
                            "Call"
                        ],
                        [
                            "self.init_rel.weight",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight_rel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_107": {
                "start": {
                    "value": "num_entities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/models/nn/correct_smooth.py": {
        "torch": {
            "zeros_26": {
                "variable": {
                    "value": "err",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(nnode, nclass)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "preds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_13": {
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x ** p",
                            "BinOp"
                        ],
                        [
                            "(1 - alpha) * x + alpha * spmm(g, x)",
                            "BinOp"
                        ],
                        [
                            "x ** p",
                            "BinOp"
                        ],
                        [
                            "self.cache_x",
                            "Attribute"
                        ],
                        [
                            "torch.cat([graph.x, _x], dim=1)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "(x - x.mean(0)) / x.std(0)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "one_hot_36": {
                "variable": {
                    "value": "y[label_nid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels[label_nid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.max() + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_36": {
                "variable": {
                    "value": "y[label_nid]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_27": {
                "tensor": {
                    "value": "labels[split_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "nclass",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.max().item() + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_27": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "label_nid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(train_nid, valid_nid)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_210": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mlp(x)",
                            "Call"
                        ],
                        [
                            "self.forward(data)",
                            "Call"
                        ],
                        [
                            "F.softmax(out, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.c_s(data, out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph.x, _x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/daegc.py": {
        "torch": {
            "Parameter_50": {
                "variable": {
                    "value": "self.cluster_center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.num_clusters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.att1(graph, x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.att2(graph, x))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att1(graph, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.att1(graph, x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.att2(graph, x))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.att2(graph, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(edge_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_64": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.att1(graph, x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.att2(graph, x))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "list(H.edges())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_84": {
                "input": {
                    "value": "F.sigmoid(torch.mm(z, z.t()))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_84": {
                "input": {
                    "value": "torch.mm(z, z.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_84": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/deepergcn.py": {
        "torch": {
            "Linear_85": {
                "variable": {
                    "value": "self.feat_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_109": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_119": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.feat_encoder(x)",
                            "Call"
                        ],
                        [
                            "layer(graph, h)",
                            "Call"
                        ],
                        [
                            "self.activation(self.norm(h))",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/dgi.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_ft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spmm(graph, torch.squeeze(seq_fts, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_38": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "seq_fts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "seq_fts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_41": {
                "input": {
                    "value": "seq_fts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "input": {
                    "value": "seq_fts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/diffpool.py": {
        "torch": {
            "cat_256": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[batch_adj[i:i + node_per_pool_graph, i:i + node_per_pool_graph] for i in range(0, batch_adj.size()[0], node_per_pool_graph)]",
                            "ListComp"
                        ],
                        [
                            "list(map(lambda x: torch.unsqueeze(x, 0), adj_list))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[batch_feat[i:i + node_per_pool_graph, :] for i in range(0, batch_adj.size()[0], node_per_pool_graph)]",
                            "ListComp"
                        ],
                        [
                            "list(map(lambda x: torch.unsqueeze(x, 0), feat_list))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_19": {
                "variable": {
                    "value": "entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "s_l",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_19": {
                "variable": {
                    "value": "entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.convlist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.bn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_102": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(adj_list, dim=0)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(x.shape[1]).to(device)",
                            "BinOp"
                        ],
                        [
                            "adj / adj.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.sparse_coo_tensor(torch.stack(graph.edge_index), graph.edge_weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_104": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convlist[i](graph, h)",
                            "Call"
                        ],
                        [
                            "self.bn_list[i](h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "self.weight(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(h, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(result.t(), embed)",
                            "Call"
                        ],
                        [
                            "self.feat_trans(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.matmul(next_l.transpose(-1, -2), h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h, adj)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[0], adj, h)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[i + 1], adj, h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convlist[i](graph, h)",
                            "Call"
                        ],
                        [
                            "self.bn_list[i](h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "self.weight(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(h, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(result.t(), embed)",
                            "Call"
                        ],
                        [
                            "self.feat_trans(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.matmul(next_l.transpose(-1, -2), h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h, adj)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[0], adj, h)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[i + 1], adj, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "pooled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pool_gnn(graph, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_157": {
                "variable": {
                    "value": "(value_set, value_counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_164": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked * pooled",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embd_gnn(graph, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_coo_tensor_170": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "torch.stack(graph.edge_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "graph.edge_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_171": {
                "variable": {
                    "value": "adj_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(adj_list, dim=0)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(x.shape[1]).to(device)",
                            "BinOp"
                        ],
                        [
                            "adj / adj.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.sparse_coo_tensor(torch.stack(graph.edge_index), graph.edge_weight)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "result",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(masked * pooled, dim=-1)",
                            "Call"
                        ],
                        [
                            "result * masked",
                            "BinOp"
                        ],
                        [
                            "result / (result.sum(dim=-1, keepdim=True) + 1e-13)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_172": {
                "variable": {
                    "value": "adj_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "adj_new",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sparse.mm(adj, result)",
                            "Call"
                        ],
                        [
                            "torch.mm(result.t(), adj_new)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_177": {
                "variable": {
                    "value": "entropy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "pooled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(self.pool_gnn(graph, x), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_177": {
                "variable": {
                    "value": "entropy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_222": {
                "variable": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_231": {
                "variable": {
                    "value": "next_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.assign_trans(x, adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_233": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_l.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convlist[i](graph, h)",
                            "Call"
                        ],
                        [
                            "self.bn_list[i](h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "self.weight(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(h, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(result.t(), embed)",
                            "Call"
                        ],
                        [
                            "self.feat_trans(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.matmul(next_l.transpose(-1, -2), h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h, adj)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[0], adj, h)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[i + 1], adj, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_234": {
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(adj_list, dim=0)",
                            "Call"
                        ],
                        [
                            "adj + torch.eye(x.shape[1]).to(device)",
                            "BinOp"
                        ],
                        [
                            "adj / adj.sum(dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.sparse_coo_tensor(torch.stack(graph.edge_index), graph.edge_weight)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "next_l",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(self.assign_trans(x, adj), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_348": {
                "variable": {
                    "value": "self.diffpool_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_357": {
                "variable": {
                    "value": "self.after_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_358": {
                "variable": {
                    "value": "after_per_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_383": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pooled_emb_dim * (num_pool_layers + 1)",
                            "BinOp"
                        ],
                        [
                            "pooled_emb_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unique_406": {
                "variable": {
                    "value": "(value_set, value_counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_410": {
                "variable": {
                    "value": "readout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convlist[i](graph, h)",
                            "Call"
                        ],
                        [
                            "self.bn_list[i](h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "self.weight(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(h, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(result.t(), embed)",
                            "Call"
                        ],
                        [
                            "self.feat_trans(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.matmul(next_l.transpose(-1, -2), h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h, adj)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[0], adj, h)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[i + 1], adj, h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_423": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(readout)",
                            "Call"
                        ],
                        [
                            "self.forward(batch)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nll_loss_424": {
                "variable": {
                    "value": "loss_n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc(readout)",
                            "Call"
                        ],
                        [
                            "self.forward(batch)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(pred, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "batch.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_72": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convlist[i](graph, h)",
                            "Call"
                        ],
                        [
                            "self.bn_list[i](h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "self.weight(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(h, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(result.t(), embed)",
                            "Call"
                        ],
                        [
                            "self.feat_trans(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.matmul(next_l.transpose(-1, -2), h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h, adj)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[0], adj, h)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[i + 1], adj, h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_160": {
                "variable": {
                    "value": "masked",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(i, int(pooled.size()[1] / batch_size))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_416": {
                "variable": {
                    "value": "readout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convlist[i](graph, h)",
                            "Call"
                        ],
                        [
                            "self.bn_list[i](h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(adj, x)",
                            "Call"
                        ],
                        [
                            "self.weight(h)",
                            "Call"
                        ],
                        [
                            "F.normalize(h, dim=2, p=2)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "torch.matmul(result.t(), embed)",
                            "Call"
                        ],
                        [
                            "self.feat_trans(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.matmul(next_l.transpose(-1, -2), h)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layer(h, adj)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[0], adj, h)",
                            "Call"
                        ],
                        [
                            "self.after_pooling_forward(self.after_pool[i + 1], adj, h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_20": {
                "input": {
                    "value": "entropy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.distributions.Categorical(probs=s_l).entropy().mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_170": {
                "tensors": {
                    "value": "graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_178": {
                "input": {
                    "value": "entropy_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.distributions.Categorical(probs=pooled).entropy().mean()",
                            "Call"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_100": {
                "n": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_175": {
                "input": {
                    "value": "adj.to_dense() - torch.mm(result, result.t())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_254": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_255": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_62": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_66": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_175": {
                "input": {
                    "value": "result",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.nn.functional.softmax(masked * pooled, dim=-1)",
                            "Call"
                        ],
                        [
                            "result * masked",
                            "BinOp"
                        ],
                        [
                            "result / (result.sum(dim=-1, keepdim=True) + 1e-13)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "result.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/disengcn.py": {
        "torch": {
            "Parameter_44": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(DisenGCNLayer(shapes[i], shapes[i + 1], K[i], iterations, tau, activation) for i in range(self.num_layers))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "dropout_63": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/drgat.py": {
        "torch": {
            "dropout_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.se1(x)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(graph, x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.se2(x)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv2(graph, x))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(graph, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.se1(x)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(graph, x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.se2(x)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv2(graph, x))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(graph, x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/drgcn.py": {
        "torch": {
            "ModuleList_45": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNLayer(shapes[layer], shapes[layer + 1], activation=activation, norm=norm) for layer in range(num_layers - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.ses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SELayer(shapes[layer], se_channels=int(np.sqrt(shapes[layer]))) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.ses[0](x)",
                            "Call"
                        ],
                        [
                            "conv(graph, x)",
                            "Call"
                        ],
                        [
                            "se(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[-1](graph, x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/dropedge_gcn.py": {
        "torch": {
            "Parameter_38": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_56": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._doconcat(x, subx)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.ingc(graph, x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "midgc(graph, x)",
                            "Call"
                        ],
                        [
                            "self.outgc(graph, x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.hiddenlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_394": {
                "variable": {
                    "value": "self.midlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_462": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_464": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_475": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._doconcat(x, subx)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.ingc(graph, x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "midgc(graph, x)",
                            "Call"
                        ],
                        [
                            "self.outgc(graph, x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_617": {
                "variable": {
                    "value": "self.midlayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_647": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._doconcat(x, subx)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.ingc(graph, x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "midgc(graph, x)",
                            "Call"
                        ],
                        [
                            "self.outgc(graph, x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_656": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._doconcat(x, subx)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.ingc(graph, x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "midgc(graph, x)",
                            "Call"
                        ],
                        [
                            "self.outgc(graph, x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_156": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "gc(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_409": {
                "variable": {
                    "value": "reslayer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_41": {
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "(x, subx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_428": {
                "variable": {
                    "value": "subx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "subx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "gc(graph, x)",
                            "Call"
                        ],
                        [
                            "F.dropout(subx, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_437": {
                "tensors": {
                    "value": "(x, subx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_465": {
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_60": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._doconcat(x, subx)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.ingc(graph, x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "midgc(graph, x)",
                            "Call"
                        ],
                        [
                            "self.outgc(graph, x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.self_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/gae.py": {
        "torch": {
            "exp_51": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_var.clamp(max=10)",
                            "Call"
                        ],
                        [
                            "self.conv2_var(graph, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_61": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.conv1(graph, h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_80": {
                "variable": {
                    "value": "recon_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decode(z)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_81": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_var.clamp(max=10)",
                            "Call"
                        ],
                        [
                            "self.conv2_var(graph, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_67": {
                "input": {
                    "value": "torch.matmul(x, x.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_20": {
                "input": {
                    "value": "F.softmax(torch.mm(embeddings, embeddings.t()))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_82": {
                "input": {
                    "value": "torch.sum(mean * mean + var - log_var - 1, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_20": {
                "input": {
                    "value": "torch.mm(embeddings, embeddings.t())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_52": {
                "input": {
                    "value": "log_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "log_var.clamp(max=10)",
                            "Call"
                        ],
                        [
                            "self.conv2_var(graph, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_82": {
                "input": {
                    "value": "mean * mean + var - log_var - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_20": {
                "input": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embed(data)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embeddings.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/gat.py": {
        "torch": {
            "ModuleList_71": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_102": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/models/nn/gcc_model.py": {
        "torch": {
            "relu_29": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mlp(h)",
                            "Call"
                        ],
                        [
                            "self.bn(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "n_feat",
                            "Name"
                        ],
                        [
                            "self.gin_layers[i](batch, h)",
                            "Call"
                        ],
                        [
                            "self.batch_norm[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GATLayer(in_feats=in_feats if i > 0 else hidden_size // nhead, out_feats=hidden_size // nhead, nhead=nhead, attn_drop=0.0, alpha=0.2, residual=False, activation=F.leaky_relu if i + 1 < num_layers else None) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.gin_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_84": {
                "variable": {
                    "value": "self.linear_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_90": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_100": {
                "variable": {
                    "value": "self.final_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "final_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_111": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mlp(h)",
                            "Call"
                        ],
                        [
                            "self.bn(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "n_feat",
                            "Name"
                        ],
                        [
                            "self.gin_layers[i](batch, h)",
                            "Call"
                        ],
                        [
                            "self.batch_norm[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_237": {
                "variable": {
                    "value": "self.degree_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_degree + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "degree_embedding_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.lin_readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * node_hidden_dim, node_hidden_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_273": {
                "variable": {
                    "value": "seed_emb",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_undirected, deg_emb, seed_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_undirected, seed_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_303": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer(graph, x)",
                            "Call"
                        ],
                        [
                            "self.set2set(g, x)",
                            "Call"
                        ],
                        [
                            "self.lin_readout(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=-1, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "num_features": {
                    "value": "self.mlp.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_272": {
                "obj": {
                    "value": "seed_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "g.seed.unsqueeze(1).float()",
                            "Call"
                        ],
                        [
                            "torch.Tensor(seed_emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_82": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "in_features": {
                    "value": "node_hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_277": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/gcn.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNLayer(shapes[i], shapes[i + 1], dropout=dropout if i != num_layers - 1 else 0, residual=residual if i != num_layers - 1 else None, norm=norm if i != num_layers - 1 else None, activation=activation if i != num_layers - 1 else None) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/gcnii.py": {
        "torch": {
            "ReLU_80": {
                "variable": {
                    "value": "ReLU",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(Layer(hidden_size, self.alpha, math.log(self.lmbda / (i + 1) + 1), residual) for i in range(num_layers))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "params": {
                    "value": "[{'params': self.fc_parameters, 'weight_decay': self.wd1}, {'params': self.conv_parameters, 'weight_decay': self.wd2}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/gcnmix.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BCELoss_73": {
                "variable": {
                    "value": "self.loss_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_78": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight(x)",
                            "Call"
                        ],
                        [
                            "spmm(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_gnn(graph, h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.hidden_gnn(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_gnn.forward_aux(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.hidden_gnn.forward_aux(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_81": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight(x)",
                            "Call"
                        ],
                        [
                            "spmm(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_gnn(graph, h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.hidden_gnn(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_gnn.forward_aux(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.hidden_gnn.forward_aux(h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight(x)",
                            "Call"
                        ],
                        [
                            "spmm(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_gnn(graph, h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.hidden_gnn(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_gnn.forward_aux(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.hidden_gnn.forward_aux(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_94": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.weight(x)",
                            "Call"
                        ],
                        [
                            "spmm(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_gnn(graph, h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.hidden_gnn(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.input_gnn.forward_aux(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.hidden_gnn.forward_aux(h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_17": {
                "n": {
                    "value": "train_index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/gdc_gcn.py": {
        "torch": {
            "dropout_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(graph, x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(graph, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(graph, x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_139": {
                "data": {
                    "value": "edge_attr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/gin.py": {
        "torch": {
            "ModuleList_75": {
                "variable": {
                    "value": "self.gin_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_86": {
                "variable": {
                    "value": "self.linear_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_92": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_93": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "self.gin_layers[i](batch, h)",
                            "Call"
                        ],
                        [
                            "self.batch_norm[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(torch.max(batch.batch)) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "layer_rep[i].shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_84": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_98": {
                "input": {
                    "value": "batch.batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/grace.py": {
        "torch": {
            "ModuleList_18": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNLayer(shapes[i], shapes[i + 1]) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.project_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, proj_hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "proj_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ELU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/grand.py": {
        "torch": {
            "Linear_75": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nfeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_79": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nfeat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_120": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masks.to(x.device) * x",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 - self.dropnode_rate)",
                            "BinOp"
                        ],
                        [
                            "self.drop_node(x)",
                            "Call"
                        ],
                        [
                            "spmm(graph, x).detach_()",
                            "Call"
                        ],
                        [
                            "x * row_inv[:, None]",
                            "BinOp"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.normalize_x(x)",
                            "Call"
                        ],
                        [
                            "self.rand_prop(graph, x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.input_droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.hidden_droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.input_droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_124": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masks.to(x.device) * x",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 - self.dropnode_rate)",
                            "BinOp"
                        ],
                        [
                            "self.drop_node(x)",
                            "Call"
                        ],
                        [
                            "spmm(graph, x).detach_()",
                            "Call"
                        ],
                        [
                            "x * row_inv[:, None]",
                            "BinOp"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.normalize_x(x)",
                            "Call"
                        ],
                        [
                            "self.rand_prop(graph, x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.input_droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.hidden_droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.hidden_droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_90": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - drop_rates",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_90": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/models/nn/graph_unet.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_34": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.act(h)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "max(2, num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "new_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "out": {
                    "value": "h.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.down_gnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNLayer(hidden_size, hidden_size) for _ in range(pooling_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_79": {
                "variable": {
                    "value": "self.up_gnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNLayer(hidden_size, hidden_size) for _ in range(pooling_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.poolings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Pool(hidden_size, pooling_rates[i], aug_adj, dropout) for i in range(pooling_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_83": {
                "variable": {
                    "value": "self.unpoolings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[UnPool() for _ in range(pooling_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dropout_109": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj(x).squeeze()",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.down_gnns[i](g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "g.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcn(g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "self.unpoolings[i](num_nodes[i], h, index)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.up_gnns[i](g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "h + down_hidden[i]",
                            "BinOp"
                        ],
                        [
                            "h.add(h_init)",
                            "Call"
                        ],
                        [
                            "self.in_gcn(graph, x)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "h_list[-1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(h, p=self.n_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_37": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "graph.edge_index[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_38": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_97": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj(x).squeeze()",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.down_gnns[i](g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "g.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcn(g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "self.unpoolings[i](num_nodes[i], h, index)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.up_gnns[i](g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "h + down_hidden[i]",
                            "BinOp"
                        ],
                        [
                            "h.add(h_init)",
                            "Call"
                        ],
                        [
                            "self.in_gcn(graph, x)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "h_list[-1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(h, p=self.n_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_119": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj(x).squeeze()",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.down_gnns[i](g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "g.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcn(g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "self.unpoolings[i](num_nodes[i], h, index)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.up_gnns[i](g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "h + down_hidden[i]",
                            "BinOp"
                        ],
                        [
                            "h.add(h_init)",
                            "Call"
                        ],
                        [
                            "self.in_gcn(graph, x)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "h_list[-1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(h, p=self.n_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, torch.arange(0, x.shape[0], device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[col, torch.arange(0, x.shape[0], device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_202": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.n_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.n_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_208": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.proj(x).squeeze()",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.down_gnns[i](g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "g.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcn(g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "self.unpoolings[i](num_nodes[i], h, index)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.up_gnns[i](g, h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "h + down_hidden[i]",
                            "BinOp"
                        ],
                        [
                            "h.add(h_init)",
                            "Call"
                        ],
                        [
                            "self.in_gcn(graph, x)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "h_list[-1]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(h, p=self.n_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.n_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_192": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_193": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/graphsage.py": {
        "torch": {
            "as_tensor_31": {
                "variable": {
                    "value": "edge_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_31": {
                "variable": {
                    "value": "edge_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGELayer(shapes[layer], shapes[layer + 1], aggr=aggr) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_171": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Layer(shapes[i], shapes[i + 1], aggr=aggr, normalize=normalize if i != num_layers - 1 else False, dropout=dropout, norm=norm if i != num_layers - 1 else None, activation=activation if i != num_layers - 1 else None) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "x_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "output[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[src_id].to(device)",
                            "Call"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "x[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "output[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[src_id].to(device)",
                            "Call"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "x[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "output[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[src_id].to(device)",
                            "Call"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "x[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_102": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "output[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[src_id].to(device)",
                            "Call"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "x[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "output[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[src_id].to(device)",
                            "Call"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "x[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/models/nn/graphsaint.py": {
        "torch": {
            "ModuleList_87": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.aggregators",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_129": {
                "variable": {
                    "value": "emb_subg_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_139": {
                "weight": {
                    "value": "norm_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "norm_loss.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_141": {
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/gtn.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0.1])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "variable": {
                    "value": "filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_129": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.w_out * self.num_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "X_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(X_)",
                            "Call"
                        ],
                        [
                            "F.relu(X_)",
                            "Call"
                        ],
                        [
                            "self.gcn(graph, X)",
                            "Call"
                        ],
                        [
                            "F.relu(X_)",
                            "Call"
                        ],
                        [
                            "torch.cat((X_, F.relu(self.gcn(graph, X))), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_46": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_139": {
                "variable": {
                    "value": "edge",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(edge)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "deg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_148": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "total_edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_edge_index, edge_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "total_edge_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_edge_value, edge_value * filter[i][j])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "input": {
                    "value": "self.conv2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "input": {
                    "value": "self.conv1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_177": {
                "variable": {
                    "value": "X_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(X_)",
                            "Call"
                        ],
                        [
                            "F.relu(X_)",
                            "Call"
                        ],
                        [
                            "self.gcn(graph, X)",
                            "Call"
                        ],
                        [
                            "F.relu(X_)",
                            "Call"
                        ],
                        [
                            "torch.cat((X_, F.relu(self.gcn(graph, X))), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_182": {
                "variable": {
                    "value": "X_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X_, F.relu(self.gcn(graph, X)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_182": {
                "input": {
                    "value": "self.gcn(graph, X)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/han.py": {
        "torch": {
            "ModuleList_42": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_43": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.w_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/infograph.py": {
        "torch": {
            "ModuleList_35": {
                "variable": {
                    "value": "self.gnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.bn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "node_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "graph_rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pooled_rep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[self.pooling(h, batch) for h in layer_rep]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.sem_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_layers * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.sem_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MSELoss_149": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "node_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sem_fc1(node_feat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_layers[i](self.gnn_layers[i](graph, x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_87": {
                "input": {
                    "value": "self.block(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_43": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/m3s.py": {
        "torch": {
            "relu_39": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.dropout(h, self.dropout, training=self.training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_46": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_39": {
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.gcn1(graph, h)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(h, self.dropout, training=self.training))",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.gcn1(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(h), self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcn2(graph, h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_46": {
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.gcn1(graph, h)",
                            "Call"
                        ],
                        [
                            "F.relu(F.dropout(h, self.dropout, training=self.training))",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.gcn1(graph, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(F.relu(h), self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gcn2(graph, h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/models/nn/mixhop.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.mixhops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MixHopLayer(shapes[layer], [0, 1, 2], layer_pows[layer]) for layer in range(len(layer_pows))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "shapes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixhop(graph, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(mixhop(graph, x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/moe_gcn.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "activation",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.GELU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_18": {
                "variable": {
                    "value": "self.bn_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GraphConvBlock(conv_func, conv_params, shapes[i], shapes[i + 1], dropout=dropout) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.final_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.res_connection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_55": {
                "variable": {
                    "value": "new_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.graph_conv(graph, feats)",
                            "Call"
                        ],
                        [
                            "new_feats + res",
                            "BinOp"
                        ],
                        [
                            "F.dropout(new_feats, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.pos_ff(new_feats)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GELU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_12": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/models/nn/mvgrl.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_16": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bilinear_42": {
                "variable": {
                    "value": "self.f_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "n_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "n_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "c_x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_56": {
                "variable": {
                    "value": "c_x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_60": {
                "variable": {
                    "value": "sc_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h2, c_x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "sc_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h1, c_x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "sc_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h4, c_x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "sc_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h3, c_x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sc_1, sc_2, sc_3, sc_4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_100": {
                "variable": {
                    "value": "self.sigm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_103": {
                "variable": {
                    "value": "self.loss_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g.row",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_153": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g.col",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "variable": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_155": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_183": {
                "tensors": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((sc_1, sc_2, sc_3, sc_4), 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.forward(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_190": {
                "variable": {
                    "value": "lbl_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.sample_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_191": {
                "variable": {
                    "value": "lbl_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.sample_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "lbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lbl_1, lbl_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_33": {
                "input": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(seq.shape) - 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_35": {
                "input": {
                    "value": "msk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/models/nn/patchy_san.py": {
        "torch": {
            "Conv1d_71": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filter1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "rep1",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride1",
                    "type": "Variable",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_72": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filter1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filter2",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_neighbor",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_lin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(int(num_sample * num_neighbor / stride1) - num_neighbor + 1) * num_filter2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_class",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "dataset[i].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_single_feature(dataset[i], args.num_features, args.num_classes, args.num_sample, args.num_neighbor, args.stride)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/ppnp.py": {
        "torch": {
            "dropout_65": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_59": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(edge_index)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "edge_attr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(edge_index.shape[1]).float().to(input.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "(input.shape[0], input.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_56": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(edge_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_58": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_index.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_79": {
                "variable": {
                    "value": "graph.edge_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "graph.edge_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_75": {
                "input": {
                    "value": "self.vals",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_71": {
                "input": {
                    "value": "torch.eye(x.shape[0]).to(x.device) - (1 - self.alpha) * get_ready_format(x, graph.edge_index, graph.edge_attr)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_72": {
                "n": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/pprgo.py": {
        "torch": {
            "zeros_45": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets[-1] + 1",
                            "BinOp"
                        ],
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "h.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "pred_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pred_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "pred_logits.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/revgcn.py": {
        "torch": {
            "zeros_like_16": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "x.split(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x[0], x[1]), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_89": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ],
                        [
                            "self.input_fc(x)",
                            "Call"
                        ],
                        [
                            "layer(graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.activation(self.norm(h))",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.output_fc(h)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "self.input_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_163": {
                "variable": {
                    "value": "self.output_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_204": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ],
                        [
                            "self.input_fc(x)",
                            "Call"
                        ],
                        [
                            "layer(graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.activation(self.norm(h))",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.output_fc(h)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_250": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_275": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ],
                        [
                            "self.input_fc(x)",
                            "Call"
                        ],
                        [
                            "layer(graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.activation(self.norm(h))",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.output_fc(h)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_287": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ],
                        [
                            "self.input_fc(x)",
                            "Call"
                        ],
                        [
                            "layer(graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.activation(self.norm(h))",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.output_fc(h)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_102": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ],
                        [
                            "self.input_fc(x)",
                            "Call"
                        ],
                        [
                            "layer(graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.activation(self.norm(h))",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.output_fc(h)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.one_hot_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_feats // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "isnan_281": {
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ],
                        [
                            "self.input_fc(x)",
                            "Call"
                        ],
                        [
                            "layer(graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.activation(self.norm(h))",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.output_fc(h)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(h, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[0](graph, h)",
                            "Call"
                        ],
                        [
                            "self.layers[i](graph, h, mask)",
                            "Call"
                        ],
                        [
                            "self.norm(h)",
                            "Call"
                        ],
                        [
                            "self.act(h)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers[-1](graph, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/rgcn.py": {
        "torch": {
            "ModuleList_26": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(RGCNLayer(shapes[i], shapes[i + 1], num_rels, regularizer, num_bases, self_loop, dropout, self_dropout) for i in range(num_layers))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "Embedding_109": {
                "variable": {
                    "value": "self.rel_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_rels",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_110": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_entities",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unique_113": {
                "variable": {
                    "value": "(reindexed_nodes, reindexed_edges)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(graph.edge_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unique_139": {
                "variable": {
                    "value": "(sampled_nodes, reindexed_edges)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unique_141": {
                "variable": {
                    "value": "sampled_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_150": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.layers[i](graph, h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_113": {
                "tensors": {
                    "value": "graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/sagn.py": {
        "torch": {
            "cat_96": {
                "variable": {
                    "value": "node_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_nid, val_nid, test_nid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "train_nid_with_pseudos",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_nid_with_pseudos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_nid",
                            "Name"
                        ],
                        [
                            "np.union1d(train_nid.cpu().numpy(), confident_nid.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_nid_with_pseudos).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_213": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MLP(in_feats, hidden_size * nhead, hidden_size, mlp_layer, norm='batchnorm', dropout=dropout) for _ in range(nhop + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_222": {
                "variable": {
                    "value": "self.res_conn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * nhead",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_226": {
                "variable": {
                    "value": "self.attn_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(size=(1, nhead, hidden_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_227": {
                "variable": {
                    "value": "self.attn_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(size=(1, nhead, hidden_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(a_l + a_r).unsqueeze(-1) for a_l in a_ls]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "leaky_relu_247": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([(a_l + a_r).unsqueeze(-1) for a_l in a_ls], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(a, negative_slope=self.negative_slope)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(a, p=self.attn_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_248": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([(a_l + a_r).unsqueeze(-1) for a_l in a_ls], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(a, negative_slope=self.negative_slope)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(a, p=self.attn_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_249": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([(a_l + a_r).unsqueeze(-1) for a_l in a_ls], dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(a, negative_slope=self.negative_slope)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(a, p=self.attn_dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_255": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.norm(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_256": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "out + self.label_mlp(y_emb)",
                            "BinOp"
                        ],
                        [
                            "out.mean(1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.norm(out))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mlp(out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_54": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "feat_emb_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'./sagn/feats_{dataset_name}_hop_{nhop}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "load_69": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "feat_emb_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'./sagn/feats_{dataset_name}_hop_{nhop}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "ones_like_111": {
                "variable": {
                    "value": "labels_with_pseudos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_113": {
                "variable": {
                    "value": "pseudo_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "labels_with_pseudos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "label_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data.num_nodes, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "one_hot_132": {
                "variable": {
                    "value": "label_emb[train_nid_with_pseudos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels_with_pseudos[train_nid_with_pseudos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_140": {
                "variable": {
                    "value": "label_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "label_emb_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'./sagn/label_emb_{dataset_name}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "load_151": {
                "variable": {
                    "value": "label_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "label_emb_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'./sagn/label_emb_{dataset_name}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "log_36": {
                "input": {
                    "value": "1 - probs + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "feats",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.load(feat_emb_path)",
                            "Call"
                        ],
                        [
                            "average_neighbor_features(data, data.x, nhop, norm=norm, style='all')",
                            "Call"
                        ],
                        [
                            "torch.load(feat_emb_path)",
                            "Call"
                        ],
                        [
                            "average_neighbor_features(data, data.x, nhop, norm=norm, style='all')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "feat_emb_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'./sagn/feats_{dataset_name}_hop_{nhop}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "dropout_242": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats",
                            "Name"
                        ],
                        [
                            "spmm(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_100": {
                "start": {
                    "value": "len(teacher_probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_102": {
                "start": {
                    "value": "len(teacher_probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_128": {
                "*size": {
                    "value": "(data.num_nodes, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_148": {
                "obj": {
                    "value": "label_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "0.5 * torch.ones((data.num_nodes, num_classes), device=device)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((data.num_nodes, num_classes), device=device)",
                            "Call"
                        ],
                        [
                            "torch.load(label_emb_path)",
                            "Call"
                        ],
                        [
                            "torch.load(label_emb_path)",
                            "Call"
                        ],
                        [
                            "average_neighbor_features(data, label_emb, nhop, norm=norm, style='last')",
                            "Call"
                        ],
                        [
                            "average_neighbor_features(data, label_emb, nhop, norm=norm, style='last')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "label_emb_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'./sagn/label_emb_{dataset_name}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "save_156": {
                "obj": {
                    "value": "label_emb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "0.5 * torch.ones((data.num_nodes, num_classes), device=device)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros((data.num_nodes, num_classes), device=device)",
                            "Call"
                        ],
                        [
                            "torch.load(label_emb_path)",
                            "Call"
                        ],
                        [
                            "torch.load(label_emb_path)",
                            "Call"
                        ],
                        [
                            "average_neighbor_features(data, label_emb, nhop, norm=norm, style='last')",
                            "Call"
                        ],
                        [
                            "average_neighbor_features(data, label_emb, nhop, norm=norm, style='last')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "label_emb_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'./sagn/label_emb_{dataset_name}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/models/nn/sign.py": {
        "torch": {
            "cat_134": {
                "tensors": {
                    "value": "op_embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_155": {
                "obj": {
                    "value": "x_all.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dataset_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "f'{self.dataset_name}_{self.num_propagations}_{self.diffusion}_{adj_norm}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "load_143": {
                "f": {
                    "value": "dataset_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "f'{self.dataset_name}_{self.num_propagations}_{self.diffusion}_{adj_norm}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/models/nn/sortpool.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(src.size())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "src.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "batch_cum_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch.new_zeros(1), batch_num_nodes.cumsum(dim=0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_27": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.gnn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_101": {
                "variable": {
                    "value": "self.conv1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channel * (self.k - kernel_size + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1d(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_133": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_134": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "self.gnn_convs[i](batch, h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "batch_h",
                            "Name"
                        ],
                        [
                            "h.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1d(h)).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(h))",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch.x",
                            "Attribute"
                        ],
                        [
                            "self.gnn_convs[i](batch, h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "batch_h",
                            "Name"
                        ],
                        [
                            "h.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1d(h)).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(h))",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_126": {
                "variable": {
                    "value": "batch_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch_h, fill_batch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_117": {
                "start": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch[-1] + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "order.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/srgcn.py": {
        "torch": {
            "Parameter_14": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(num_features, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.bf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_18": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_22": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x, self.fc) + self.bf",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(h)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.weight[i])",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.adaptive_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_56": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_57": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "nl_adj_mat_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "nl_adj_mat_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "add_remaining_self_loops(edge_index, num_nodes=N)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(nl_adj_mat_ind)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_76": {
                "variable": {
                    "value": "nl_adj_mat_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nl_adj_mat_ind.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "h_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "result",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(num_features, out_feats))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(out_feats,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_147": {
                "variable": {
                    "value": "adj_mat_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_mat_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "add_remaining_self_loops(edge_index, num_nodes=N)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.stack(adj_mat_ind)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_148": {
                "variable": {
                    "value": "adj_mat_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "adj_mat_ind.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_150": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([att(graph, graph.x) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "self.out_att(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_151": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x, self.fc) + self.bf",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(h)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.weight[i])",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_173": {
                "variable": {
                    "value": "val_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "spmm(graph, val_h)",
                            "Call"
                        ],
                        [
                            "val_h + self.bias[i]",
                            "BinOp"
                        ],
                        [
                            "self.adaptive_enc[i](val_h)",
                            "Call"
                        ],
                        [
                            "self.activation(val_h)",
                            "Call"
                        ],
                        [
                            "F.dropout(val_h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "spmm(graph, val_h)",
                            "Call"
                        ],
                        [
                            "val_h + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.adaptive_enc(val_h)",
                            "Call"
                        ],
                        [
                            "F.dropout(val_h, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att(graph, graph.x) for att in self.attentions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "elu_260": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([att(graph, graph.x) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "self.out_att(graph, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(num_features, out_feats))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_85": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([att(graph, graph.x) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "self.out_att(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_88": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(x, self.fc) + self.bf",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(h)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.weight[i])",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "F.dropout(h, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_14": {
                "size": {
                    "value": "(num_features, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_21": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([att(graph, graph.x) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "self.out_att(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_25": {
                "condition": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([att(graph, graph.x) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "self.out_att(graph, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "val_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "spmm(graph, val_h)",
                            "Call"
                        ],
                        [
                            "val_h + self.bias[i]",
                            "BinOp"
                        ],
                        [
                            "self.adaptive_enc[i](val_h)",
                            "Call"
                        ],
                        [
                            "self.activation(val_h)",
                            "Call"
                        ],
                        [
                            "F.dropout(val_h, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "spmm(graph, val_h)",
                            "Call"
                        ],
                        [
                            "val_h + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.adaptive_enc(val_h)",
                            "Call"
                        ],
                        [
                            "F.dropout(val_h, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "size": {
                    "value": "(num_features, out_feats)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "size": {
                    "value": "(out_feats,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_25": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([att(graph, graph.x) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.elu(x)",
                            "Call"
                        ],
                        [
                            "self.out_att(graph, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "size": {
                    "value": "(num_features, out_feats)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "data": {
                    "value": "torch.zeros(size=(out_feats,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "size": {
                    "value": "(out_feats,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/models/nn/unsup_graphsage.py": {
        "torch": {
            "ModuleList_63": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGELayer(shapes[layer], shapes[layer + 1]) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/oag/bert_model.py": {
        "torch": {
            "tanh_60": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "bias + y",
                            "BinOp"
                        ],
                        [
                            "bias + y",
                            "BinOp"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_157": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_175": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_176": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_177": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_181": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_185": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_212": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_214": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_216": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_217": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_239": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_key_for_scores(mixed_key_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_251": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.softmax(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_263": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_298": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_336": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_404": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_406": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_422": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_73": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "bias + y",
                            "BinOp"
                        ],
                        [
                            "bias + y",
                            "BinOp"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_188": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_412": {
                "variable": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states.view(-1, hidden_states.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "masked_token_indexes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_528": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_530": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "erf_47": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_54": {
                "input": {
                    "value": "x / 1.41421",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_157": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_166": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_406": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_114": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_116": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linear_118": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/oag/dual_position_bert_model.py": {
        "torch": {
            "Embedding_16": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_18": {
                "variable": {
                    "value": "self.position_embeddings_second",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_27": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_60": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_62": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nonzero_123": {
                "variable": {
                    "value": "masked_token_indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(masked_lm_labels + 1).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_125": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_lm_labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "masked_token_indexes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nonzero((masked_lm_labels + 1).view(-1)).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_127": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/oag/oagbert.py": {
        "torch": {
            "load_75": {
                "f": {
                    "value": "model_weight_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_name_or_path, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/oag/oagbert_metainfo.py": {
        "torch": {
            "nonzero_459": {
                "variable": {
                    "value": "masked_token_indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(tensorize(masked_lm_labels) + 1).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_461": {
                "variable": {
                    "value": "prediction_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_567": {
                "variable": {
                    "value": "masked_token_indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(tensorize([_masked_lm_labels for (_, _masked_lm_labels, _, _) in q]) + 1).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_571": {
                "variable": {
                    "value": "prediction_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_715": {
                "variable": {
                    "value": "batch_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(current_total_length, current_total_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tril_719": {
                "variable": {
                    "value": "batch_attention_mask[decode_pos - current_entity_length + 1:decode_pos + 1, decode_pos - current_entity_length + 1:decode_pos + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_attention_mask[decode_pos - current_entity_length + 1:decode_pos + 1, decode_pos - current_entity_length + 1:decode_pos + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_739": {
                "variable": {
                    "value": "masked_token_indexes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(batch_masked_lm_labels + 1).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_741": {
                "variable": {
                    "value": "prediction_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_758": {
                "variable": {
                    "value": "(log_probs, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "num_beams",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_447": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_346": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_347": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_348": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_351": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_352": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_579": {
                "variable": {
                    "value": "(log_probs, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores[idx * mask_length].view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "beam_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "topk_581": {
                "variable": {
                    "value": "(log_probs, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores[idx * mask_length:(idx + 1) * mask_length].view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "beam_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_462": {
                "start": {
                    "value": "len(decode_span_token_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_483": {
                "input": {
                    "value": "prediction_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_800": {
                "input": {
                    "value": "prediction_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/operators/edge_softmax.py": {
        "torch": {
            "load_8": {
                "variable": {
                    "value": "edge_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "edge_softmax",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(path, 'edge_softmax/edge_softmax.cc'), os.path.join(path, 'edge_softmax/edge_softmax.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/operators/fused_gat.py": {
        "torch": {}
    },
    "cogdl/operators/linear.py": {
        "torch": {
            "mm_22": {
                "variable": {
                    "value": "input_rp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(input_rp, rmat.t())",
                            "Call"
                        ],
                        [
                            "dequantize_activation(quantized, q_input_shape)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rmat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(torch.bernoulli(torch.ones((D, D // rp_ratio)).to(input.device) * 0.5) * 2.0 - 1) * math.sqrt(1.0 / (D // rp_ratio))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_36": {
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(input_rp, rmat.t())",
                            "Call"
                        ],
                        [
                            "dequantize_activation(quantized, q_input_shape)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_47": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_rp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mm(input, rmat)",
                            "Call"
                        ],
                        [
                            "dequantize_activation(quantized, q_input_shape)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rmat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_19": {
                "input": {
                    "value": "torch.ones((D, D // rp_ratio)).to(input.device) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_19": {
                "*size": {
                    "value": "(D, D // rp_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/operators/mhspmm.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "mhspmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mhspmm",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(path, 'spmm/multiheadSpmm.cpp'), os.path.join(path, 'spmm/multiheadSpmm.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_15": {
                "variable": {
                    "value": "mhsddmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mhsddmm",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(path, 'spmm/multiheadSddmm.cpp'), os.path.join(path, 'spmm/multiheadSddmm.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_20": {
                "variable": {
                    "value": "mhtranspose",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mhtranspose",
                    "type": "Constant",
                    "possible_values": []
                },
                "extra_ldflags": {
                    "value": "['-lcusparse']",
                    "type": "List",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(path, 'spmm/mhTranspose.cpp'), os.path.join(path, 'spmm/mhTranspose.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_27": {
                "variable": {
                    "value": "spmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "spmm",
                    "type": "Constant",
                    "possible_values": []
                },
                "extra_ldflags": {
                    "value": "['-lcusparse']",
                    "type": "List",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(path, 'spmm/spmm.cpp'), os.path.join(path, 'spmm/spmm_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_55": {
                "variable": {
                    "value": "numlist",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "colind.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "grad_out.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/operators/ops.py": {
        "torch": {
            "zeros_6": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes, num_feats)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "deg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "msg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isinf_36": {
                "input": {
                    "value": "deg_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deg.pow(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_34": {
                "input": {
                    "value": "dst",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "dst.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "isinf_144": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((num_nodes, num_feats), dtype=data.dtype, device=data.device)",
                            "Call"
                        ],
                        [
                            "out.scatter_add_(dim=dim, index=index, src=data)",
                            "Call"
                        ],
                        [
                            "scatter_add(msg, dst, num_nodes)",
                            "Call"
                        ],
                        [
                            "scatter_add(msg, dst, num_nodes)",
                            "Call"
                        ],
                        [
                            "out * deg_inv.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "op_aggr(op2, msg, row, nnode)",
                            "Call"
                        ],
                        [
                            "src / tgt",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/operators/sample.py": {
        "torch": {
            "load_8": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sampler",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(path, 'sample/sample.cpp')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/operators/scatter_max.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "spmm_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scatter_max",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(path, 'scatter_max/scatter_max.cc'), os.path.join(path, 'scatter_max/scatter_max.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/operators/spmm.py": {
        "torch": {
            "load_12": {
                "variable": {
                    "value": "spmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "spmm",
                    "type": "Constant",
                    "possible_values": []
                },
                "extra_ldflags": {
                    "value": "['-lcusparse']",
                    "type": "List",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(path, 'spmm/spmm.cpp'), os.path.join(path, 'spmm/spmm_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_18": {
                "variable": {
                    "value": "sddmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sddmm",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(path, 'spmm/sddmm.cpp'), os.path.join(path, 'spmm/sddmm_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "spmm_cpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "spmm_cpu",
                    "type": "Constant",
                    "possible_values": []
                },
                "extra_cflags": {
                    "value": "['-fopenmp']",
                    "type": "List",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(path, 'spmm/spmm_cpu.cpp')]",
                    "type": "List",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/pipelines.py": {
        "torch": {
            "stack_87": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_247": {
                "variable": {
                    "value": "user_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "user_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(user_batch)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(user_batch).to(self.model.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_185": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack(data.edge_index)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(edge_index)",
                            "Call"
                        ],
                        [
                            "(edge_index[:, 0], edge_index[:, 1])",
                            "Tuple"
                        ],
                        [
                            "torch.from_numpy(edge_index)",
                            "Call"
                        ],
                        [
                            "(edge_index[:, 0], edge_index[:, 1])",
                            "Tuple"
                        ]
                    ]
                }
            },
            "save_221": {
                "obj": {
                    "value": "data",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dataset[0]",
                            "Subscript"
                        ],
                        [
                            "dataset[0]",
                            "Subscript"
                        ],
                        [
                            "Graph(edge_index=edge_index, edge_weight=edge_weight)",
                            "Call"
                        ],
                        [
                            "Graph(x=x, edge_index=edge_index, edge_weight=edge_weight)",
                            "Call"
                        ],
                        [
                            "kwargs['data']",
                            "Subscript"
                        ],
                        [
                            "build_recommendation_data('custom', data, val_data, test_data)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.data_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q",
                            "Name"
                        ],
                        [
                            "np.random.randn(num_nodes, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack(data.edge_index)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(edge_index)",
                            "Call"
                        ],
                        [
                            "(edge_index[:, 0], edge_index[:, 1])",
                            "Tuple"
                        ],
                        [
                            "torch.from_numpy(edge_index)",
                            "Call"
                        ],
                        [
                            "(edge_index[:, 0], edge_index[:, 1])",
                            "Tuple"
                        ]
                    ]
                }
            },
            "save_201": {
                "obj": {
                    "value": "data",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dataset[0]",
                            "Subscript"
                        ],
                        [
                            "dataset[0]",
                            "Subscript"
                        ],
                        [
                            "Graph(edge_index=edge_index, edge_weight=edge_weight)",
                            "Call"
                        ],
                        [
                            "Graph(x=x, edge_index=edge_index, edge_weight=edge_weight)",
                            "Call"
                        ],
                        [
                            "kwargs['data']",
                            "Subscript"
                        ],
                        [
                            "build_recommendation_data('custom', data, val_data, test_data)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "self.data_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/trainer/controller/data_controller.py": {
        "torch": {
            "DistributedSampler_17": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "self.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/trainer/controller/training_controller.py": {
        "torch": {
            "is_initialized_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/trainer/embed_trainer.py": {
        "torch": {
            "is_tensor_50": {
                "obj": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "next(dataset_w.on_test_wrapper())",
                            "Call"
                        ],
                        [
                            "labels.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/trainer/trainer.py": {
        "torch": {
            "device_count_239": {
                "variable": {
                    "value": "device_count",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__44": {
                "parameters": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "input": {
                    "value": "sum((p.grad.data.norm() ** 2 for p in params if p.grad is not None))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_280": {
                "variable": {
                    "value": "model_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "load_model(model_w, self.checkpoint_path).to(self.devices[0])",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(model_w).to(rank)",
                            "Call"
                        ],
                        [
                            "DistributedDataParallel(model_w, device_ids=[rank])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_30": {
                "obj": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_34": {
                "obj": {
                    "value": "batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(batch)",
                            "Call"
                        ],
                        [
                            "batch.to(device)",
                            "Call"
                        ],
                        [
                            "train_loader",
                            "Name"
                        ],
                        [
                            "move_to_device(batch, device)",
                            "Call"
                        ],
                        [
                            "val_loader",
                            "Name"
                        ],
                        [
                            "move_to_device(batch, device)",
                            "Call"
                        ],
                        [
                            "test_loader",
                            "Name"
                        ],
                        [
                            "move_to_device(batch, device)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradScaler_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_333": {
                "variable": {
                    "value": "num_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__507": {
                "parameters": {
                    "value": "model_w.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_168": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_210": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_357": {
                "variable": {
                    "value": "graph.edge_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "graph.num_edges",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_358": {
                "variable": {
                    "value": "graph.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph.train_mask, torch.zeros(n_inject, dtype=bool, device=rank))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "graph.val_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph.val_mask, torch.zeros(n_inject, dtype=bool, device=rank))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_360": {
                "variable": {
                    "value": "graph.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph.test_mask, torch.zeros(n_inject, dtype=bool, device=rank))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "graph.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph.y, torch.zeros(n_inject, device=rank))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_457": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_159": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "autocast_494": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_350": {
                "input": {
                    "value": "int(num_train * 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_358": {
                "*size": {
                    "value": "n_inject",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph_attack.num_nodes - graph.num_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_359": {
                "*size": {
                    "value": "n_inject",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph_attack.num_nodes - graph.num_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_360": {
                "*size": {
                    "value": "n_inject",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph_attack.num_nodes - graph.num_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "bool",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_361": {
                "*size": {
                    "value": "n_inject",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph_attack.num_nodes - graph.num_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_350": {
                "condition": {
                    "value": "graph0.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/trainer/trainer_utils.py": {
        "torch": {
            "save_55": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_60": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x[key] for x in outputs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/utils/graph_utils.py": {
        "torch": {
            "ones_14": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "col.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "indices.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "max(row.max().item(), col.max().item()) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(edge_index) + 1",
                            "BinOp"
                        ],
                        [
                            "max(row.max().item(), col.max().item()) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(edge_index) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.stack(row, col)).item() + 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.stack([row, col])).item() + 1",
                            "BinOp"
                        ],
                        [
                            "indptr.shape[0] - 1",
                            "BinOp"
                        ],
                        [
                            "indptr.size(0) - 1",
                            "BinOp"
                        ],
                        [
                            "len(torch.unique(edge_index))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "indices.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_31": {
                "variable": {
                    "value": "self_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "fill_value",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "edge_weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_32": {
                "variable": {
                    "value": "loop_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_nodes",
                            "Name"
                        ],
                        [
                            "num_nodes",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "row.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "indices.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_33": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, loop_index]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[col, loop_index]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_weight, self_weight]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_54": {
                "variable": {
                    "value": "loop_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_nodes",
                            "Name"
                        ],
                        [
                            "num_nodes",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "row.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "row.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row[mask], loop_index[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[col[mask], loop_index[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_63": {
                "variable": {
                    "value": "loop_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "fill_value",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "edge_weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_weight[mask], loop_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_98": {
                "variable": {
                    "value": "sorted_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "indptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "indices.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unique_105": {
                "variable": {
                    "value": "(elements, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "row",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([row, loop_index])",
                            "Call"
                        ],
                        [
                            "edge_index[0]",
                            "Subscript"
                        ],
                        [
                            "row.long().cpu()",
                            "Call"
                        ],
                        [
                            "row.long().cpu()",
                            "Call"
                        ],
                        [
                            "torch.arange(num_nodes, device=indptr.device)",
                            "Call"
                        ],
                        [
                            "row.repeat_interleave(row_count)",
                            "Call"
                        ],
                        [
                            "row[mask]",
                            "Subscript"
                        ],
                        [
                            "row.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(row[indices]).long().to(device)",
                            "Call"
                        ],
                        [
                            "row[mask]",
                            "Subscript"
                        ],
                        [
                            "selected // num_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "return_counts": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bincount_146": {
                "variable": {
                    "value": "indptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "row",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([row, loop_index])",
                            "Call"
                        ],
                        [
                            "edge_index[0]",
                            "Subscript"
                        ],
                        [
                            "row.long().cpu()",
                            "Call"
                        ],
                        [
                            "row.long().cpu()",
                            "Call"
                        ],
                        [
                            "torch.arange(num_nodes, device=indptr.device)",
                            "Call"
                        ],
                        [
                            "row.repeat_interleave(row_count)",
                            "Call"
                        ],
                        [
                            "row[mask]",
                            "Subscript"
                        ],
                        [
                            "row.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(row[indices]).long().to(device)",
                            "Call"
                        ],
                        [
                            "row[mask]",
                            "Subscript"
                        ],
                        [
                            "selected // num_nodes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "indptr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "indptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero, indptr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_170": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "indices.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_171": {
                "variable": {
                    "value": "col_indptr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.indptr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "indices.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_172": {
                "variable": {
                    "value": "row_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "indices.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_178": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_nodes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "max(row.max().item(), col.max().item()) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(edge_index) + 1",
                            "BinOp"
                        ],
                        [
                            "max(row.max().item(), col.max().item()) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(edge_index) + 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.stack(row, col)).item() + 1",
                            "BinOp"
                        ],
                        [
                            "torch.max(torch.stack([row, col])).item() + 1",
                            "BinOp"
                        ],
                        [
                            "indptr.shape[0] - 1",
                            "BinOp"
                        ],
                        [
                            "indptr.size(0) - 1",
                            "BinOp"
                        ],
                        [
                            "len(torch.unique(edge_index))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "indptr.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "row[indices]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "col[indices]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_205": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_236": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_259": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.isin(sample_result, unique_pair.to('cpu'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_24": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_index[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_45": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "row.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "indices.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_75": {
                "variable": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "row.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "edge_index[0].device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ],
                        [
                            "indices.device",
                            "Attribute"
                        ],
                        [
                            "row.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_85": {
                "variable": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "row.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_196": {
                "obj": {
                    "value": "row",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([row, loop_index])",
                            "Call"
                        ],
                        [
                            "edge_index[0]",
                            "Subscript"
                        ],
                        [
                            "row.long().cpu()",
                            "Call"
                        ],
                        [
                            "row.long().cpu()",
                            "Call"
                        ],
                        [
                            "torch.arange(num_nodes, device=indptr.device)",
                            "Call"
                        ],
                        [
                            "row.repeat_interleave(row_count)",
                            "Call"
                        ],
                        [
                            "row[mask]",
                            "Subscript"
                        ],
                        [
                            "row.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(row[indices]).long().to(device)",
                            "Call"
                        ],
                        [
                            "row[mask]",
                            "Subscript"
                        ],
                        [
                            "selected // num_nodes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_tensor_198": {
                "obj": {
                    "value": "col",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([col, loop_index])",
                            "Call"
                        ],
                        [
                            "col.long().cpu()",
                            "Call"
                        ],
                        [
                            "col.long().cpu()",
                            "Call"
                        ],
                        [
                            "col[mask]",
                            "Subscript"
                        ],
                        [
                            "col.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(col[indices]).long().to(device)",
                            "Call"
                        ],
                        [
                            "col[mask]",
                            "Subscript"
                        ],
                        [
                            "selected % num_nodes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "row.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_264": {
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isinf_78": {
                "input": {
                    "value": "row_sum_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "row_sum.pow(-1).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_234": {
                "tensors": {
                    "value": "[col, row]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_26": {
                "input": {
                    "value": "edge_index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([row, col])",
                            "Call"
                        ],
                        [
                            "edge_index[:, sorted_index]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([row, col])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_96": {
                "input": {
                    "value": "edge_index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([row, col])",
                            "Call"
                        ],
                        [
                            "edge_index[:, sorted_index]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([row, col])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_122": {
                "input": {
                    "value": "torch.stack(row, col)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_124": {
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_135": {
                "input": {
                    "value": "torch.stack([row, col])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_137": {
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_151": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "row.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_247": {
                "input": {
                    "value": "edge_index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([row, col])",
                            "Call"
                        ],
                        [
                            "edge_index[:, sorted_index]",
                            "Subscript"
                        ],
                        [
                            "torch.stack([row, col])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_122": {
                "tensors": {
                    "value": "row",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([row, loop_index])",
                            "Call"
                        ],
                        [
                            "edge_index[0]",
                            "Subscript"
                        ],
                        [
                            "row.long().cpu()",
                            "Call"
                        ],
                        [
                            "row.long().cpu()",
                            "Call"
                        ],
                        [
                            "torch.arange(num_nodes, device=indptr.device)",
                            "Call"
                        ],
                        [
                            "row.repeat_interleave(row_count)",
                            "Call"
                        ],
                        [
                            "row[mask]",
                            "Subscript"
                        ],
                        [
                            "row.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(row[indices]).long().to(device)",
                            "Call"
                        ],
                        [
                            "row[mask]",
                            "Subscript"
                        ],
                        [
                            "selected // num_nodes",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "col",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([col, loop_index])",
                            "Call"
                        ],
                        [
                            "col.long().cpu()",
                            "Call"
                        ],
                        [
                            "col.long().cpu()",
                            "Call"
                        ],
                        [
                            "col[mask]",
                            "Subscript"
                        ],
                        [
                            "col.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(col[indices]).long().to(device)",
                            "Call"
                        ],
                        [
                            "col[mask]",
                            "Subscript"
                        ],
                        [
                            "selected % num_nodes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_135": {
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/utils/grb_utils.py": {
        "torch": {
            "tensor_63": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "row",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(row, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "col",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(col, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_65": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Graph(x=features, y=labels, edge_index=edge_index, edge_attr=edge_attr).to(device)",
                            "Call"
                        ],
                        [
                            "Graph(x=features, y=labels, edge_index=edge_index, edge_attr=edge_attr, grb_adj=adj).to(device)",
                            "Call"
                        ],
                        [
                            "adj.data",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "sparse_row",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_92": {
                "variable": {
                    "value": "sparse_col",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "sparse_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sparse_row, sparse_col)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_474": {
                "variable": {
                    "value": "x_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "torch.FloatTensor(features)",
                            "Call"
                        ],
                        [
                            "features.float()",
                            "Call"
                        ],
                        [
                            "feat_normalize(features, norm=feat_norm)",
                            "Call"
                        ],
                        [
                            "features.to(device)",
                            "Call"
                        ],
                        [
                            "feat_preprocess(features, feat_norm=feat_norm, device=device)",
                            "Call"
                        ],
                        [
                            "features * x_rev.unsqueeze(-1).expand_as(features)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_337": {
                "variable": {
                    "value": "d_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rowsum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(adj.sum(1))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(adj, torch.ones((adj.shape[0], 1), device=adj.device)) + 1",
                            "BinOp"
                        ],
                        [
                            "adj.sum(1)",
                            "Call"
                        ],
                        [
                            "np.array(adj.sum(1))",
                            "Call"
                        ],
                        [
                            "np.array(adj.sum(1))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(adj, torch.ones((adj.shape[0], 1), device=adj.device)) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "order",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-0.5",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_337": {
                "variable": {
                    "value": "d_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_340": {
                "variable": {
                    "value": "self_loop_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(adj.shape[0], device=adj.device), torch.arange(adj.shape[0], device=adj.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_343": {
                "variable": {
                    "value": "self_loop_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self_loop_idx[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "adj.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_344": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self_loop_idx, adj.indices())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_345": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self_loop_val, adj.values())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_392": {
                "variable": {
                    "value": "d_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rowsum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(adj.sum(1))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(adj, torch.ones((adj.shape[0], 1), device=adj.device)) + 1",
                            "BinOp"
                        ],
                        [
                            "adj.sum(1)",
                            "Call"
                        ],
                        [
                            "np.array(adj.sum(1))",
                            "Call"
                        ],
                        [
                            "np.array(adj.sum(1))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(adj, torch.ones((adj.shape[0], 1), device=adj.device)) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "order",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-0.5",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_392": {
                "variable": {
                    "value": "d_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_394": {
                "variable": {
                    "value": "d_mat_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_432": {
                "variable": {
                    "value": "d_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rowsum",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(adj.sum(1))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(adj, torch.ones((adj.shape[0], 1), device=adj.device)) + 1",
                            "BinOp"
                        ],
                        [
                            "adj.sum(1)",
                            "Call"
                        ],
                        [
                            "np.array(adj.sum(1))",
                            "Call"
                        ],
                        [
                            "np.array(adj.sum(1))",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(adj, torch.ones((adj.shape[0], 1), device=adj.device)) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "order",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-0.5",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_432": {
                "variable": {
                    "value": "d_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_435": {
                "variable": {
                    "value": "self_loop_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.arange(adj.shape[0], device=adj.device), torch.arange(adj.shape[0], device=adj.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_438": {
                "variable": {
                    "value": "self_loop_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self_loop_idx[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "adj.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_439": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self_loop_idx, adj.indices())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self_loop_val, adj.values())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_476": {
                "input": {
                    "value": "x_rev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_sum.pow(-1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_477": {
                "input": {
                    "value": "x_rev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_sum.pow(-1).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_336": {
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.grb_adj",
                            "Attribute"
                        ],
                        [
                            "sp.csr_matrix((edge_attr, edge_index), shape=[graph.num_nodes, graph.num_nodes])",
                            "Call"
                        ],
                        [
                            "adj.tocoo()",
                            "Call"
                        ],
                        [
                            "adj_norm_func(adj)",
                            "Call"
                        ],
                        [
                            "[adj_to_tensor(adj_[mask][:, mask]).to(device) if type(adj_) != torch.Tensor else adj_[mask][:, mask].to(device) for adj_ in adj]",
                            "ListComp"
                        ],
                        [
                            "[adj_to_tensor(adj_).to(device) if type(adj_) != torch.Tensor else adj_.to(device) for adj_ in adj]",
                            "ListComp"
                        ],
                        [
                            "adj_to_tensor(adj[mask][:, mask]).to(device)",
                            "Call"
                        ],
                        [
                            "adj_to_tensor(adj).to(device)",
                            "Call"
                        ],
                        [
                            "adj[mask][:, mask].to(device)",
                            "Call"
                        ],
                        [
                            "adj.to(device)",
                            "Call"
                        ],
                        [
                            "adj_preprocess(adj, adj_norm_func=adj_norm_func, device=device)",
                            "Call"
                        ],
                        [
                            "sp.eye(adj.shape[0]) + adj",
                            "BinOp"
                        ],
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "d_mat_inv @ adj @ d_mat_inv",
                            "BinOp"
                        ],
                        [
                            "torch.sparse.FloatTensor(indices, values, adj.shape).coalesce()",
                            "Call"
                        ],
                        [
                            "sp.eye(adj.shape[0]) + adj",
                            "BinOp"
                        ],
                        [
                            "torch.eye(adj.shape[0]).to(adj.device) + adj",
                            "BinOp"
                        ],
                        [
                            "d_mat_inv @ adj",
                            "BinOp"
                        ],
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "d_mat_inv @ adj",
                            "BinOp"
                        ],
                        [
                            "sp.eye(adj.shape[0]) + adj",
                            "BinOp"
                        ],
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "d_mat_inv @ adj @ d_mat_inv",
                            "BinOp"
                        ],
                        [
                            "torch.sparse.FloatTensor(indices, values, adj.shape).coalesce()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones((adj.shape[0], 1), device=adj.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_338": {
                "input": {
                    "value": "d_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_390": {
                "n": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isinf_393": {
                "input": {
                    "value": "d_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_431": {
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.grb_adj",
                            "Attribute"
                        ],
                        [
                            "sp.csr_matrix((edge_attr, edge_index), shape=[graph.num_nodes, graph.num_nodes])",
                            "Call"
                        ],
                        [
                            "adj.tocoo()",
                            "Call"
                        ],
                        [
                            "adj_norm_func(adj)",
                            "Call"
                        ],
                        [
                            "[adj_to_tensor(adj_[mask][:, mask]).to(device) if type(adj_) != torch.Tensor else adj_[mask][:, mask].to(device) for adj_ in adj]",
                            "ListComp"
                        ],
                        [
                            "[adj_to_tensor(adj_).to(device) if type(adj_) != torch.Tensor else adj_.to(device) for adj_ in adj]",
                            "ListComp"
                        ],
                        [
                            "adj_to_tensor(adj[mask][:, mask]).to(device)",
                            "Call"
                        ],
                        [
                            "adj_to_tensor(adj).to(device)",
                            "Call"
                        ],
                        [
                            "adj[mask][:, mask].to(device)",
                            "Call"
                        ],
                        [
                            "adj.to(device)",
                            "Call"
                        ],
                        [
                            "adj_preprocess(adj, adj_norm_func=adj_norm_func, device=device)",
                            "Call"
                        ],
                        [
                            "sp.eye(adj.shape[0]) + adj",
                            "BinOp"
                        ],
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "d_mat_inv @ adj @ d_mat_inv",
                            "BinOp"
                        ],
                        [
                            "torch.sparse.FloatTensor(indices, values, adj.shape).coalesce()",
                            "Call"
                        ],
                        [
                            "sp.eye(adj.shape[0]) + adj",
                            "BinOp"
                        ],
                        [
                            "torch.eye(adj.shape[0]).to(adj.device) + adj",
                            "BinOp"
                        ],
                        [
                            "d_mat_inv @ adj",
                            "BinOp"
                        ],
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "d_mat_inv @ adj",
                            "BinOp"
                        ],
                        [
                            "sp.eye(adj.shape[0]) + adj",
                            "BinOp"
                        ],
                        [
                            "sp.coo_matrix(adj)",
                            "Call"
                        ],
                        [
                            "d_mat_inv @ adj @ d_mat_inv",
                            "BinOp"
                        ],
                        [
                            "torch.sparse.FloatTensor(indices, values, adj.shape).coalesce()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.ones((adj.shape[0], 1), device=adj.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isinf_433": {
                "input": {
                    "value": "d_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "np.power(rowsum, order).flatten()",
                            "Call"
                        ],
                        [
                            "torch.pow(rowsum, order).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_336": {
                "*size": {
                    "value": "(adj.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "adj.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_341": {
                "start": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "adj.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_431": {
                "*size": {
                    "value": "(adj.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "adj.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_436": {
                "start": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "adj.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_258": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/utils/index.py": {
        "torch": {
            "no_grad_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_15": {
                "input": {
                    "value": "diff",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(x - neighbors).norm(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "diff.mean(1)",
                            "Call"
                        ],
                        [
                            "diff[~isolated_nodes]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_41": {
                "input": {
                    "value": "dis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out * deg_inv",
                            "BinOp"
                        ],
                        [
                            "dis[dis > 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "isinf_38": {
                "input": {
                    "value": "deg_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deg.pow(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/utils/link_prediction_utils.py": {
        "torch": {
            "stack_151": {
                "variable": {
                    "value": "sampled_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_153": {
                "variable": {
                    "value": "sampled_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sampled_edges",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([row, col])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_179": {
                "variable": {
                    "value": "sampled_edges_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sampled_edges, _edge_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "edge_types_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_types[selected_edges], _edge_types)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * num_sampled_edges + [0] * _edge_index.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_188": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(scoring.predict(embedding[heads[start:end]], embedding, rel_embedding[rels[start:end]]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_filter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_51": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.hidden_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_54": {
                "variable": {
                    "value": "self.hidden_drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.feature_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.flat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "ent_rel",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ent, rel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.hidden_drop2(h))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_83": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h * obj_emb + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.concat(sub_emb, rel_emb)",
                            "Call"
                        ],
                        [
                            "self.bn0(h)",
                            "Call"
                        ],
                        [
                            "self.conv(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "self.feature_drop(h)",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.flat_size)",
                            "Call"
                        ],
                        [
                            "self.hidden_drop(self.fc(h))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.hidden_drop2(h)))",
                            "Call"
                        ],
                        [
                            "self.concat(sub_emb, rel_emb)",
                            "Call"
                        ],
                        [
                            "self.bn0(h)",
                            "Call"
                        ],
                        [
                            "self.conv(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(h))",
                            "Call"
                        ],
                        [
                            "h.view(-1, self.flat_size)",
                            "Call"
                        ],
                        [
                            "self.fc(h)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(h))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "obj_emb.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_115": {
                "variable": {
                    "value": "prediction_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scoring(head_embed, tail_embed, rel_embed)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_200": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scoring.predict(embedding[heads[start:end]], embedding, rel_embedding[rels[start:end]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "sub_emb * obj_emb * rel_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "input": {
                    "value": "sub_emb * rel_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "obj_emb.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "edge_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edge_index[0], edge_index[1], edge_types)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "list(corrupt_triplets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_184": {
                "ndarray": {
                    "value": "rels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "edge_types[selected_edges].cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_cache_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_121": {
                "input": {
                    "value": "emb.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/utils/optimizer.py": {
        "torch": {}
    },
    "cogdl/utils/ppr_utils.py": {
        "torch": {}
    },
    "cogdl/utils/sampling.py": {
        "torch": {
            "max_55": {
                "input": {
                    "value": "adj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "adj.tocsr()",
                            "Call"
                        ],
                        [
                            "sp.csr_matrix((data, (row, col)), shape=(num_nodes, num_nodes))",
                            "Call"
                        ],
                        [
                            "adj.tocsr()",
                            "Call"
                        ],
                        [
                            "sp.csr_matrix((data, (row, col)), shape=(num_nodes, num_nodes))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/utils/spmm_utils.py": {
        "torch": {
            "zeros_like_51": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_163": {
                "variable": {
                    "value": "edge_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "edge_val - edge_val / 2",
                            "BinOp"
                        ],
                        [
                            "torch.exp(edge_val)",
                            "Call"
                        ],
                        [
                            "edge_val.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_165": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "graph.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_prime",
                    "type": "Name",
                    "possible_values": [
                        [
                            "csrmhspmm(graph.row_indptr.int(), graph.col_indices.int(), h, attention)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph.grb_adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spmm_scatter(row, col, graph.edge_weight, x)",
                            "Call"
                        ],
                        [
                            "graph.out_norm * x",
                            "BinOp"
                        ],
                        [
                            "fast_spmm_cpu(row_ptr.int(), col_indices.int(), csr_data, x)",
                            "Call"
                        ],
                        [
                            "graph.in_norm * x",
                            "BinOp"
                        ],
                        [
                            "torch.sparse.mm(graph.grb_adj, x)",
                            "Call"
                        ],
                        [
                            "torch.mm(graph.grb_adj, x)",
                            "Call"
                        ],
                        [
                            "graph.out_norm * x",
                            "BinOp"
                        ],
                        [
                            "spmm_scatter(row, col, graph.edge_weight, x)",
                            "Call"
                        ],
                        [
                            "fast_spmm(row_ptr.int(), col_indices.int(), x, csr_data, graph.is_symmetric(), actnn=actnn)",
                            "Call"
                        ],
                        [
                            "graph.out_norm * x",
                            "BinOp"
                        ],
                        [
                            "fast_spmm_cpu(row_ptr.int(), col_indices.int(), csr_data, x)",
                            "Call"
                        ],
                        [
                            "graph.in_norm * x",
                            "BinOp"
                        ],
                        [
                            "graph.in_norm * x",
                            "BinOp"
                        ],
                        [
                            "torch.ones(graph.num_nodes, 1).to(edge_val.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph.grb_adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spmm_scatter(row, col, graph.edge_weight, x)",
                            "Call"
                        ],
                        [
                            "graph.out_norm * x",
                            "BinOp"
                        ],
                        [
                            "fast_spmm_cpu(row_ptr.int(), col_indices.int(), csr_data, x)",
                            "Call"
                        ],
                        [
                            "graph.in_norm * x",
                            "BinOp"
                        ],
                        [
                            "torch.sparse.mm(graph.grb_adj, x)",
                            "Call"
                        ],
                        [
                            "torch.mm(graph.grb_adj, x)",
                            "Call"
                        ],
                        [
                            "graph.out_norm * x",
                            "BinOp"
                        ],
                        [
                            "spmm_scatter(row, col, graph.edge_weight, x)",
                            "Call"
                        ],
                        [
                            "fast_spmm(row_ptr.int(), col_indices.int(), x, csr_data, graph.is_symmetric(), actnn=actnn)",
                            "Call"
                        ],
                        [
                            "graph.out_norm * x",
                            "BinOp"
                        ],
                        [
                            "fast_spmm_cpu(row_ptr.int(), col_indices.int(), csr_data, x)",
                            "Call"
                        ],
                        [
                            "graph.in_norm * x",
                            "BinOp"
                        ],
                        [
                            "graph.in_norm * x",
                            "BinOp"
                        ],
                        [
                            "torch.ones(graph.num_nodes, 1).to(edge_val.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_188": {
                "tensors": {
                    "value": "val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "csr_edge_softmax(graph.row_indptr.int(), edge_val)",
                            "Call"
                        ],
                        [
                            "val.view(-1)",
                            "Call"
                        ],
                        [
                            "csr_edge_softmax(graph.row_indptr.int(), edge_val)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_223": {
                "input": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "any_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/utils/srgcn_utils.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_27": {
                "variable": {
                    "value": "diag_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag_val",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.p(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(diag_val)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "p_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "q_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.q(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_87": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "deg_inv[row] * edge_attr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(N, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_88": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[range(N)] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "torch.ones(N)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(N, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "ivs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ivs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[iv(i, self.theta) for i in range(self.steps)]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(ivs).to(x.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_coo_tensor_126": {
                "variable": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_attr_t",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "deg_inv[row] * edge_attr",
                            "BinOp"
                        ],
                        [
                            "deg_inv_sqrt[row] * edge_attr * deg_inv_sqrt[col]",
                            "BinOp"
                        ],
                        [
                            "deg_inv_sqrt[row] * edge_attr * deg_inv_sqrt[col]",
                            "BinOp"
                        ],
                        [
                            "self.t * edge_attr * deg_inv[col] - self.t",
                            "BinOp"
                        ],
                        [
                            "row * edge_attr",
                            "BinOp"
                        ],
                        [
                            "torch.exp(edge_attr)",
                            "Call"
                        ],
                        [
                            "row * edge_attr_t",
                            "BinOp"
                        ],
                        [
                            "col * edge_attr",
                            "BinOp"
                        ],
                        [
                            "row * edge_attr * col",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(N, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_138": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[range(N)] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "torch.ones(N)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(N, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_197": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "exp_211": {
                "variable": {
                    "value": "edge_attr_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_212": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_226": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_240": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ],
                        [
                            "edge_attr.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_136": {
                "indices": {
                    "value": "adj_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "adj_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(N, N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_138": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/utils/transform.py": {
        "torch": {
            "full_58": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(row.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1 - drop_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "row.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_59": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.full((row.shape[0],), 1 - drop_rate, dtype=torch.float, device=row.device)",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(mask).to(torch.bool)",
                            "Call"
                        ],
                        [
                            "self_loop | mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bernoulli_73": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - drop_rates",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bernoulli_84": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - drop_rates",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_49": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_index[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "n",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_82": {
                "*size": {
                    "value": "n",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/utils/utils.py": {
        "torch": {
            "arange_188": {
                "variable": {
                    "value": "arr[-shift:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "shift",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(torch.max(batch.cpu())) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_200": {
                "variable": {
                    "value": "(values, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_201": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(values)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "memory_allocated_280": {
                "variable": {
                    "value": "allocated",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "memory_reserved_281": {
                "variable": {
                    "value": "reserved",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_40": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_42": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_177": {
                "normalized_shape": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_187": {
                "start": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_211": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "len(batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_179": {
                "num_features": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_193": {
                "input": {
                    "value": "batch.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InstanceNorm1d_181": {
                "num_features": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GELU_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/data_wrapper/base_data_wrapper.py": {
        "torch": {}
    },
    "cogdl/wrappers/data_wrapper/graph_classification/patchy_san_dw.py": {
        "torch": {
            "from_numpy_30": {
                "variable": {
                    "value": "dataset[i].x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_feature",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_single_feature(dataset[i], num_features, num_classes, self.sample, self.neighbor, self.stride)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/wrappers/data_wrapper/link_prediction/embedding_link_prediction_dw.py": {
        "torch": {
            "from_numpy_40": {
                "variable": {
                    "value": "train_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_edges",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(train_edges).transpose()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train_edges)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/wrappers/data_wrapper/link_prediction/gnn_link_prediction_dw.py": {
        "torch": {
            "randperm_41": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_edges",
                    "type": "Name",
                    "possible_values": [
                        [
                            "row.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "val_false_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_index_false[:, 0:num_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "test_fal_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_index_false[:, num_val:num_test + num_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_81": {
                "variable": {
                    "value": "val_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_rows[0], sampled_cols[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_82": {
                "variable": {
                    "value": "test_edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_rows[1], sampled_cols[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "_edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_row, _col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_77": {
                "variable": {
                    "value": "_r_edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_col, _row]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "[_edge_index, _r_edge_index]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/data_wrapper/node_classification/m3s_dw.py": {
        "torch": {
            "full_38": {
                "variable": {
                    "value": "data.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(data.train_mask.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_32": {
                "condition": {
                    "value": "data.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_52": {
                "condition": {
                    "value": "data.y == i",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/data_wrapper/node_classification/pprgo_dw.py": {
        "torch": {
            "DataLoader_61": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ppr_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.BatchSampler(torch.utils.data.SequentialSampler(ppr_dataset), batch_size=batch_size, drop_last=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_75": {
                "variable": {
                    "value": "nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "ppr_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample_matrix.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchSampler_63": {
                "sampler": {
                    "value": "torch.utils.data.SequentialSampler(ppr_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SequentialSampler_64": {
                "data_source": {
                    "value": "ppr_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/data_wrapper/node_classification/sagn_dw.py": {
        "torch": {
            "cat_46": {
                "variable": {
                    "value": "all_nid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[train_nid, val_nid, test_nid]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_x",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[x[batch] for x in self.multihop_feats]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(batch_x)",
                            "Call"
                        ],
                        [
                            "[x[batch] for x in self.multihop_feats]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(batch_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_67": {
                "variable": {
                    "value": "batch_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_x",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[x[batch] for x in self.multihop_feats]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(batch_x)",
                            "Call"
                        ],
                        [
                            "[x[batch] for x in self.multihop_feats]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(batch_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_33": {
                "dataset": {
                    "value": "self.train_nid_with_pseudos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "dataset": {
                    "value": "val_nid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dataset.data.val_nid",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "dataset": {
                    "value": "test_nid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dataset.data.test_nid",
                            "Attribute"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "dataset": {
                    "value": "all_nid.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/base_model_wrapper.py": {
        "torch": {}
    },
    "cogdl/wrappers/model_wrapper/clustering/gae_mw.py": {
        "torch": {
            "sparse_coo_tensor_41": {
                "variable": {
                    "value": "adj_mx",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "torch.stack(data.edge_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "torch.ones(data.edge_index[0].shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "torch.Size([data.x.shape[0], data.x.shape[0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_50": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_42": {
                "tensors": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_43": {
                "*size": {
                    "value": "data.edge_index[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/graph_classification/graph_classification_mw.py": {
        "torch": {
            "Adam_40": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/graph_classification/graph_embedding_mw.py": {
        "torch": {}
    },
    "cogdl/wrappers/model_wrapper/graph_classification/infograph_mw.py": {
        "torch": {
            "MSELoss_31": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds).cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.model.sup_forward(batch, batch.x)",
                            "Call"
                        ],
                        [
                            "F.softmax(pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "pos_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes, num_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_82": {
                "variable": {
                    "value": "neg_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes, num_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_86": {
                "variable": {
                    "value": "glob_local_mi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_encode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.local_dis(node_feat)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "global_encode.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "params": {
                    "value": "[{'params': self.model.parameters()}, {'params': self.global_dis.parameters()}, {'params': self.local_dis.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_124": {
                "input": {
                    "value": "self.block(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_95": {
                "input": {
                    "value": "-pos_mi",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_96": {
                "input": {
                    "value": "-neg_mi",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/heterogeneous/heterogeneous_gnn_mw.py": {
        "torch": {
            "Adam_42": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/link_prediction/gnn_kg_link_prediction_mw.py": {
        "torch": {
            "stack_33": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamW_76": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/correct_smooth_mw.py": {
        "torch": {}
    },
    "cogdl/wrappers/model_wrapper/node_classification/dgi_mw.py": {
        "torch": {
            "Sigmoid_22": {
                "variable": {
                    "value": "self.sigm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_27": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_28": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes * 2,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bilinear_87": {
                "variable": {
                    "value": "self.f_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "n_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "n_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_99": {
                "variable": {
                    "value": "c_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.read(h_pos)",
                            "Call"
                        ],
                        [
                            "self.sigm(c)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "sc_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h_pl, c_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "sc_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h_mi, c_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sc_1, sc_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_67": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_78": {
                "input": {
                    "value": "seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(seq.shape) - 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_80": {
                "input": {
                    "value": "msk",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/gcnmix_mw.py": {
        "torch": {
            "zeros_143": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(torch.max(labels) + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_150": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.pow(prob, 1.0 / temperature)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1.0 / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_151": {
                "variable": {
                    "value": "row_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.pow(prob, 1.0 / temperature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "row_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_49": {
                "variable": {
                    "value": "self.mix_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "temp_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "vector_labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vector_labels.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randint_115": {
                "variable": {
                    "value": "sampled_unlabelled",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "train_unlabelled.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(train_index.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_138": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.optimizer_cfg['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.optimizer_cfg['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sigmoid_55": {
                "variable": {
                    "value": "self.mix_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_57": {
                "variable": {
                    "value": "self.mix_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_142": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_106": {
                "condition": {
                    "value": "~data.train_mask",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/grace_mw.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.project_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, proj_hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_65": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.prop(graph, graph.x, self.drop_feature_rates[0], self.drop_edge_rates[0])",
                            "Call"
                        ],
                        [
                            "self.project_head(z1)",
                            "Call"
                        ],
                        [
                            "F.normalize(z1, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_66": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.prop(graph, graph.x, self.drop_feature_rates[1], self.drop_edge_rates[1])",
                            "Call"
                        ],
                        [
                            "self.project_head(z2)",
                            "Call"
                        ],
                        [
                            "F.normalize(z2, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_86": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "emb2.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_70": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_77": {
                "input": {
                    "value": "_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-torch.log(intro_scores.diag() / (intro_scores.sum(1) - intro_scores.diag() + inter_scores.sum(1)))",
                            "UnaryOp"
                        ],
                        [
                            "self.contrastive_loss(z1[train_indices], z2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_95": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "proj_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimizer_cfg['hidden_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ELU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_76": {
                "input": {
                    "value": "intro_scores.diag() / (intro_scores.sum(1) - intro_scores.diag() + inter_scores.sum(1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/grand_mw.py": {
        "torch": {
            "mean_59": {
                "input": {
                    "value": "(p - sharp_p).pow(2).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_42": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_44": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_51": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ps",
                            "Name"
                        ],
                        [
                            "ps",
                            "Name"
                        ]
                    ]
                }
            },
            "pow_56": {
                "input": {
                    "value": "avg_p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sum_p / len(ps)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1.0 / temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "torch.pow(avg_p, 1.0 / temp)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/graphsage_mw.py": {
        "torch": {
            "Adam_44": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/mvgrl_mw.py": {
        "torch": {
            "BCEWithLogitsLoss_13": {
                "variable": {
                    "value": "self.loss_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_18": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(graph)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_33": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/node_classification_mw.py": {
        "torch": {
            "Adam_46": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/pprgo_mw.py": {
        "torch": {
            "Adam_55": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/sagn_mw.py": {
        "torch": {
            "cat_53": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_58": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/node_classification/unsup_graphsage_mw.py": {
        "torch": {
            "from_numpy_38": {
                "variable": {
                    "value": "self.negative_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.choice(self.num_nodes, (self.num_nodes, self.num_negative_samples))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.optimizer_cfg",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_34": {
                "data": {
                    "value": "walk_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.random_walker.walk(start=torch.arange(0, x.shape[0]).to(device), walk_length=self.walk_length + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_42": {
                "input": {
                    "value": "torch.sigmoid(torch.sum(x.unsqueeze(1).repeat(1, self.walk_length, 1) * x[self.walk_res], dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_45": {
                "input": {
                    "value": "torch.sigmoid(-torch.sum(x.unsqueeze(1).repeat(1, self.num_negative_samples, 1) * x[self.negative_samples], dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_32": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_43": {
                "input": {
                    "value": "torch.sum(x.unsqueeze(1).repeat(1, self.walk_length, 1) * x[self.walk_res], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_46": {
                "input": {
                    "value": "-torch.sum(x.unsqueeze(1).repeat(1, self.num_negative_samples, 1) * x[self.negative_samples], dim=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "x.unsqueeze(1).repeat(1, self.walk_length, 1) * x[self.walk_res]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "x.unsqueeze(1).repeat(1, self.num_negative_samples, 1) * x[self.negative_samples]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/model_wrapper/pretraining/gcc_mw.py": {
        "torch": {
            "load_112": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.model.parameters()}, {'params': self.linear.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cfg['weight_decay']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_109": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'model': self.model.state_dict(), 'contrast': self.contrast.state_dict(), 'model_ema': self.model_ema.state_dict()}",
                            "Dict"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cogdl/wrappers/tools/memory_moco.py": {
        "torch": {
            "bmm_31": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(batchSize, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k.view(batchSize, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_35": {
                "variable": {
                    "value": "l_neg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queue.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_pos, l_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_69": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[bsz]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_41": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_44": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.div(out, self.T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_50": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.params[0].item()",
                            "Call"
                        ],
                        [
                            "self.params[0].clone().detach().item()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_50": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_54": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchSize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "out.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fmod_56": {
                "variable": {
                    "value": "out_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_ids",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(batchSize, device=out.device)",
                            "Call"
                        ],
                        [
                            "out_ids + self.index",
                            "BinOp"
                        ],
                        [
                            "torch.fmod(out_ids, self.queueSize)",
                            "Call"
                        ],
                        [
                            "out_ids.long()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_21": {
                "*size": {
                    "value": "self.queueSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "inputSize",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_44": {
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((l_pos, l_neg), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.div(out, self.T)",
                            "Call"
                        ],
                        [
                            "out.squeeze().contiguous()",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.div(out, self.T))",
                            "Call"
                        ],
                        [
                            "torch.div(out, Z).squeeze().contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "docs/source/examples/1graph.py": {
        "torch": {
            "tensor_12": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 3], [2, 1], [4, 2], [0, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_12": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_13": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-1], [0], [1], [2], [3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_25": {
                "variable": {
                    "value": "g.edge_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(torch.max(batch.cpu())) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_68": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_48": {
                "input": {
                    "value": "batch.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "docs/source/examples/2training.py": {
        "torch": {
            "Adam_34": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(graph, self.dropout(h))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_39": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[dataset.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "dataset.y[dataset.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_29": {
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.conv1(graph, self.dropout(h)))",
                            "Call"
                        ],
                        [
                            "self.conv2(graph, self.dropout(h))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "docs/source/examples/3custom_dataset.py": {
        "torch": {
            "randint_24": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, num_edges)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_26": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_64": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_65": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "docs/source/examples/4custom_gnn.py": {
        "torch": {
            "cat_34": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "docs/source/tutorial_cn/examples/1graph_cn.py": {
        "torch": {
            "tensor_12": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 3], [2, 1], [4, 2], [0, 3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_12": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_13": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-1], [0], [1], [2], [3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_25": {
                "variable": {
                    "value": "g.edge_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(torch.max(batch.cpu())) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_66": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_47": {
                "input": {
                    "value": "batch.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "docs/source/tutorial_cn/examples/2training_cn.py": {
        "torch": {
            "Adam_34": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(graph, self.dropout(h))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_39": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[dataset.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "dataset.y[dataset.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_29": {
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.conv1(graph, self.dropout(h)))",
                            "Call"
                        ],
                        [
                            "self.conv2(graph, self.dropout(h))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "docs/source/tutorial_cn/examples/3custom_dataset_cn.py": {
        "torch": {
            "randint_24": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, num_edges)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_26": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_64": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_65": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "docs/source/tutorial_cn/examples/4custom_gnn.py": {
        "torch": {
            "cat_36": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GRB/test_adv.py": {
        "torch": {
            "load_43": {
                "f": {
                    "value": "./checkpoints/model.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "./checkpoints/model.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GRB/test_denfense.py": {
        "torch": {
            "load_43": {
                "f": {
                    "value": "./checkpoints/model.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_75": {
                "f": {
                    "value": "./checkpoints/model.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GRB/test_injection.py": {
        "torch": {
            "load_42": {
                "f": {
                    "value": "./checkpoints/model.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "./checkpoints/model.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/GRB/test_modification.py": {
        "torch": {
            "load_43": {
                "f": {
                    "value": "./checkpoints/model.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "./checkpoints/model.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/VRGCN/VRGCN.py": {
        "torch": {
            "empty_16": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_17": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.histories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[History(num_nodes, hidden_channels) if i != 0 else History(num_nodes, in_channels) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_72": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x[sample_ids[0]].to(self._device)",
                            "Call"
                        ],
                        [
                            "x - self.histories[i].pull(cur_id).detach()",
                            "BinOp"
                        ],
                        [
                            "spmm(sample_adj, x)[:target_id.shape[0]] + spmm(full_adj, h)[:target_id.shape[0]].detach()",
                            "BinOp"
                        ],
                        [
                            "self.lins[i](x)",
                            "Call"
                        ],
                        [
                            "self.norms[i](x)",
                            "Call"
                        ],
                        [
                            "x.relu_()",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.to(self._device)",
                            "Call"
                        ],
                        [
                            "spmm(adj, x)",
                            "Call"
                        ],
                        [
                            "self.lins[i](x)",
                            "Call"
                        ],
                        [
                            "self.norms[i](x)",
                            "Call"
                        ],
                        [
                            "x.relu_()",
                            "Call"
                        ],
                        [
                            "torch.cat(tmp_x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_125": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.histories[i].num_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/VRGCN/dataloder.py": {
        "torch": {
            "arange_8": {
                "variable": {
                    "value": "self.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_18": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(0, num_row).long(), row]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(0, num_row).long(), col]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.diag[sample_id[:num_row]], value]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "new_graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_33": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "graph.x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "sample_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(graph['train_mask'])[0]",
                            "Subscript"
                        ],
                        [
                            "torch.arange(0, graph.x.shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "sample_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(graph['train_mask'])[0]",
                            "Subscript"
                        ],
                        [
                            "torch.arange(0, graph.x.shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_31": {
                "condition": {
                    "value": "graph['train_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_52": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_row",
                    "type": "Name",
                    "possible_values": [
                        [
                            "row.max() + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_53": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_row",
                    "type": "Name",
                    "possible_values": [
                        [
                            "row.max() + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "data": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(graph['train_mask'])[0]",
                            "Subscript"
                        ],
                        [
                            "torch.arange(0, graph.x.shape[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/VRGCN/main.py": {
        "torch": {
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_accs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_60": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(x, sample_ids_adjs, full_ids_adjs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y[batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_67": {
                "condition": {
                    "value": "data['train_mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/custom_dataset.py": {
        "torch": {
            "randint_16": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, num_edges)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_17": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_18": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/custom_gcn.py": {
        "torch": {
            "Dropout_15": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(graph, self.dropout(h))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/cv_search.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/dgraph/gnn.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "node_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nll_loss_115": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data.x[train_idx])",
                            "Call"
                        ],
                        [
                            "model(data)[train_idx]",
                            "Subscript"
                        ],
                        [
                            "model(data.x)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "data.y[train_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_162": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'cuda:{args.device}' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "torch.device(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_138": {
                "variable": {
                    "value": "losses[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "out[node_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data.y[node_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_277": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "para_dict['lr']",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp_parameters",
                            "Name"
                        ],
                        [
                            "gcn_parameters",
                            "Name"
                        ],
                        [
                            "gat_parameters",
                            "Name"
                        ],
                        [
                            "sage_Sampler_parameters",
                            "Name"
                        ],
                        [
                            "sage_parameters",
                            "Name"
                        ],
                        [
                            "grand_parameters",
                            "Name"
                        ],
                        [
                            "gin_parameters",
                            "Name"
                        ],
                        [
                            "dgi_parameters",
                            "Name"
                        ],
                        [
                            "sgc_parameters",
                            "Name"
                        ],
                        [
                            "dropedgeGCN_parameters",
                            "Name"
                        ],
                        [
                            "sign_parameters",
                            "Name"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "para_dict['l2']",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mlp_parameters",
                            "Name"
                        ],
                        [
                            "gcn_parameters",
                            "Name"
                        ],
                        [
                            "gat_parameters",
                            "Name"
                        ],
                        [
                            "sage_Sampler_parameters",
                            "Name"
                        ],
                        [
                            "sage_parameters",
                            "Name"
                        ],
                        [
                            "grand_parameters",
                            "Name"
                        ],
                        [
                            "gin_parameters",
                            "Name"
                        ],
                        [
                            "dgi_parameters",
                            "Name"
                        ],
                        [
                            "sgc_parameters",
                            "Name"
                        ],
                        [
                            "dropedgeGCN_parameters",
                            "Name"
                        ],
                        [
                            "sign_parameters",
                            "Name"
                        ]
                    ]
                }
            },
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/dgraph/logger.py": {
        "torch": {
            "tensor_33": {
                "variable": {
                    "value": "best_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "best_results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_15": {
                "data": {
                    "value": "self.results[run]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "self.results",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/dgraph/models/dgi.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_ft",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.gcn(graph, x, self.sparse)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_ft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_69": {
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(logits)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "PReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spmm(graph, torch.squeeze(seq_fts, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_39": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "seq_fts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_44": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "seq_fts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_42": {
                "input": {
                    "value": "seq_fts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_37": {
                "input": {
                    "value": "seq_fts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(seq)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/dgraph/models/gat.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/dgraph/models/gcn.py": {
        "torch": {
            "ModuleList_32": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNLayer(shapes[i], shapes[i + 1], dropout=dropout if i != num_layers - 1 else 0, residual=residual if i != num_layers - 1 else None, norm=norm if i != num_layers - 1 else None, activation=activation if i != num_layers - 1 else None) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_softmax_63": {
                "input": {
                    "value": "h",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.layers[i](graph, h)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.layers[i](graph, h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/dgraph/models/gin.py": {
        "torch": {
            "ModuleList_50": {
                "variable": {
                    "value": "self.gin_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.gin_layers[i](graph, h)",
                            "Call"
                        ],
                        [
                            "self.batch_norm[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_75": {
                "input": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.gin_layers[i](graph, h)",
                            "Call"
                        ],
                        [
                            "self.batch_norm[i](h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.layer2(h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/dgraph/models/grand.py": {
        "torch": {
            "Linear_54": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nfeat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_58": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nfeat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masks.to(x.device) * x",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 - self.dropnode_rate)",
                            "BinOp"
                        ],
                        [
                            "self.drop_node(x)",
                            "Call"
                        ],
                        [
                            "spmm(graph, x).detach_()",
                            "Call"
                        ],
                        [
                            "x * row_inv[:, None]",
                            "BinOp"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.normalize_x(x)",
                            "Call"
                        ],
                        [
                            "self.rand_prop(graph, x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.input_droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.hidden_droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.input_droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_107": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masks.to(x.device) * x",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 - self.dropnode_rate)",
                            "BinOp"
                        ],
                        [
                            "self.drop_node(x)",
                            "Call"
                        ],
                        [
                            "spmm(graph, x).detach_()",
                            "Call"
                        ],
                        [
                            "x * row_inv[:, None]",
                            "BinOp"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.normalize_x(x)",
                            "Call"
                        ],
                        [
                            "self.rand_prop(graph, x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.input_droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.hidden_droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.hidden_droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_69": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - drop_rates",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_109": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "masks.to(x.device) * x",
                            "BinOp"
                        ],
                        [
                            "x * (1.0 - self.dropnode_rate)",
                            "BinOp"
                        ],
                        [
                            "self.drop_node(x)",
                            "Call"
                        ],
                        [
                            "spmm(graph, x).detach_()",
                            "Call"
                        ],
                        [
                            "x * row_inv[:, None]",
                            "BinOp"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.normalize_x(x)",
                            "Call"
                        ],
                        [
                            "self.rand_prop(graph, x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.input_droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.hidden_droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "examples/dgraph/models/graphsage.py": {
        "torch": {
            "as_tensor_31": {
                "variable": {
                    "value": "edge_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sample_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_31": {
                "variable": {
                    "value": "edge_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGELayer(shapes[layer], shapes[layer + 1], aggr=aggr) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Layer(shapes[i], shapes[i + 1], aggr=aggr, normalize=normalize if i != num_layers - 1 else False, dropout=dropout, norm=norm if i != num_layers - 1 else None, activation=activation if i != num_layers - 1 else None) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "x_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_145": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "output[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[src_id].to(device)",
                            "Call"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "x[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "output[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[src_id].to(device)",
                            "Call"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "x[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "output[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[src_id].to(device)",
                            "Call"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "x[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "output[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[src_id].to(device)",
                            "Call"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "x[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_78": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "output[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[src_id].to(device)",
                            "Call"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "x[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "output[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x_all[src_id].to(device)",
                            "Call"
                        ],
                        [
                            "self.convs[i](graph, x)",
                            "Call"
                        ],
                        [
                            "x[:size[1]]",
                            "Subscript"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/dgraph/models/mixhop.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.mixhops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MixHopLayer(shapes[layer], [0, 1, 2], layer_pows[layer]) for layer in range(len(layer_pows))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "shapes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixhop(graph, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(mixhop(graph, x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/dgraph/models/mlp.py": {
        "torch": {
            "log_softmax_32": {
                "input": {
                    "value": "self.nn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/dgraph/models/sgc.py": {
        "torch": {
            "log_softmax_25": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.nn1(graph, graph.x)",
                            "Call"
                        ],
                        [
                            "self.nn2(graph, x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/dgraph/models/sign.py": {
        "torch": {
            "cat_119": {
                "tensors": {
                    "value": "op_embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_153": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spmm(graph, x)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * x + spmm(graph, x)",
                            "BinOp"
                        ],
                        [
                            "x.to('cpu')",
                            "Call"
                        ],
                        [
                            "graph.x.contiguous()",
                            "Call"
                        ],
                        [
                            "self.cache_x",
                            "Attribute"
                        ],
                        [
                            "self.mlp(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_140": {
                "obj": {
                    "value": "x_all.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dataset_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "f'{self.dataset_name}_{self.num_propagations}_{self.diffusion}_{adj_norm}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "load_128": {
                "f": {
                    "value": "dataset_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "f'{self.dataset_name}_{self.num_propagations}_{self.diffusion}_{adj_norm}.pt'",
                            "JoinedStr"
                        ]
                    ]
                }
            }
        }
    },
    "examples/dgraph/utils/dgraphfin.py": {
        "torch": {
            "zeros_6": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "node_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "items[0]['x']",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "items[0]['y'].reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "y.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_index.transpose()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "train_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "train_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "items[0]['train_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "valid_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "valid_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "items[0]['valid_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "test_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "items[0]['test_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/dgraph/utils/utils.py": {
        "torch": {
            "save_29": {
                "obj": {
                    "value": "save_dict",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'parameters': parameters, 'preds': preds, 'params': model.state_dict(), 'nparams': sum((p.numel() for p in model.parameters()))}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/oagbert/calculate_paper_similarity.py": {
        "torch": {
            "normalize_107": {
                "variable": {
                    "value": "paper_embed_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "paper_embed_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(paper_embed_1, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_108": {
                "variable": {
                    "value": "paper_embed_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "paper_embed_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(paper_embed_2, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_109": {
                "variable": {
                    "value": "paper_embed_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "paper_embed_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(paper_embed_3, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_112": {
                "variable": {
                    "value": "sim12",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "paper_embed_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(paper_embed_1, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "paper_embed_2.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_113": {
                "variable": {
                    "value": "sim13",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "paper_embed_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(paper_embed_1, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "paper_embed_3.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_34": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_35": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_36": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_40": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_67": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_96": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_98": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_101": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/oagbert/oagbert.py": {
        "torch": {
            "no_grad_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/oagbert/oagbert_metainfo_zh_similarity.py": {
        "torch": {
            "normalize_88": {
                "variable": {
                    "value": "paper_embed_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "paper_embed_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(paper_embed_1, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_89": {
                "variable": {
                    "value": "paper_embed_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "paper_embed_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(paper_embed_2, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_90": {
                "variable": {
                    "value": "paper_embed_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "paper_embed_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(paper_embed_3, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_93": {
                "variable": {
                    "value": "sim12",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "paper_embed_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(paper_embed_1, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "paper_embed_2.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_94": {
                "variable": {
                    "value": "sim13",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "paper_embed_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(paper_embed_1, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "paper_embed_3.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_28": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_29": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_30": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_33": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_34": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_54": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_76": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_77": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_78": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ogb/arxiv/gnn.py": {
        "torch": {
            "ModuleList_23": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNLayer(shapes[i], shapes[i + 1], dropout=dropout if i != num_layers - 1 else 0, norm=norm if i != num_layers - 1 else None, activation=activation if i != num_layers - 1 else None) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGELayer(shapes[i], shapes[i + 1], aggr=aggr, normalize=normalize if i != num_layers - 1 else False, dropout=dropout if i != num_layers - 1 else False, norm=norm if i != num_layers - 1 else None, activation=activation if i != num_layers - 1 else None) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.attentions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.input_drop, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.input_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_141": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.input_drop, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_142": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ],
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.input_drop, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(graph, x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ogb/products/gnn.py": {
        "torch": {
            "ModuleList_25": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SAGELayer(shapes[i], shapes[i + 1], aggr=aggr, normalize=normalize if i != num_layers - 1 else False, dropout=dropout if i != num_layers - 1 else False, norm=norm if i != num_layers - 1 else None, activation=activation if i != num_layers - 1 else None) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/pyg/chebnet.py": {
        "torch": {
            "ModuleList_22": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ChebConv(shapes[layer], shapes[layer + 1], filter_size) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_28": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(conv(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[-1](x, edge_index)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/pyg/dgcnn.py": {
        "torch": {
            "Sequential_23": {
                "variable": {
                    "value": "mlp1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "MLP(2 * in_feats, hidden_size, hidden_size, num_layers=3, norm='batchnorm')",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "mlp2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "MLP(2 * hidden_size, 2 * hidden_size, 2 * hidden_size, num_layers=1, norm='batchnorm')",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + 2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.final_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "num_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "num_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_38": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_41": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_feats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "[h1, h2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/pyg/gat.py": {
        "torch": {
            "stack_23": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_24": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv2(x, edge_index))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_25": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv1(x, edge_index))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(self.conv2(x, edge_index))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_27": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/pyg/gcn.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNConv(shapes[layer], shapes[layer + 1], cached=False) for layer in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv(x, edge_index, edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(conv(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[-1](x, edge_index, edge_weight)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_32": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(conv(x, edge_index, edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[-1](x, edge_index, edge_weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_27": {
                "tensors": {
                    "value": "graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/pyg/unet.py": {
        "torch": {
            "stack_27": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "graph.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.unet(x, edge_index)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/simple_hgn/conv.py": {
        "torch": {
            "Parameter_35": {
                "variable": {
                    "value": "self.edge_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(num_etypes, edge_feats))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features * nhead)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(edge_feats, edge_feats * nhead)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.a_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, nhead, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.a_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, nhead, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.a_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(1, nhead, edge_feats))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.feat_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "feat_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_48": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.feat_drop(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.W_e",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.residual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features * nhead",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "size": {
                    "value": "(num_etypes, edge_feats)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "size": {
                    "value": "(1, nhead, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "size": {
                    "value": "(1, nhead, out_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "size": {
                    "value": "(1, nhead, edge_feats)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_73": {
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.W).view(-1, self.nhead, self.out_features)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/simple_hgn/run.py": {
        "torch": {
            "CrossEntropyLoss_34": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.gat_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edges",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(edges, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(edges).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(weights)",
                            "Call"
                        ],
                        [
                            "torch.tensor(weights).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "e_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "e_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(e_feat, dtype=torch.long).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_129": {
                "input": {
                    "value": "torch.norm(logits, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_129": {
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits / torch.max(torch.norm(logits, dim=1, keepdim=True), self.epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/datasets/test_customized_data.py": {
        "torch": {
            "randint_17": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(2, num_edges)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_18": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "feat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "30",
                            "Constant"
                        ]
                    ]
                }
            },
            "randint_19": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "variable": {
                    "value": "train_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "val_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "test_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_29": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Graph(x=x, edge_index=edge_index, y=y, train_mask=train_mask, val_mask=val_mask, test_mask=test_mask)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "mydata.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_40": {
                "variable": {
                    "value": "edges",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 30)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_41": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_43": {
                "obj": {
                    "value": "graphs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/datasets/test_data.py": {
        "torch": {
            "stack_33": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_33": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/emb/test_deepwalk.py": {
        "torch": {}
    },
    "tests/models/ssl/test_contrastive_models.py": {
        "torch": {
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/ssl/test_generative_models.py": {
        "torch": {
            "is_available_7": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/tasks/test_attack_defense.py": {
        "torch": {
            "load_35": {
                "f": {
                    "value": "./checkpoints/model.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_604": {
                "f": {
                    "value": "./checkpoints/model.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/tasks/test_attributed_graph_clustering.py": {
        "torch": {
            "is_available_5": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/tasks/test_graph_classification.py": {
        "torch": {
            "is_available_5": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/tasks/test_link_prediction.py": {
        "torch": {}
    },
    "tests/tasks/test_multiplex_link_prediction.py": {
        "torch": {
            "is_available_6": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/tasks/test_node_classification.py": {
        "torch": {
            "is_available_8": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/tasks/test_unsupervised_graph_classification.py": {
        "torch": {
            "is_available_7": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_layers.py": {
        "torch": {
            "eye_8": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_17": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_9": {
                "data": {
                    "value": "[1, 2, 3, 2, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[1, 2, 3, 2, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_19": {
                "*size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_ops.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_23": {
                "variable": {
                    "value": "edge_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 200)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_26": {
                "variable": {
                    "value": "edge_attr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nedge",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g.num_edges",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes, msg.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "msg.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "deg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isinf_68": {
                "input": {
                    "value": "deg_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deg.pow(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_66": {
                "input": {
                    "value": "dst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g.x[row]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}