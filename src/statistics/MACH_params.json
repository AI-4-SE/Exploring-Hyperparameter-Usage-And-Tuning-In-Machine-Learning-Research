{
    "src/utils.py": {
        "sklearn": {},
        "tensorflow": {
            "Int64List_39": {
                "variable": {
                    "value": "labels_list",
                    "possible_values": []
                },
                "value": {
                    "value": "labels",
                    "possible_values": []
                }
            },
            "FloatList_40": {
                "variable": {
                    "value": "label_vals_list",
                    "possible_values": []
                },
                "value": {
                    "value": "label_vals",
                    "possible_values": []
                }
            },
            "Int64List_41": {
                "variable": {
                    "value": "inp_idxs_list",
                    "possible_values": []
                },
                "value": {
                    "value": "inp_idxs",
                    "possible_values": []
                }
            },
            "FloatList_42": {
                "variable": {
                    "value": "inp_vals_list",
                    "possible_values": []
                },
                "value": {
                    "value": "inp_vals",
                    "possible_values": []
                }
            },
            "Example_51": {
                "variable": {
                    "value": "example",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "possible_values": []
                }
            },
            "parse_single_example_75": {
                "variable": {
                    "value": "parsed_features",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example_proto",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "possible_values": [
                        [
                            "{'labels': tf.VarLenFeature(tf.int64), 'label_vals': tf.VarLenFeature(tf.float32), 'input_idxs': tf.VarLenFeature(tf.int64), 'input_vals': tf.VarLenFeature(tf.float32)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Feature_45": {
                "int64_list": {
                    "value": "labels_list",
                    "possible_values": [
                        [
                            "tf.train.Int64List(value=labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_46": {
                "float_list": {
                    "value": "label_vals_list",
                    "possible_values": [
                        [
                            "tf.train.FloatList(value=label_vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_47": {
                "int64_list": {
                    "value": "inp_idxs_list",
                    "possible_values": [
                        [
                            "tf.train.Int64List(value=inp_idxs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_48": {
                "float_list": {
                    "value": "inp_vals_list",
                    "possible_values": [
                        [
                            "tf.train.FloatList(value=inp_vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_58": {
                "path": {
                    "value": "write_loc + '.tfrecords'",
                    "possible_values": []
                }
            },
            "VarLenFeature_70": {
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "VarLenFeature_71": {
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "VarLenFeature_72": {
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "VarLenFeature_73": {
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "Features_51": {
                "feature": {
                    "value": "feature",
                    "possible_values": [
                        [
                            "{'labels': tf.train.Feature(int64_list=labels_list), 'label_vals': tf.train.Feature(float_list=label_vals_list), 'input_idxs': tf.train.Feature(int64_list=inp_idxs_list), 'input_vals': tf.train.Feature(float_list=inp_vals_list)}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "src/approx_eval.py": {
        "tensorflow": {
            "TFRecordDataset_51": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "filenames": {
                    "value": "eval_files",
                    "possible_values": [
                        [
                            "glob.glob(config.tfrecord_loc + '*_test.tfrecords')",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_82": {
                "variable": {
                    "value": "tf_config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_84": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "map_and_batch_52": {
                "map_func": {
                    "value": "_parse_function",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "possible_values": []
                }
            },
            "SparseTensor_57": {
                "indices": {
                    "value": "tf.stack([next_x_idxs.indices[:, 0], tf.gather(query_lookup[r], next_x_idxs.values)], axis=-1)",
                    "possible_values": []
                },
                "values": {
                    "value": "next_x_vals.values",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "[config.batch_size, config.feat_hash_dim]",
                    "possible_values": []
                }
            },
            "constant_71": {
                "variable": {
                    "value": "W1[r]",
                    "possible_values": []
                },
                "value": {
                    "value": "W1_tmp[r]",
                    "possible_values": []
                }
            },
            "constant_72": {
                "variable": {
                    "value": "b1[r]",
                    "possible_values": []
                },
                "value": {
                    "value": "b1_tmp[r]",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "hidden_layer[r]",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.sparse_tensor_dense_matmul(x[r], W1[r]) + b1[r]",
                    "possible_values": []
                }
            },
            "constant_75": {
                "variable": {
                    "value": "W2[r]",
                    "possible_values": []
                },
                "value": {
                    "value": "W2_tmp[r]",
                    "possible_values": []
                }
            },
            "constant_76": {
                "variable": {
                    "value": "b2[r]",
                    "possible_values": []
                },
                "value": {
                    "value": "b2_tmp[r]",
                    "possible_values": []
                }
            },
            "top_k_80": {
                "variable": {
                    "value": "top_buckets[r]",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[r]",
                    "possible_values": []
                },
                "k": {
                    "value": "config.topk",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "global_variables_initializer_85": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_57": {
                "values": {
                    "value": "[next_x_idxs.indices[:, 0], tf.gather(query_lookup[r], next_x_idxs.values)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "device_62": {
                "device_name": {
                    "value": "'/gpu:' + str(r // config.R_per_gpu)",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "a": {
                    "value": "hidden_layer[r]",
                    "possible_values": []
                },
                "b": {
                    "value": "W2[r]",
                    "possible_values": []
                }
            },
            "gather_57": {
                "params": {
                    "value": "query_lookup[r]",
                    "possible_values": []
                },
                "indices": {
                    "value": "next_x_idxs.values",
                    "possible_values": []
                }
            }
        }
    },
    "src/evaluate.py": {
        "tensorflow": {
            "TFRecordDataset_62": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "filenames": {
                    "value": "eval_files",
                    "possible_values": [
                        [
                            "glob.glob(config.tfrecord_loc + '*_test.tfrecords')",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_102": {
                "variable": {
                    "value": "tf_config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_104": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "map_and_batch_63": {
                "map_func": {
                    "value": "_parse_function",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "possible_values": []
                },
                "num_parallel_calls": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "SparseTensor_68": {
                "indices": {
                    "value": "tf.stack([next_x_idxs.indices[:, 0], tf.gather(query_lookup[r], next_x_idxs.values)], axis=-1)",
                    "possible_values": []
                },
                "values": {
                    "value": "next_x_vals.values",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "[config.batch_size, config.feat_hash_dim]",
                    "possible_values": []
                }
            },
            "constant_91": {
                "variable": {
                    "value": "W1[r]",
                    "possible_values": []
                },
                "value": {
                    "value": "W1_tmp[r]",
                    "possible_values": []
                }
            },
            "constant_92": {
                "variable": {
                    "value": "b1[r]",
                    "possible_values": []
                },
                "value": {
                    "value": "b1_tmp[r]",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "hidden_layer[r]",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.sparse_tensor_dense_matmul(x[r], W1[r]) + b1[r]",
                    "possible_values": []
                }
            },
            "constant_95": {
                "variable": {
                    "value": "W2[r]",
                    "possible_values": []
                },
                "value": {
                    "value": "W2_tmp[r]",
                    "possible_values": []
                }
            },
            "constant_96": {
                "variable": {
                    "value": "b2[r]",
                    "possible_values": []
                },
                "value": {
                    "value": "b2_tmp[r]",
                    "possible_values": []
                }
            },
            "sigmoid_99": {
                "variable": {
                    "value": "probs[r]",
                    "possible_values": []
                },
                "x": {
                    "value": "logits[r]",
                    "possible_values": []
                }
            },
            "global_variables_initializer_105": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_68": {
                "values": {
                    "value": "[next_x_idxs.indices[:, 0], tf.gather(query_lookup[r], next_x_idxs.values)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "device_82": {
                "device_name": {
                    "value": "'/gpu:' + str(r // config.R_per_gpu)",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "a": {
                    "value": "hidden_layer[r]",
                    "possible_values": []
                },
                "b": {
                    "value": "W2[r]",
                    "possible_values": []
                }
            },
            "gather_68": {
                "params": {
                    "value": "query_lookup[r]",
                    "possible_values": []
                },
                "indices": {
                    "value": "next_x_idxs.values",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "tensorflow": {
            "constant_23": {
                "variable": {
                    "value": "lookup",
                    "possible_values": []
                },
                "value": {
                    "value": "np.load(config.lookups_loc + 'bucket_order_' + str(r) + '.npy')",
                    "possible_values": []
                }
            },
            "constant_24": {
                "variable": {
                    "value": "query_lookup",
                    "possible_values": []
                },
                "value": {
                    "value": "np.load(config.query_lookups_loc + 'bucket_order_' + str(r) + '.npy')",
                    "possible_values": []
                }
            },
            "TFRecordDataset_28": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "filenames": {
                    "value": "train_files",
                    "possible_values": [
                        [
                            "glob.glob(config.tfrecord_loc + '*_train.tfrecords')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_39": {
                "variable": {
                    "value": "x_idxs",
                    "possible_values": []
                },
                "values": {
                    "value": "[next_x_idxs.indices[:, 0], tf.gather(query_lookup, next_x_idxs.values)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "SparseTensor_41": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "indices": {
                    "value": "x_idxs",
                    "possible_values": [
                        [
                            "tf.stack([next_x_idxs.indices[:, 0], tf.gather(query_lookup, next_x_idxs.values)], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "x_vals",
                    "possible_values": [
                        [
                            "next_x_vals.values",
                            "Attribute"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "[config.batch_size, config.feat_hash_dim]",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "y_idxs",
                    "possible_values": []
                },
                "values": {
                    "value": "[next_y_idxs.indices[:, 0], tf.gather(lookup, next_y_idxs.values)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "SparseTensor_45": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_idxs",
                    "possible_values": [
                        [
                            "tf.stack([next_y_idxs.indices[:, 0], tf.gather(lookup, next_y_idxs.values)], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "y_vals",
                    "possible_values": [
                        [
                            "next_y_vals.values",
                            "Attribute"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "[config.batch_size, config.B]",
                    "possible_values": []
                }
            },
            "reduce_mean_71": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=y_)",
                    "possible_values": []
                }
            },
            "AdamOptimizer_72": {
                "variable": {
                    "value": "train_op",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_74": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True, log_device_placement=False, gpu_options=tf.GPUOptions(allow_growth=True, per_process_gpu_memory_fraction=float(args.gpu_usage)))",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "W1_tmp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.feat_hash_dim, config.hidden_dim]",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "b1_tmp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.hidden_dim]",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "W1",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W1_tmp",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[config.feat_hash_dim, config.hidden_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_54": {
                "variable": {
                    "value": "b1",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "b1_tmp",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[config.hidden_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_55": {
                "variable": {
                    "value": "hidden_layer",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.sparse_tensor_dense_matmul(x, W1) + b1",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "W2_tmp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.hidden_dim, config.B]",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "b2_tmp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.B]",
                    "possible_values": []
                }
            },
            "Variable_59": {
                "variable": {
                    "value": "W2",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W2_tmp",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[config.hidden_dim, config.B])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "b2",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "b2_tmp",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[config.B])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "W1",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([config.feat_hash_dim, config.hidden_dim], stddev=0.05, dtype=tf.float32)",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "variable": {
                    "value": "b1",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([config.hidden_dim], stddev=0.05, dtype=tf.float32)",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "hidden_layer",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.sparse_tensor_dense_matmul(x, W1) + b1",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "W2",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([config.hidden_dim, config.B], stddev=0.05, dtype=tf.float32)",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "b2",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([config.B], stddev=0.05, dtype=tf.float32)",
                    "possible_values": []
                }
            },
            "map_and_batch_31": {
                "map_func": {
                    "value": "_parse_function",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_71": {
                "logits": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.matmul(hidden_layer, W2) + b2",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(hidden_layer, W2) + b2",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_to_dense(y, validate_indices=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_39": {
                "params": {
                    "value": "query_lookup",
                    "possible_values": [
                        [
                            "tf.constant(np.load(config.query_lookups_loc + 'bucket_order_' + str(r) + '.npy'))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_x_idxs.values",
                    "possible_values": []
                }
            },
            "gather_43": {
                "params": {
                    "value": "lookup",
                    "possible_values": [
                        [
                            "tf.constant(np.load(config.lookups_loc + 'bucket_order_' + str(r) + '.npy'))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "next_y_idxs.values",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "a": {
                    "value": "hidden_layer",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.sparse_tensor_dense_matmul(x, W1) + b1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.sparse_tensor_dense_matmul(x, W1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "possible_values": [
                        [
                            "tf.Variable(W2_tmp)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([config.hidden_dim, config.B], stddev=0.05, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_63": {
                "shape": {
                    "value": "[config.feat_hash_dim, config.hidden_dim]",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "truncated_normal_64": {
                "shape": {
                    "value": "[config.hidden_dim]",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "truncated_normal_67": {
                "shape": {
                    "value": "[config.hidden_dim, config.B]",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "truncated_normal_68": {
                "shape": {
                    "value": "[config.B]",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "a": {
                    "value": "hidden_layer",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.sparse_tensor_dense_matmul(x, W1) + b1)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(tf.sparse_tensor_dense_matmul(x, W1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W2",
                    "possible_values": [
                        [
                            "tf.Variable(W2_tmp)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal([config.hidden_dim, config.B], stddev=0.05, dtype=tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_74": {
                "allow_soft_placement": {
                    "value": "True",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True, per_process_gpu_memory_fraction=float(args.gpu_usage))",
                    "possible_values": []
                }
            },
            "global_variables_initializer_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_82": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "GPUOptions_77": {
                "allow_growth": {
                    "value": "True",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "float(args.gpu_usage)",
                    "possible_values": []
                }
            }
        }
    }
}