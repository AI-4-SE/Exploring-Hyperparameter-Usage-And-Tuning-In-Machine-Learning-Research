{
    "doc/tutorial/apsara2019/activepower_clustering/activepower_preprocessing.py": {
        "sklearn": {
            "MinMaxScaler_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "doc/tutorial/apsara2019/carprice_xgboost/carprice_preprocessing.py": {
        "sklearn": {
            "train_test_split_80": {
                "variable": {
                    "value": "(Xtrain, Xtest, ytrain, ytest)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_final",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "TEST_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "float"
                        ]
                    ]
                },
                "random_state": {
                    "value": "RANDOM_STATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            },
            "StandardScaler_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "doc/tutorial/apsara2019/titanic_dnn/titanic_preprocessing.py": {
        "sklearn": {
            "StandardScaler_113": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RandomForestRegressor_46": {
                "variable": {
                    "value": "rfr",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/models/example.py": {
        "sklearn": {
            "train_test_split_31": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataframe",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "train_test_split_32": {
                "variable": {
                    "value": "(train, val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "numeric_column_55": {
                "key": {
                    "value": "header",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DenseFeatures_73": {
                "variable": {
                    "value": "self.feature_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feature_columns": {
                    "value": "feature_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.feature_column.numeric_column(header) for header in ['c1', 'c2', 'c3', 'c4', 'c5']]",
                            "ListComp"
                        ],
                        [
                            "feature_columns",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_77": {
                "variable": {
                    "value": "self.prediction_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_76": {
                "units": {
                    "value": "hidden_unit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "python/runtime/step/xgboost/evaluate.py": {
        "sklearn": {}
    },
    "python/runtime/xgboost/dataset.py": {
        "sklearn": {
            "load_svmlight_files_218": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "files": {
                    "value": "files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(filename, f) for f in os.listdir(filename)]",
                            "ListComp"
                        ]
                    ]
                },
                "zero_based": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_svmlight_file_223": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename[0:filename.index('#')]",
                            "Subscript"
                        ],
                        [
                            "'{}/{}.txt'.format(dname, slice_id)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "zero_based": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/xgboost/evaluate.py": {
        "sklearn": {}
    },
    "python/runtime/alps/train_example.py": {
        "tensorflow": {
            "DNNClassifier_39": {
                "n_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_units": {
                    "value": "[10, 20]",
                    "type": "List",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_config",
                            "Method Argument"
                        ]
                    ]
                },
                "feature_columns": {
                    "value": "feature_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "numeric_column_38": {
                "key": {
                    "value": "col_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['sepal_length', 'sepal_width', 'petal_length', 'petal_width']",
                            "List"
                        ],
                        [
                            "['sepal_length', 'sepal_width', 'petal_length', 'petal_width']",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "python/runtime/feature/compile.py": {
        "tensorflow": {}
    },
    "python/runtime/model/oss.py": {
        "tensorflow": {}
    },
    "python/runtime/pai/pai_distributed.py": {
        "tensorflow": {
            "DEFINE_integer_55": {
                "name": {
                    "value": "task_index",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Worker task index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_56": {
                "name": {
                    "value": "ps_hosts",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "ps hosts",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_57": {
                "name": {
                    "value": "worker_hosts",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "worker hosts",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_58": {
                "name": {
                    "value": "job_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "worker",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "job name: worker or ps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_59": {
                "name": {
                    "value": "checkpointDir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "oss info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_60": {
                "name": {
                    "value": "tables",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "required by PAI-TF 1.15",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_61": {
                "name": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "required by PAI-TF 1.15",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_63": {
                "name": {
                    "value": "sqlflow_oss_ak",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "oss ak, for writing saved models",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "sqlflow_oss_sk",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "oss sk, for writing saved models",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "sqlflow_oss_ep",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "oss endpoint, for writing saved models",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_69": {
                "name": {
                    "value": "sqlflow_oss_modeldir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "oss model dir, where the model will be saved",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RunConfig_145": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "tf_random_seed": {
                    "value": "get_tf_random_seed()",
                    "type": "Call",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "save_checkpoints_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "train_distribute": {
                    "value": "dist_strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.distribute.experimental.ParameterServerStrategy()",
                            "Call"
                        ]
                    ]
                },
                "session_config": {
                    "value": "tf.ConfigProto(log_device_placement=True, device_filters=device_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RunConfig_152": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "tf_random_seed": {
                    "value": "get_tf_random_seed()",
                    "type": "Call",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "save_checkpoints_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ParameterServerStrategy_143": {
                "variable": {
                    "value": "dist_strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_149": {
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device_filters": {
                    "value": "device_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "['/job:ps', '/job:%s/task:%d' % (task_type, task_index)]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "python/runtime/pai/submitter_test.py": {
        "tensorflow": {}
    },
    "python/runtime/step/tensorflow/evaluate.py": {
        "tensorflow": {
            "enable_eager_execution_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/step/tensorflow/explain.py": {
        "tensorflow": {}
    },
    "python/runtime/step/tensorflow/predict.py": {
        "tensorflow": {}
    },
    "python/runtime/step/tensorflow/train.py": {
        "tensorflow": {}
    },
    "python/runtime/step/tensorflow/train_estimator.py": {
        "tensorflow": {
            "add_metrics_50": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_model(estimator, model_params)",
                            "Call"
                        ],
                        [
                            "tf.estimator.add_metrics(classifier, metrics.get_tf_metrics(metric_names))",
                            "Call"
                        ]
                    ]
                },
                "metric_fn": {
                    "value": "metrics.get_tf_metrics(metric_names)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/step/tensorflow/train_keras.py": {
        "tensorflow": {
            "ParameterServerStrategy_83": {
                "variable": {
                    "value": "dist_strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunConfig_85": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "tf_random_seed": {
                    "value": "get_tf_random_seed()",
                    "type": "Call",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "train_distribute": {
                    "value": "dist_strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.distribute.ParameterServerStrategy()",
                            "Call"
                        ]
                    ]
                },
                "session_config": {
                    "value": "tf.ConfigProto(log_device_placement=True, device_filters=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "model_to_estimator_93": {
                "variable": {
                    "value": "keras_estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "keras_model": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "keras_compile(estimator, model_params, metric_names)",
                            "Call"
                        ],
                        [
                            "init_model_with_feature_column(estimator, model_params, has_none_optimizer=True)",
                            "Call"
                        ],
                        [
                            "classifier",
                            "Method Argument"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.checkpointDir",
                            "Attribute"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.RunConfig(tf_random_seed=get_tf_random_seed(), save_checkpoints_steps=100, train_distribute=dist_strategy, session_config=tf.ConfigProto(log_device_placement=True, device_filters=None))",
                            "Call"
                        ]
                    ]
                }
            },
            "build_parsing_serving_input_receiver_fn_115": {
                "variable": {
                    "value": "serving_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_spec": {
                    "value": "tf.feature_column.make_parse_example_spec(all_feature_columns)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "make_parse_example_spec_116": {
                "feature_columns": {
                    "value": "all_feature_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params['feature_columns']",
                            "Subscript"
                        ],
                        [
                            "copy.copy(model_params['linear_feature_columns'])",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_88": {
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device_filters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/tensorflow/estimator_example.py": {
        "tensorflow": {
            "numeric_column_37": {
                "key": {
                    "value": "sepal_length",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "numeric_column_38": {
                "key": {
                    "value": "sepal_width",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "numeric_column_39": {
                "key": {
                    "value": "petal_length",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "numeric_column_40": {
                "key": {
                    "value": "petal_width",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/tensorflow/explain.py": {
        "tensorflow": {
            "get_logger_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_45": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_143": {
                "tensors": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/tensorflow/get_tf_model_type.py": {
        "tensorflow": {}
    },
    "python/runtime/tensorflow/get_tf_version.py": {
        "tensorflow": {
            "split_20": {
                "variable": {
                    "value": "version_parts",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/tensorflow/import_model.py": {
        "tensorflow": {}
    },
    "python/runtime/tensorflow/input_fn.py": {
        "tensorflow": {
            "split_237": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen()",
                            "Call"
                        ],
                        [
                            "row[-1] if label_meta['feature_name'] else -1",
                            "IfExp"
                        ],
                        [
                            "tf.strings.to_number(tmp, out_type=tf.dtypes.float32)",
                            "Call"
                        ],
                        [
                            "tf.strings.to_number(tmp, out_type=tf.dtypes.int64)",
                            "Call"
                        ],
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "sep": {
                    "value": "label_meta['delimiter']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "label_meta",
                            "Method Argument"
                        ],
                        [
                            "label_meta",
                            "Method Argument"
                        ],
                        [
                            "label_meta",
                            "Method Argument"
                        ],
                        [
                            "label_meta",
                            "Method Argument"
                        ]
                    ]
                },
                "result_type": {
                    "value": "RaggedTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_176": {
                "variable": {
                    "value": "kvlist",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "raw_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_val",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "feature_spec['delimiter']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "result_type": {
                    "value": "RaggedTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_179": {
                "variable": {
                    "value": "kvsplited",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "kvlist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.split(raw_val, feature_spec['delimiter'], result_type='RaggedTensor')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "feature_spec['delimiter_kv']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "result_type": {
                    "value": "RaggedTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(kvsplited, [0, 0], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_185": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.strings.to_number(indices, feature_spec['dtype'])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_189": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(tf.shape(kvsplited)[1], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.strings.to_number(tf.reshape(tf.slice(kvsplited, [0, 1], [-1, 1]), [-1]), feature_spec['dtype_weight'])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.ones_like(indices, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_number_196": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.strings.split(raw_val, feature_spec['delimiter'], result_type='RaggedTensor')",
                    "type": "Call",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_200": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_201": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.slice(kvsplited, [0, 0], [-1, 1]), [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.strings.to_number(indices, feature_spec['dtype']), 1)",
                            "Call"
                        ],
                        [
                            "tf.strings.to_number(tf.strings.split(raw_val, feature_spec['delimiter'], result_type='RaggedTensor'), tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_number_205": {
                "input": {
                    "value": "tf.strings.split(raw_val, feature_spec['delimiter'], result_type='RaggedTensor')",
                    "type": "Call",
                    "possible_values": []
                },
                "out_type": {
                    "value": "feature_spec['dtype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_number_241": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.split(label, sep=label_meta['delimiter'], result_type='RaggedTensor')",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseTensor_30": {
                "variable": {
                    "value": "features_dict[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "col[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(tf.reshape(col[0], [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "col[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SparseTensor_33": {
                "variable": {
                    "value": "features_dict[_.join([name, weight])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "*col",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SparseTensor_41": {
                "variable": {
                    "value": "features_dict[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "*col",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SparseTensor_55": {
                "variable": {
                    "value": "features_dict[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "col[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(tf.reshape(col[0], [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "col[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SparseTensor_58": {
                "variable": {
                    "value": "features_dict[_.join([name, weight])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "*col",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SparseTensor_64": {
                "variable": {
                    "value": "features_dict[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "*col",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "split_206": {
                "value": {
                    "value": "raw_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_val",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "feature_spec['delimiter']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "result_type": {
                    "value": "RaggedTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseTensor_221": {
                "variable": {
                    "value": "features[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "f[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(tf.reshape(f[0], [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "f[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SparseTensor_224": {
                "variable": {
                    "value": "features[_.join([name, weight])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "f[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "f[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "f[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SparseTensor_226": {
                "variable": {
                    "value": "features[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "*f",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "to_number_243": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.split(label, sep=label_meta['delimiter'], result_type='RaggedTensor')",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.dtypes.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_184": {
                "input_": {
                    "value": "kvsplited",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.split(kvlist, feature_spec['delimiter_kv'], result_type='RaggedTensor').to_tensor()",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_number_186": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.slice(kvsplited, [0, 0], [-1, 1]), [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.strings.to_number(indices, feature_spec['dtype']), 1)",
                            "Call"
                        ],
                        [
                            "tf.strings.to_number(tf.strings.split(raw_val, feature_spec['delimiter'], result_type='RaggedTensor'), tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, 1)",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "feature_spec['dtype']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "equal_190": {
                "x": {
                    "value": "tf.shape(kvsplited)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_197": {
                "value": {
                    "value": "raw_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_val",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "feature_spec['delimiter']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "result_type": {
                    "value": "RaggedTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_200": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.slice(kvsplited, [0, 0], [-1, 1]), [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.strings.to_number(indices, feature_spec['dtype']), 1)",
                            "Call"
                        ],
                        [
                            "tf.strings.to_number(tf.strings.split(raw_val, feature_spec['delimiter'], result_type='RaggedTensor'), tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_31": {
                "input": {
                    "value": "tf.reshape(col[0], [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_56": {
                "input": {
                    "value": "tf.reshape(col[0], [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_number_191": {
                "input": {
                    "value": "tf.reshape(tf.slice(kvsplited, [0, 1], [-1, 1]), [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "out_type": {
                    "value": "feature_spec['dtype_weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_194": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.slice(kvsplited, [0, 0], [-1, 1]), [-1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.strings.to_number(indices, feature_spec['dtype']), 1)",
                            "Call"
                        ],
                        [
                            "tf.strings.to_number(tf.strings.split(raw_val, feature_spec['delimiter'], result_type='RaggedTensor'), tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(indices, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_222": {
                "input": {
                    "value": "tf.reshape(f[0], [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "tensor": {
                    "value": "col[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "tensor": {
                    "value": "col[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_190": {
                "input": {
                    "value": "kvsplited",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.split(kvlist, feature_spec['delimiter_kv'], result_type='RaggedTensor').to_tensor()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_192": {
                "tensor": {
                    "value": "tf.slice(kvsplited, [0, 1], [-1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_222": {
                "tensor": {
                    "value": "f[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_192": {
                "input_": {
                    "value": "kvsplited",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.strings.split(kvlist, feature_spec['delimiter_kv'], result_type='RaggedTensor').to_tensor()",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/tensorflow/keras_example_reg.py": {
        "tensorflow": {
            "numeric_column_33": {
                "key": {
                    "value": "'f%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/tensorflow/keras_with_feature_column_input.py": {
        "tensorflow": {
            "DenseFeatures_24": {
                "variable": {
                    "value": "self.feature_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feature_columns": {
                    "value": "feature_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params['feature_columns']",
                            "Subscript"
                        ],
                        [
                            "feature_columns",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "python/runtime/tensorflow/metrics.py": {
        "tensorflow": {
            "AUC_48": {
                "variable": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": []
                },
                "num_thresholds": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AUC_73": {
                "num_thresholds": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/tensorflow/predict.py": {
        "tensorflow": {
            "get_logger_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_41": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_211": {
                "variable": {
                    "value": "imported",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "export_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fn.read()",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_271": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SparseTensor_96": {
                "variable": {
                    "value": "features[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "row_val[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones_like(tf.reshape(row_val[0], [-1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "row_val[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SparseTensor_100": {
                "variable": {
                    "value": "features[_.join([name, weight])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "*row_val",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SparseTensor_107": {
                "variable": {
                    "value": "features[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "*row_val",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "constant_109": {
                "variable": {
                    "value": "features[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "([row_val],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_275": {
                "value": {
                    "value": "[example.SerializeToString()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_97": {
                "input": {
                    "value": "tf.reshape(row_val[0], [-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "row_val[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/tensorflow/set_log_level.py": {
        "tensorflow": {
            "get_logger_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_24": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "python/runtime/tensorflow/train_estimator.py": {
        "tensorflow": {
            "RunConfig_41": {
                "variable": {
                    "value": "model_params[config]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tf_random_seed": {
                    "value": "get_tf_random_seed()",
                    "type": "Call",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "save_checkpoints_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_checkpoints_steps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "build_parsing_serving_input_receiver_fn_78": {
                "variable": {
                    "value": "serving_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_spec": {
                    "value": "tf.feature_column.make_parse_example_spec(all_feature_columns)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_metrics_55": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_model(estimator, model_params)",
                            "Call"
                        ],
                        [
                            "tf.estimator.add_metrics(classifier, get_tf_metrics(metric_names))",
                            "Call"
                        ],
                        [
                            "classifier",
                            "Method Argument"
                        ]
                    ]
                },
                "metric_fn": {
                    "value": "get_tf_metrics(metric_names)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TrainSpec_94": {
                "variable": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "lambda : train_dataset_fn()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "max_steps": {
                    "value": "train_max_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_max_steps",
                            "Method Argument"
                        ],
                        [
                            "train_max_steps",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "EvalSpec_96": {
                "variable": {
                    "value": "eval_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "lambda : val_dataset_fn()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "start_delay_secs": {
                    "value": "eval_start_delay_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_start_delay_secs",
                            "Method Argument"
                        ],
                        [
                            "eval_start_delay_secs",
                            "Method Argument"
                        ]
                    ]
                },
                "throttle_secs": {
                    "value": "eval_throttle_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_throttle_secs",
                            "Method Argument"
                        ],
                        [
                            "eval_throttle_secs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_and_evaluate_100": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimator",
                            "Method Argument"
                        ],
                        [
                            "estimator",
                            "Method Argument"
                        ]
                    ]
                },
                "train_spec": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.TrainSpec(input_fn=lambda : train_dataset_fn(), max_steps=train_max_steps)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.EvalSpec(input_fn=lambda : val_dataset_fn(), start_delay_secs=eval_start_delay_secs, throttle_secs=eval_throttle_secs)",
                            "Call"
                        ]
                    ]
                }
            },
            "make_parse_example_spec_79": {
                "feature_columns": {
                    "value": "all_feature_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params['feature_columns']",
                            "Subscript"
                        ],
                        [
                            "copy.copy(model_params['linear_feature_columns'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/runtime/tensorflow/train_keras.py": {
        "tensorflow": {
            "ParameterServerStrategy_220": {
                "variable": {
                    "value": "dist_strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunConfig_222": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "tf_random_seed": {
                    "value": "get_tf_random_seed()",
                    "type": "Call",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "train_distribute": {
                    "value": "dist_strategy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.distribute.ParameterServerStrategy()",
                            "Call"
                        ]
                    ]
                },
                "session_config": {
                    "value": "tf.ConfigProto(log_device_placement=True, device_filters=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "model_to_estimator_230": {
                "variable": {
                    "value": "keras_estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "keras_model": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_model_with_feature_column(estimator, model_params, has_none_optimizer=has_none_optimizer)",
                            "Call"
                        ],
                        [
                            "keras_compile(estimator, model_params, metric_names)",
                            "Call"
                        ],
                        [
                            "init_model_with_feature_column(estimator, model_params, has_none_optimizer=True)",
                            "Call"
                        ],
                        [
                            "classifier",
                            "Method Argument"
                        ],
                        [
                            "classifier",
                            "Method Argument"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.checkpointDir",
                            "Attribute"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.RunConfig(tf_random_seed=get_tf_random_seed(), save_checkpoints_steps=100, train_distribute=dist_strategy, session_config=tf.ConfigProto(log_device_placement=True, device_filters=None))",
                            "Call"
                        ]
                    ]
                }
            },
            "build_parsing_serving_input_receiver_fn_252": {
                "variable": {
                    "value": "serving_input_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_spec": {
                    "value": "tf.feature_column.make_parse_example_spec(all_feature_columns)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adagrad_66": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "make_parse_example_spec_253": {
                "feature_columns": {
                    "value": "all_feature_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_params['feature_columns']",
                            "Subscript"
                        ],
                        [
                            "copy.copy(model_params['linear_feature_columns'])",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_225": {
                "log_device_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device_filters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "python/sql_data.py": {
        "tensorflow": {
            "numeric_column_73": {
                "key": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "python/symbol_extractor.py": {
        "tensorflow": {}
    }
}