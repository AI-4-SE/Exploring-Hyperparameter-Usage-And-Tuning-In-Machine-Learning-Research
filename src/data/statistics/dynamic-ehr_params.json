{
    "main.py": {
        "sklearn": {
            "roc_auc_score_83": {
                "variable": {
                    "value": "test_auroc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_loader.dataset.Y[:, -1]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [array(output)]",
                            "BinOp"
                        ],
                        [
                            "np.concatenate(outputs)[:, -1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_precision_score_84": {
                "variable": {
                    "value": "test_auprc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_loader.dataset.Y[:, -1]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [array(output)]",
                            "BinOp"
                        ],
                        [
                            "np.concatenate(outputs)[:, -1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_150": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EHR(arrs['X_train'], arrs['Y_train'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EHR(arrs['X_valid'], arrs['Y_valid'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_36": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(Y[:, None], (1, int(T)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_171": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(RES_DIR, 'model.h5')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_56": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_76": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dynehr/lstms.py": {
        "torch": {
            "zeros_37": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "O + [h]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(O, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.i2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.h2h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_106": {
                "variable": {
                    "value": "h_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates[:, -self.hidden_dim:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "c_t.tanh()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_75": {
                "variable": {
                    "value": "self.ln1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "4 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_76": {
                "variable": {
                    "value": "self.ln2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "4 * hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_77": {
                "variable": {
                    "value": "self.ln3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_105": {
                "input": {
                    "value": "i_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates[:, self.hidden_dim:-self.hidden_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preact[:, -self.hidden_dim:].tanh()",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_103": {
                "input": {
                    "value": "i_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates[:, self.hidden_dim:-self.hidden_dim]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "g_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preact[:, -self.hidden_dim:].tanh()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dynehr/model.py": {
        "torch": {
            "embedding_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.embedding(x, self.W)",
                            "Call"
                        ],
                        [
                            "self.reparameterize(mu, logvar)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(W).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_59": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_60": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_116": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "self.T / 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "out + [X_h_sum]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_172": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0 / 48",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_178": {
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "out + [X_h_sum]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "truncnorm.rvs(-t, t, size=[self.n_tokens, self.emb_dim])",
                            "Call"
                        ],
                        [
                            "np.concatenate((mu, logvar), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_166": {
                "input": {
                    "value": "2 * pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/helpers.py": {
        "torch": {
            "device_21": {
                "type": {
                    "value": "cuda if torch.cuda.is_available() and is_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_13": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}