{
    "fit.py": {
        "sklearn": {
            "GaussianMixture_185": {
                "variable": {
                    "value": "gm",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.1",
                    "possible_values": []
                },
                "reg_covar": {
                    "value": "0.15",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "clip_by_value_28": {
                "variable": {
                    "value": "y_pred_1",
                    "possible_values": []
                },
                "t": {
                    "value": "y_pred_1",
                    "possible_values": [
                        [
                            "y_pred",
                            "Name"
                        ],
                        [
                            "tf.clip_by_value(y_pred_1, 1e-07, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-07",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clip_by_value_29": {
                "variable": {
                    "value": "y_true_2",
                    "possible_values": []
                },
                "t": {
                    "value": "y_true_2",
                    "possible_values": [
                        [
                            "y_true",
                            "Name"
                        ],
                        [
                            "tf.clip_by_value(y_true_2, 0.0001, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_94": {
                "variable": {
                    "value": "loss_fn",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "possible_values": []
                }
            },
            "GradientTape_99": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_sum_148": {
                "variable": {
                    "value": "loss_value",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses * (1.0 / new_batch_size)",
                    "possible_values": []
                }
            },
            "reduce_sum_150": {
                "variable": {
                    "value": "loss_value",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses * (1.0 / global_batch_size)",
                    "possible_values": []
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "y_pred_2 * tf.math.log(y_true_2)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "log_31": {
                "x": {
                    "value": "y_true_2",
                    "possible_values": [
                        [
                            "y_true",
                            "Name"
                        ],
                        [
                            "tf.clip_by_value(y_true_2, 0.0001, 1.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CNND2L.py": {
        "tensorflow": {
            "Input_18": {
                "variable": {
                    "value": "img_input",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 32, 3)",
                    "possible_values": []
                }
            },
            "Model_63": {
                "inputs": {
                    "value": "img_input",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x",
                    "possible_values": [
                        [
                            "Conv2D(64, (3, 3), padding='same', kernel_initializer='he_normal', name='block1_conv1')(img_input)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(64, (3, 3), padding='same', kernel_initializer='he_normal', name='block1_conv2')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D((2, 2), strides=(2, 2), name='block1_pool')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(128, (3, 3), padding='same', kernel_initializer='he_normal', name='block2_conv1')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(128, (3, 3), padding='same', kernel_initializer='he_normal', name='block2_conv2')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D((2, 2), strides=(2, 2), name='block2_pool')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(196, (3, 3), padding='same', kernel_initializer='he_normal', name='block3_conv1')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(196, (3, 3), padding='same', kernel_initializer='he_normal', name='block3_conv2')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D((2, 2), strides=(2, 2), name='block3_pool')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten')(x)",
                            "Call"
                        ],
                        [
                            "Dense(256, kernel_initializer='he_normal', kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01), name='fc1')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu', name='lid')(x)",
                            "Call"
                        ],
                        [
                            "Dense(num_classes, kernel_initializer='he_normal')(x)",
                            "Call"
                        ],
                        [
                            "Activation('softmax')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_21": {
                "filters": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "name": {
                    "value": "block1_conv1",
                    "possible_values": []
                }
            },
            "BatchNormalization_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Activation_24": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Conv2D_25": {
                "filters": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "name": {
                    "value": "block1_conv2",
                    "possible_values": []
                }
            },
            "BatchNormalization_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Activation_28": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "MaxPooling2D_29": {
                "pool_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "name": {
                    "value": "block1_pool",
                    "possible_values": []
                }
            },
            "Conv2D_32": {
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "name": {
                    "value": "block2_conv1",
                    "possible_values": []
                }
            },
            "BatchNormalization_34": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Activation_35": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Conv2D_36": {
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "name": {
                    "value": "block2_conv2",
                    "possible_values": []
                }
            },
            "BatchNormalization_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Activation_39": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "MaxPooling2D_40": {
                "pool_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "name": {
                    "value": "block2_pool",
                    "possible_values": []
                }
            },
            "Conv2D_43": {
                "filters": {
                    "value": "196",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "name": {
                    "value": "block3_conv1",
                    "possible_values": []
                }
            },
            "BatchNormalization_45": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Activation_46": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Conv2D_47": {
                "filters": {
                    "value": "196",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "name": {
                    "value": "block3_conv2",
                    "possible_values": []
                }
            },
            "BatchNormalization_49": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Activation_50": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "MaxPooling2D_51": {
                "pool_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "name": {
                    "value": "block3_pool",
                    "possible_values": []
                }
            },
            "Flatten_53": {
                "name": {
                    "value": "flatten",
                    "possible_values": []
                }
            },
            "Dense_55": {
                "units": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(0.01)",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "l2(0.01)",
                    "possible_values": []
                },
                "name": {
                    "value": "fc1",
                    "possible_values": []
                }
            },
            "BatchNormalization_57": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Activation_58": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                },
                "name": {
                    "value": "lid",
                    "possible_values": []
                }
            },
            "Dense_60": {
                "units": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                }
            },
            "Activation_61": {
                "activation": {
                    "value": "softmax",
                    "possible_values": []
                }
            }
        }
    },
    "densenet.py": {
        "tensorflow": {
            "Input_38": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 32, 3)",
                    "possible_values": []
                }
            },
            "concat_21": {
                "values": {
                    "value": "[x, input]",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "Model_63": {
                "inputs": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "output",
                    "possible_values": [
                        [
                            "Dense(num_classes, activation='softmax', kernel_initializer=tf.keras.initializers.VarianceScaling(2.0), kernel_regularizer=l2(decay), bias_regularizer=l2(0))(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_10": {
                "filters": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "input.shape[3]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.RandomNormal(stddev=np.sqrt(2.0 / 9 / filters))",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(decay)",
                    "possible_values": []
                }
            },
            "BatchNormalization_16": {
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "Activation_18": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "rate": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "BatchNormalization_25": {
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "Activation_27": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Conv2D_28": {
                "filters": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "input.shape[3]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(decay)",
                    "possible_values": []
                }
            },
            "Activation_30": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "rate": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "AveragePooling2D_32": {
                "pool_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "possible_values": []
                }
            },
            "BatchNormalization_55": {
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "Activation_57": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dense_59": {
                "units": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.VarianceScaling(2.0)",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(decay)",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "l2(0)",
                    "possible_values": []
                }
            },
            "RandomNormal_11": {
                "stddev": {
                    "value": "np.sqrt(2.0 / 9 / filters)",
                    "possible_values": []
                }
            },
            "VarianceScaling_60": {
                "scale": {
                    "value": "2.0",
                    "possible_values": []
                }
            }
        }
    },
    "dictionaries.py": {
        "tensorflow": {
            "convert_to_tensor_53": {
                "variable": {
                    "value": "new_labels",
                    "possible_values": []
                },
                "value": {
                    "value": "new_labels",
                    "possible_values": [
                        [
                            "y_batch.numpy()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(new_labels)",
                            "Call"
                        ],
                        [
                            "np.delete(y_batch.numpy(), to_remove, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(new_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_73": {
                "variable": {
                    "value": "new_labels",
                    "possible_values": []
                },
                "value": {
                    "value": "new_labels",
                    "possible_values": [
                        [
                            "y_batch.numpy()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(new_labels)",
                            "Call"
                        ],
                        [
                            "np.delete(y_batch.numpy(), to_remove, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(new_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_74": {
                "variable": {
                    "value": "new_images",
                    "possible_values": []
                },
                "value": {
                    "value": "new_images",
                    "possible_values": [
                        [
                            "np.delete(x_batch.numpy(), to_remove, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(new_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_75": {
                "variable": {
                    "value": "new_filenames",
                    "possible_values": []
                },
                "value": {
                    "value": "new_filenames",
                    "possible_values": [
                        [
                            "np.delete(fn_batch_np, to_remove)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(new_filenames)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "load_data.py": {
        "tensorflow": {
            "split_17": {
                "variable": {
                    "value": "parts",
                    "possible_values": []
                },
                "value": {
                    "value": "file_path",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "os.path.sep",
                    "possible_values": []
                }
            },
            "split_24": {
                "variable": {
                    "value": "parts",
                    "possible_values": []
                },
                "value": {
                    "value": "file_path",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "os.path.sep",
                    "possible_values": []
                }
            },
            "decode_jpeg_29": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "contents": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(img, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "decode_img(img)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "to_categorical_170": {
                "variable": {
                    "value": "train_labels",
                    "possible_values": []
                },
                "y": {
                    "value": "train_labels",
                    "possible_values": [
                        [
                            "path_name + '_train_labels_' + noise + str(rate) + '.npy'",
                            "BinOp"
                        ],
                        [
                            "path_name + '_train_labels.npy'",
                            "BinOp"
                        ],
                        [
                            "np.load(train_labels)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(train_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_categorical_171": {
                "variable": {
                    "value": "test_labels",
                    "possible_values": []
                },
                "y": {
                    "value": "test_labels",
                    "possible_values": [
                        [
                            "path_name + '_test_labels.npy'",
                            "BinOp"
                        ],
                        [
                            "np.load(test_labels)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(test_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_33": {
                "images": {
                    "value": "img",
                    "possible_values": [
                        [
                            "tf.image.decode_jpeg(img, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ],
                        [
                            "decode_img(img)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[224, 224]",
                    "possible_values": []
                }
            },
            "read_file_85": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "filename": {
                    "value": "file_path",
                    "possible_values": []
                }
            },
            "per_image_standardization_159": {
                "variable": {
                    "value": "train_data",
                    "possible_values": []
                },
                "image": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "path_name + '_train_data_' + noise + str(rate) + '.npy'",
                            "BinOp"
                        ],
                        [
                            "path_name + '_train_data.npy'",
                            "BinOp"
                        ],
                        [
                            "np.load(train_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "train_data - means",
                            "BinOp"
                        ],
                        [
                            "tf.image.per_image_standardization(train_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "per_image_standardization_160": {
                "variable": {
                    "value": "test_data",
                    "possible_values": []
                },
                "image": {
                    "value": "test_data",
                    "possible_values": [
                        [
                            "path_name + '_test_data.npy'",
                            "BinOp"
                        ],
                        [
                            "np.load(test_data).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "test_data - means",
                            "BinOp"
                        ],
                        [
                            "tf.image.per_image_standardization(test_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "data_augmentation",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.experimental.preprocessing.RandomFlip('horizontal'), tf.keras.layers.experimental.preprocessing.RandomRotation(factor=0.06), tf.keras.layers.experimental.preprocessing.RandomTranslation(height_factor=0.2, width_factor=0.2, fill_mode='reflect')]",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "data_augmentation",
                    "possible_values": []
                },
                "layers": {
                    "value": "[tf.keras.layers.experimental.preprocessing.RandomTranslation(height_factor=0.2, width_factor=0.2, fill_mode='reflect'), tf.keras.layers.experimental.preprocessing.RandomFlip('horizontal')]",
                    "possible_values": []
                }
            },
            "RandomFlip_56": {
                "mode": {
                    "value": "horizontal",
                    "possible_values": []
                }
            },
            "RandomRotation_57": {
                "factor": {
                    "value": "0.06",
                    "possible_values": []
                }
            },
            "RandomTranslation_58": {
                "height_factor": {
                    "value": "0.2",
                    "possible_values": []
                },
                "width_factor": {
                    "value": "0.2",
                    "possible_values": []
                },
                "fill_mode": {
                    "value": "reflect",
                    "possible_values": []
                }
            },
            "RandomTranslation_67": {
                "height_factor": {
                    "value": "0.2",
                    "possible_values": []
                },
                "width_factor": {
                    "value": "0.2",
                    "possible_values": []
                },
                "fill_mode": {
                    "value": "reflect",
                    "possible_values": []
                }
            },
            "RandomFlip_69": {
                "mode": {
                    "value": "horizontal",
                    "possible_values": []
                }
            }
        }
    },
    "resnet32preact.py": {
        "tensorflow": {
            "Input_56": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "shape": {
                    "value": "(32, 32, 3)",
                    "possible_values": []
                }
            },
            "Model_96": {
                "inputs": {
                    "value": "input",
                    "possible_values": [
                        [
                            "Conv2D(filters=residual_shape[3], kernel_size=(1, 1), strides=(stride_width, stride_height), kernel_initializer='he_normal', padding='valid', kernel_regularizer=l2(decay))(input)",
                            "Call"
                        ],
                        [
                            "tf.keras.Input(shape=(32, 32, 3))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "dense",
                    "possible_values": [
                        [
                            "Dense(units=num_classes, kernel_initializer='he_normal', activation='softmax', kernel_regularizer=l2(decay), bias_regularizer=l2(0))(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_50": {
                "x": {
                    "value": "[input, res]",
                    "possible_values": []
                }
            },
            "Conv2D_60": {
                "filters": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "filters * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(decay)",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "l2(0)",
                    "possible_values": []
                }
            },
            "BatchNormalization_63": {
                "axis": {
                    "value": "BN_AXIS",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_64": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "BatchNormalization_85": {
                "axis": {
                    "value": "BN_AXIS",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_86": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "AveragePooling2D_88": {
                "pool_size": {
                    "value": "(8, 8)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "possible_values": []
                }
            },
            "Flatten_91": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dense_92": {
                "units": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(decay)",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "l2(0)",
                    "possible_values": []
                }
            },
            "Conv2D_27": {
                "filters": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "filters * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(stride, stride)",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(decay)",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "l2(0)",
                    "possible_values": []
                }
            },
            "BatchNormalization_31": {
                "axis": {
                    "value": "BN_AXIS",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_32": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Conv2D_33": {
                "filters": {
                    "value": "filters",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "filters * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(decay)",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "l2(0)",
                    "possible_values": []
                }
            },
            "BatchNormalization_22": {
                "axis": {
                    "value": "BN_AXIS",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "Activation_23": {
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Conv2D_45": {
                "filters": {
                    "value": "residual_shape[3]",
                    "possible_values": [
                        [
                            "K.int_shape(res)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(stride_width, stride_height)",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l2(decay)",
                    "possible_values": []
                }
            }
        }
    },
    "scheduler.py": {
        "tensorflow": {}
    },
    "training.py": {
        "tensorflow": {
            "CategoricalAccuracy_142": {
                "variable": {
                    "value": "test_accuracy",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ResNet50_53": {
                "variable": {
                    "value": "resnet50",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "possible_values": []
                },
                "pooling": {
                    "value": "avg",
                    "possible_values": []
                }
            },
            "Input_77": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, 3)",
                    "possible_values": []
                }
            },
            "Model_98": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(None, None, 3))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "predictions",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(num_classes, activation='softmax')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_100": {
                "variable": {
                    "value": "opt",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "possible_values": []
                },
                "decay": {
                    "value": "1e-06",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "clear_session_166": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "EfficientNetB0_57": {
                "variable": {
                    "value": "efficientnetB0",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "possible_values": []
                },
                "pooling": {
                    "value": "avg",
                    "possible_values": []
                }
            },
            "preprocess_input_80": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda image: tf.image.resize(image, (224, 224)))(inputs)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.resnet.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.efficientnet.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "resnet50(x, training=False)",
                            "Call"
                        ],
                        [
                            "efficientnetB0(x, training=False)",
                            "Call"
                        ],
                        [
                            "resnet50(x)",
                            "Call"
                        ],
                        [
                            "efficientnetB0(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(512, activation='relu')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "preprocess_input_82": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.keras.layers.Lambda(lambda image: tf.image.resize(image, (224, 224)))(inputs)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.resnet.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.efficientnet.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "resnet50(x, training=False)",
                            "Call"
                        ],
                        [
                            "efficientnetB0(x, training=False)",
                            "Call"
                        ],
                        [
                            "resnet50(x)",
                            "Call"
                        ],
                        [
                            "efficientnetB0(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(512, activation='relu')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_103": {
                "variable": {
                    "value": "opt",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "CustomScheduleC10(0.1)",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.0",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "Lambda_78": {
                "function": {
                    "value": "lambda image: tf.image.resize(image, (224, 224))",
                    "possible_values": []
                }
            },
            "Dense_95": {
                "units": {
                    "value": "512",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                }
            },
            "Dense_96": {
                "units": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "len(os.listdir(image_dir + '/train'))",
                            "Call"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "possible_values": []
                }
            },
            "SGD_106": {
                "variable": {
                    "value": "opt",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "CustomScheduleC100(0.1)",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.005",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "SGD_109": {
                "variable": {
                    "value": "opt",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "CustomScheduleC10(0.1)",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "resize_78": {
                "images": {
                    "value": "image",
                    "possible_values": []
                },
                "size": {
                    "value": "(224, 224)",
                    "possible_values": []
                }
            },
            "SGD_114": {
                "variable": {
                    "value": "opt",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "tf.keras.optimizers.schedules.PiecewiseConstantDecay(boundaries, values)",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.0",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "PiecewiseConstantDecay_114": {
                "boundaries": {
                    "value": "boundaries",
                    "possible_values": [
                        [
                            "[int(np.ceil(50000 / 128) * 50), int(np.ceil(50000 / 128) * 75)]",
                            "List"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "possible_values": [
                        [
                            "[0.1, 0.02, 0.004]",
                            "List"
                        ]
                    ]
                }
            }
        }
    }
}