{
    "scdc/initial/distribution/integral.py": {
        "tensorflow": {
            "logical_and_218": {
                "variable": {
                    "value": "angle_condition",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(tf.math.imag(cq3) == 0, tf.abs(cq3) <= 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_and(tf.math.imag(cq) == 0, tf.abs(cq) <= 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "tf.logical_and(tf.math.imag(c2x) == 0, tf.abs(c2x) <= 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_232": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deposit_condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * r1 * rq * cq - rq ** 2 > 0",
                            "Compare"
                        ]
                    ]
                },
                "y": {
                    "value": "angle_condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.logical_and(tf.math.imag(cq3) == 0, tf.abs(cq3) <= 1), tf.logical_and(tf.math.imag(cq) == 0, tf.abs(cq) <= 1), tf.logical_and(tf.math.imag(c2x) == 0, tf.abs(c2x) <= 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_233": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(deposit_condition, angle_condition)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.matrix_element(rq) * self.response(r3, r4, rq, self._omega(r1, rq, cq)) * self._jac(rq, r3, cq3) * r3 ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition, result, 0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.imag(result) == 0, result, 0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.is_finite(result), result, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_235": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.imag(result) == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.matrix_element(rq) * self.response(r3, r4, rq, self._omega(r1, rq, cq)) * self._jac(rq, r3, cq3) * r3 ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition, result, 0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.imag(result) == 0, result, 0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.is_finite(result), result, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_236": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.is_finite(result)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.matrix_element(rq) * self.response(r3, r4, rq, self._omega(r1, rq, cq)) * self._jac(rq, r3, cq3) * r3 ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition, result, 0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.imag(result) == 0, result, 0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.is_finite(result), result, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_253": {
                "x": {
                    "value": "tf.reduce_sum(components, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_219": {
                "x": {
                    "value": "tf.math.imag(cq3) == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(cq3) <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_223": {
                "x": {
                    "value": "tf.math.imag(cq) == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(cq) <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_and_227": {
                "x": {
                    "value": "tf.math.imag(c2x) == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(c2x) <= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_finite_236": {
                "x": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.matrix_element(rq) * self.response(r3, r4, rq, self._omega(r1, rq, cq)) * self._jac(rq, r3, cq3) * r3 ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition, result, 0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.imag(result) == 0, result, 0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.is_finite(result), result, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_253": {
                "input_tensor": {
                    "value": "components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pdf_fixed_sign(r1, rq, cq, r3, SIGNS[None, :])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "imag_235": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.matrix_element(rq) * self.response(r3, r4, rq, self._omega(r1, rq, cq)) * self._jac(rq, r3, cq3) * r3 ** 2",
                            "BinOp"
                        ],
                        [
                            "tf.where(condition, result, 0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.imag(result) == 0, result, 0)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.is_finite(result), result, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_220": {
                "input": {
                    "value": "cq3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-self.material.k_F_m ** 2 + r3 ** 2 + rq ** 2 + s * 2 * self.material.m_star_m * np.sqrt((E2 + E3 - E1) ** 2 - self.material.Delta_m ** 2 + 0j)) / (2 * r3 * rq)",
                            "BinOp"
                        ],
                        [
                            "self._cq3(r1, r2, r3, rq, s)",
                            "Call"
                        ],
                        [
                            "(rq ** 2 + r3 ** 2 - r4 ** 2) / (2 * r3 * rq)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_221": {
                "x": {
                    "value": "cq3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-self.material.k_F_m ** 2 + r3 ** 2 + rq ** 2 + s * 2 * self.material.m_star_m * np.sqrt((E2 + E3 - E1) ** 2 - self.material.Delta_m ** 2 + 0j)) / (2 * r3 * rq)",
                            "BinOp"
                        ],
                        [
                            "self._cq3(r1, r2, r3, rq, s)",
                            "Call"
                        ],
                        [
                            "(rq ** 2 + r3 ** 2 - r4 ** 2) / (2 * r3 * rq)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "imag_224": {
                "input": {
                    "value": "cq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(cq).reshape((-1,))[:, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_225": {
                "x": {
                    "value": "cq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(cq).reshape((-1,))[:, None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "imag_228": {
                "input": {
                    "value": "c2x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(r1 - cq * rq) / r2",
                            "BinOp"
                        ],
                        [
                            "(r2 ** 2 + rq * (r1 * cq - r3 * cq3 - r4 * cq4)) / (r1 * r2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_229": {
                "x": {
                    "value": "c2x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(r1 - cq * rq) / r2",
                            "BinOp"
                        ],
                        [
                            "(r2 ** 2 + rq * (r1 * cq - r3 * cq3 - r4 * cq4)) / (r1 * r2)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "scdc/initial/halo.py": {
        "tensorflow": {
            "cast_245": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(v1, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_160": {
                "condition": {
                    "value": "tf.logical_and(v1 == self.speed, c1 == self.cos_theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_178": {
                "condition": {
                    "value": "c1 == self.cos_theta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_196": {
                "condition": {
                    "value": "v1 == self.speed",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_161": {
                "x": {
                    "value": "v1 == self.speed",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "c1 == self.cos_theta",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_246": {
                "condition": {
                    "value": "v1 < self.v_esc",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_247": {
                "x": {
                    "value": "tf.cast(-v1 ** 2 / self.v_0 ** 2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_248": {
                "x": {
                    "value": "-v1 ** 2 / self.v_0 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scdc/initial/response.py": {
        "tensorflow": {
            "abs_44": {
                "x": {
                    "value": "self.material.coherence_uvvu(self.coherence_sign, r1, r2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_48": {
                "x": {
                    "value": "self.material.epsilon_lindhard(q, omega)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "scdc/material.py": {
        "tensorflow": {
            "cast_147": {
                "variable": {
                    "value": "e1c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.log(tf.abs((q / (2 * k_F) - omega / (q * v_F) + 1) / (q / (2 * k_F) - omega / (q * v_F) - 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_156": {
                "variable": {
                    "value": "e1e",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.log(tf.abs((q / (2 * k_F) + omega / (q * v_F) + 1) / (q / (2 * k_F) + omega / (q * v_F) - 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_164": {
                "variable": {
                    "value": "condition_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(q / (2 * k_F) - omega / (q * v_F)) < 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "1 < tf.math.real(q / (2 * k_F) + omega / (q * v_F))",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_168": {
                "variable": {
                    "value": "e2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "condition_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.real(q / (2 * k_F) + omega / (q * v_F)) < 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "3 * np.pi * omega_p ** 2 * omega / (2 * q ** 3 * v_F ** 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.where(condition_2, 3 * np.pi * omega_p ** 2 * k_F / (4 * q ** 3 * v_F ** 2) * (1 - (q / (2 * k_F) - omega / (q * v_F)) ** 2), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_198": {
                "variable": {
                    "value": "e1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.Delta_m ** 2 + xi1 ** 2 + 0j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_199": {
                "variable": {
                    "value": "e2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.Delta_m ** 2 + xi2 ** 2 + 0j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_200": {
                "variable": {
                    "value": "v1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(1 - xi1 / e1) / 2.0 + 0j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_201": {
                "variable": {
                    "value": "v2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(1 - xi2 / e2) / 2.0 + 0j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_202": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - v1 ** 2 + 0j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_203": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - v2 ** 2 + 0j",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_148": {
                "x": {
                    "value": "tf.abs((q / (2 * k_F) - omega / (q * v_F) + 1) / (q / (2 * k_F) - omega / (q * v_F) - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_157": {
                "x": {
                    "value": "tf.abs((q / (2 * k_F) + omega / (q * v_F) + 1) / (q / (2 * k_F) + omega / (q * v_F) - 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "real_163": {
                "input": {
                    "value": "q / (2 * k_F) + omega / (q * v_F)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_171": {
                "condition": {
                    "value": "condition_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.logical_and(tf.abs(q / (2 * k_F) - omega / (q * v_F)) < 1, 1 < tf.math.real(q / (2 * k_F) + omega / (q * v_F)))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "3 * np.pi * omega_p ** 2 * k_F / (4 * q ** 3 * v_F ** 2) * (1 - (q / (2 * k_F) - omega / (q * v_F)) ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_148": {
                "x": {
                    "value": "(q / (2 * k_F) - omega / (q * v_F) + 1) / (q / (2 * k_F) - omega / (q * v_F) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_157": {
                "x": {
                    "value": "(q / (2 * k_F) + omega / (q * v_F) + 1) / (q / (2 * k_F) + omega / (q * v_F) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_165": {
                "x": {
                    "value": "q / (2 * k_F) - omega / (q * v_F)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "real_166": {
                "input": {
                    "value": "q / (2 * k_F) + omega / (q * v_F)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_179": {
                "x": {
                    "value": "e2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(condition_1, 3 * np.pi * omega_p ** 2 * omega / (2 * q ** 3 * v_F ** 3), tf.where(condition_2, 3 * np.pi * omega_p ** 2 * k_F / (4 * q ** 3 * v_F ** 2) * (1 - (q / (2 * k_F) - omega / (q * v_F)) ** 2), 0))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(self.Delta_m ** 2 + xi2 ** 2 + 0j)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}