{
    "data.py": {
        "tensorflow": {
            "DEFINE_integer_11": {
                "name": {
                    "value": "min_word_frequency",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Minimum frequency of words in the vocabulary",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_14": {
                "name": {
                    "value": "max_sentence_len",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "160",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum Sentence Length",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_16": {
                "name": {
                    "value": "input_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "os.path.abspath('./data')",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Input directory containing original CSV data files (default = './data')\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "output_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "os.path.abspath('./data')",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "\"Output directory for TFrEcord files (default = './data')\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Example_80": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Example_102": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Example_126": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_160": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Example_143": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "driver.py": {
        "tensorflow": {
            "parse_single_example_57": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'context': tf.FixedLenFeature([config.MAX_SENTENCE_LEN], tf.int64), 'utterance': tf.FixedLenFeature([config.MAX_SENTENCE_LEN], tf.int64), 'context_len': tf.FixedLenFeature([], tf.int64), 'utterance_len': tf.FixedLenFeature([], tf.int64), 'label': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "embedding_lookup_82": {
                "variable": {
                    "value": "features[context]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('word_embeddings')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_embeddings', trainable=False, initializer=embeddings_matrix)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "features['context']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "embedding_lookup_83": {
                "variable": {
                    "value": "features[utterance]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('word_embeddings')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('word_embeddings', trainable=False, initializer=embeddings_matrix)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "features['utterance']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "py_func_114": {
                "variable": {
                    "value": "(context_tokenized, context_tokenized_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "strip_and_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[context]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.string, tf.int64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_115": {
                "variable": {
                    "value": "context_embedded",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "utils.get_bilm_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[os.path.join(BASE_DIR, 'data/options_test.json'), os.path.join(BASE_DIR, 'data/lm_weights_test.hdf5'), 50, context_tokenized]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_func_124": {
                "variable": {
                    "value": "(utterance_tokenized, utterance_tokenized_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "strip_and_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[utterance]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.string, tf.int64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "py_func_125": {
                "variable": {
                    "value": "utterance_embedded",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "utils.get_bilm_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[os.path.join(BASE_DIR, 'data/options_test.json'), os.path.join(BASE_DIR, 'data/lm_weights_test.hdf5'), 50, utterance_tokenized]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_147": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "in_files",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_195": {
                "variable": {
                    "value": "handle",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_217": {
                "variable": {
                    "value": "sess_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_219": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_conf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_232": {
                "variable": {
                    "value": "merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_233": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "checkpoints/train",
                    "type": "Constant",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_234": {
                "variable": {
                    "value": "validation_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "checkpoints/validation",
                    "type": "Constant",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_236": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConfigProto_347": {
                "variable": {
                    "value": "sess_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_349": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "sess_conf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_351": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "embeddings_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_133": {
                "x": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_to_collection_210": {
                "name": {
                    "value": "logits_tensor",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model.inference(next_batch)",
                            "Call"
                        ],
                        [
                            "model.inference(next_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_231": {
                "name": {
                    "value": "cross_entropy_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.create_loss()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "embeddings_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embeddings",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "embeddings_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "utils.build_embedding_matrix(os.path.join(BASE_DIR, config.EMBED_FILE), vocabulary=vocabulary, embed_len=config.EMBED_LEN, random=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_58": {
                "shape": {
                    "value": "[config.MAX_SENTENCE_LEN]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_59": {
                "shape": {
                    "value": "[config.MAX_SENTENCE_LEN]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_61": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_62": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Summary_289": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_145": {
                "value": {
                    "value": "in_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_284": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "report_uninitialized_variables_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "diag_55": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "[1.0] * self.n_neurons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "generated_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoding_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding_context.h",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.diag([1.0] * self.n_neurons)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_71": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(generated_response, encoding_utterance)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_72": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('B', shape=None, trainable=True, initializer=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_95": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_96": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_105": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.predicted_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_106": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_27": {
                "variable": {
                    "value": "cell_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_34": {
                "variable": {
                    "value": "(outputs_contexts, encoding_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.context_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.context_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_39": {
                "variable": {
                    "value": "cell_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_45": {
                "variable": {
                    "value": "(outputs_responses, encoding_utterance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_response",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.utterance_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.utterance_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_84": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_86": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "rnn_context",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "rnn_response",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "trainable_parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_71": {
                "x": {
                    "value": "generated_response",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "encoding_utterance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding_utterance.h",
                            "Attribute"
                        ]
                    ]
                }
            },
            "name_scope_83": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "input_tensor": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_84": {
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_19.py": {
        "tensorflow": {
            "diag_55": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "[1.0] * self.n_neurons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "generated_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoding_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding_context.h",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.diag([1.0] * self.n_neurons)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "generated_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoding_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding_context.h",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.diag([1.0] * self.n_neurons)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_64": {
                "variable": {
                    "value": "norm_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "generated_response",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ],
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ],
                        [
                            "tf.divide(generated_response, norm_vec)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "norm_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.norm(generated_response, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_vec, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.norm(encoding_utterance, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_vec, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_66": {
                "variable": {
                    "value": "generated_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "generated_response",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ],
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ],
                        [
                            "tf.divide(generated_response, norm_vec)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.norm(generated_response, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_vec, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.norm(encoding_utterance, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_vec, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_70": {
                "variable": {
                    "value": "norm_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoding_utterance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding_utterance.h",
                            "Attribute"
                        ],
                        [
                            "tf.divide(encoding_utterance, norm_vec)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "norm_vec",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.norm(generated_response, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_vec, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.norm(encoding_utterance, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_vec, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_72": {
                "variable": {
                    "value": "encoding_utterance",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoding_utterance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding_utterance.h",
                            "Attribute"
                        ],
                        [
                            "tf.divide(encoding_utterance, norm_vec)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "norm_vec",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.norm(generated_response, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_vec, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.norm(encoding_utterance, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_vec, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_82": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(generated_response, encoding_utterance)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_83": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('B', shape=None, trainable=True, initializer=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_106": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_107": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_108": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_116": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.predicted_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_117": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_27": {
                "variable": {
                    "value": "cell_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_34": {
                "variable": {
                    "value": "(outputs_contexts, encoding_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.context_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.context_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_39": {
                "variable": {
                    "value": "cell_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_45": {
                "variable": {
                    "value": "(outputs_responses, encoding_utterance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_response",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.utterance_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.utterance_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_95": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_97": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "rnn_context",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "rnn_response",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "trainable_parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_82": {
                "x": {
                    "value": "generated_response",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ],
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ],
                        [
                            "tf.divide(generated_response, norm_vec)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "encoding_utterance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding_utterance.h",
                            "Attribute"
                        ],
                        [
                            "tf.divide(encoding_utterance, norm_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_94": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "input_tensor": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_95": {
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_20.py": {
        "tensorflow": {
            "diag_55": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "[1.0] * self.n_neurons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_81": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logits_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pow(res1, poly_kernel_pow)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.add_n(logits_list)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_105": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pow(res1, poly_kernel_pow)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.add_n(logits_list)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_106": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_107": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_113": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_115": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.predicted_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_116": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_27": {
                "variable": {
                    "value": "cell_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_34": {
                "variable": {
                    "value": "(outputs_contexts, encoding_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.context_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.context_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_39": {
                "variable": {
                    "value": "cell_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_45": {
                "variable": {
                    "value": "(outputs_responses, encoding_utterance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_response",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.utterance_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.utterance_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_60": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'B_' + str(poly_kernel_pow)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "generated_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoding_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding_context.h",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.diag([1.0] * self.n_neurons)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_73": {
                "variable": {
                    "value": "res1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(generated_response, encoding_utterance)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_74": {
                "variable": {
                    "value": "res1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "res1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(res1, bias)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('B_' + str(poly_kernel_pow), shape=None, initializer=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_76": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "res1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(res1, bias)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "poly_kernel_pow",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(1, poly_kernel_pow_max + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_77": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pow(res1, poly_kernel_pow)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.add_n(logits_list)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('B_' + str(poly_kernel_pow), shape=None, initializer=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_94": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pow(res1, poly_kernel_pow)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.add_n(logits_list)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_96": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pow(res1, poly_kernel_pow)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.add_n(logits_list)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "rnn_context",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "rnn_response",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_93": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_117": {
                "input_tensor": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_73": {
                "x": {
                    "value": "generated_response",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "encoding_utterance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding_utterance.h",
                            "Attribute"
                        ]
                    ]
                }
            },
            "to_float_94": {
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_21.py": {
        "tensorflow": {
            "transpose_74": {
                "variable": {
                    "value": "outputs_contexts",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs_contexts",
                    "type": "Call",
                    "possible_values": [
                        [
                            "process_hidden_states(outputs_contexts, self.context_len, config.TRAIN_BATCH_SIZE, 160)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs_contexts, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_76": {
                "variable": {
                    "value": "outputs_responses",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs_responses",
                    "type": "Call",
                    "possible_values": [
                        [
                            "process_hidden_states(outputs_responses, self.utterance_len, config.TRAIN_BATCH_SIZE, 160)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs_responses, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_96": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.constant(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_99": {
                "variable": {
                    "value": "res1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs_contexts",
                    "type": "Call",
                    "possible_values": [
                        [
                            "process_hidden_states(outputs_contexts, self.context_len, config.TRAIN_BATCH_SIZE, 160)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs_contexts, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "outputs_responses",
                    "type": "Call",
                    "possible_values": [
                        [
                            "process_hidden_states(outputs_responses, self.utterance_len, config.TRAIN_BATCH_SIZE, 160)",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs_responses, perm=[1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "res2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "res1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(outputs_contexts, outputs_responses)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_102": {
                "variable": {
                    "value": "res3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "res2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(res1, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.constant(alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_103": {
                "variable": {
                    "value": "res4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "res3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(res2, alpha)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(res3, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_106": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(res4, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('B', shape=None, trainable=True, initializer=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(res4, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_130": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(res4, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_131": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_132": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_140": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.predicted_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_141": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_41": {
                "variable": {
                    "value": "cell_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_48": {
                "variable": {
                    "value": "(outputs_contexts, encoding_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.context_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.context_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_54": {
                "variable": {
                    "value": "cell_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_60": {
                "variable": {
                    "value": "(outputs_responses, encoding_utterance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_response",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.utterance_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.utterance_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_81": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_119": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(res4, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_121": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_147": {
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(res4, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_35": {
                "values": {
                    "value": "new_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "rnn_context",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "rnn_response",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "trainable_parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_118": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_126": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "input_tensor": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_30": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[states_zero, states_non_zero]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_int64_27": {
                "x": {
                    "value": "max_time",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_119": {
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_28": {
                "x": {
                    "value": "seq_len[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_29": {
                "x": {
                    "value": "seq_len[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model_22.py": {
        "tensorflow": {
            "diag_58": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "[1.0] * self.n_neurons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "generated_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoding_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding_context[1].h",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.diag([1.0] * self.n_neurons)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_74": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(generated_response, encoding_utterance)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_75": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('B', shape=None, trainable=True, initializer=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_98": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_99": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_100": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_108": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.predicted_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_109": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_33": {
                "variable": {
                    "value": "multi_layer_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cell_contexts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True) for layer in range(n_layers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "dynamic_rnn_36": {
                "variable": {
                    "value": "(outputs_contexts, encoding_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "multi_layer_cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell(cell_contexts)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cell_responses)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.context_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.context_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_46": {
                "variable": {
                    "value": "multi_layer_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "cell_responses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True) for layer in range(n_layers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "dynamic_rnn_48": {
                "variable": {
                    "value": "(outputs_responses, encoding_utterance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "multi_layer_cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell(cell_contexts)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(cell_responses)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.utterance_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.utterance_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_87": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_89": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_115": {
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "rnn_context",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "rnn_response",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "trainable_parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_74": {
                "x": {
                    "value": "generated_response",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "encoding_utterance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoding_utterance[1].h",
                            "Attribute"
                        ]
                    ]
                }
            },
            "name_scope_86": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "input_tensor": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_28": {
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_41": {
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_23.py": {
        "tensorflow": {
            "diag_81": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "[1.0] * self.n_neurons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "generated_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoding_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_states_context[0].h + output_states_context[1].h",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.diag([1.0] * self.n_neurons)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_97": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(generated_response, encoding_utterance)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_98": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('B', shape=None, trainable=True, initializer=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_99": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_116": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_122": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_123": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_131": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.predicted_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_132": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_27": {
                "variable": {
                    "value": "cell_context_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_31": {
                "variable": {
                    "value": "cell_context_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_37": {
                "variable": {
                    "value": "(outputs_context, output_states_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_context_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_context_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.context_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.context_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_52": {
                "variable": {
                    "value": "cell_response_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTMCell_56": {
                "variable": {
                    "value": "cell_response_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_62": {
                "variable": {
                    "value": "(outputs_response, output_states_response)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_response_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_response_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.utterance_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.utterance_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_85": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_110": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_112": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_138": {
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "rnn_context",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "rnn_response",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "trainable_parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_97": {
                "x": {
                    "value": "generated_response",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "encoding_utterance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_states_response[0].h + output_states_response[1].h",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_109": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_117": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "input_tensor": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_110": {
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_24.py": {
        "tensorflow": {
            "diag_69": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "[1.0] * self.n_neurons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "generated_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoding_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_states_context[0] + output_states_context[1]",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.diag([1.0] * self.n_neurons)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_85": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(generated_response, encoding_utterance)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_86": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('B', shape=None, trainable=True, initializer=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_104": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_110": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_111": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_119": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.predicted_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_120": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicRNNCell_27": {
                "variable": {
                    "value": "cell_context_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicRNNCell_28": {
                "variable": {
                    "value": "cell_context_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_31": {
                "variable": {
                    "value": "(outputs_context, output_states_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_context_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicRNNCell(self.n_neurons)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_context_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicRNNCell(self.n_neurons)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.context_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.context_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BasicRNNCell_46": {
                "variable": {
                    "value": "cell_response_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicRNNCell_47": {
                "variable": {
                    "value": "cell_response_bw",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_50": {
                "variable": {
                    "value": "(outputs_response, output_states_response)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_response_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicRNNCell(self.n_neurons)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_response_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicRNNCell(self.n_neurons)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.utterance_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.utterance_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "scope": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_98": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_100": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_126": {
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "rnn_context",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "rnn_response",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "trainable_parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_85": {
                "x": {
                    "value": "generated_response",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "encoding_utterance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output_states_response[0] + output_states_response[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_97": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_105": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_121": {
                "input_tensor": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_98": {
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_dual.py": {
        "tensorflow": {
            "concat_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.context_embedded, self.utterance_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_26": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.context_len, self.utterance_len]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_39": {
                "variable": {
                    "value": "(encoding_context, encoding_utterance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "rnn_states.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "generated_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoding_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('M', shape=[self.n_neurons, self.n_neurons], initializer=tf.truncated_normal_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_60": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(generated_response, encoding_utterance)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_61": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('B', shape=None, trainable=True, initializer=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_84": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_85": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_94": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.predicted_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_95": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_29": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_peepholes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_34": {
                "variable": {
                    "value": "(rnn_outputs, rnn_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self.n_neurons, forget_bias=2.0, use_peepholes=True, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.data_iterator.get_next()",
                            "Call"
                        ],
                        [
                            "tf.concat([self.context_embedded, self.utterance_embedded], 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.context_len, self.utterance_len], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "M",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_neurons, self.n_neurons]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_73": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_75": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_101": {
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "rnn",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "trainable_parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_60": {
                "x": {
                    "value": "generated_response",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "encoding_utterance",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_96": {
                "input_tensor": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_73": {
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model_dual_rnn.py": {
        "tensorflow": {
            "concat_25": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.context_embedded, self.utterance_embedded]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_26": {
                "variable": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.context_len, self.utterance_len]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_37": {
                "variable": {
                    "value": "(encoding_context, encoding_utterance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "rnn_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "generated_response",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoding_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('M', shape=[self.n_neurons, self.n_neurons], initializer=tf.truncated_normal_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_58": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(generated_response, encoding_utterance)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_59": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('B', shape=None, trainable=True, initializer=0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_82": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_83": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "probabilities",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_84": {
                "variable": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.predicted_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_92": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(self.predicted_labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_93": {
                "variable": {
                    "value": "truth_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicRNNCell_29": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.n_neurons",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_31": {
                "variable": {
                    "value": "(rnn_outputs, rnn_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicRNNCell(self.n_neurons)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.data_iterator.get_next()",
                            "Call"
                        ],
                        [
                            "tf.concat([self.context_embedded, self.utterance_embedded], 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([self.context_len, self.utterance_len], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_43": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "B",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "M",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_neurons, self.n_neurons]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_71": {
                "variable": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.to_float(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_73": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_99": {
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(generated_response, encoding_utterance), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.add(logits, bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "rnn",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "trainable_parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_58": {
                "x": {
                    "value": "generated_response",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(encoding_context, M)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "encoding_utterance",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_78": {
                "input_tensor": {
                    "value": "self.losses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "input_tensor": {
                    "value": "truth_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.equal(predicted_labels, labels)",
                            "Call"
                        ],
                        [
                            "tf.cast(truth_values, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_71": {
                "x": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "placeholder_83": {
                "variable": {
                    "value": "ids_placehoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None, max_token_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}