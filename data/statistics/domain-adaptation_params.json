{
    "cnn/cnn_classification.py": {
        "sklearn": {}
    },
    "cnn/cnn_classification_cross_event.py": {
        "sklearn": {}
    },
    "cnn/cnn_classification_lab_propagation.py": {
        "sklearn": {
            "LabelEncoder_48": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cnn/cnn_domain_adaptation.py": {
        "sklearn": {}
    },
    "cnn/cnn_domain_adaptation_nepal2.py": {
        "sklearn": {}
    },
    "cnn/cnn_feat_extract.py": {
        "sklearn": {
            "LabelEncoder_40": {
                "variable": {
                    "value": "le",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_96": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_tst, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(pred_prob, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_97": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_tst, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(pred_prob, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_98": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_tst, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(pred_prob, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_99": {
                "variable": {
                    "value": "F1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_tst, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(pred_prob, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_100": {
                "variable": {
                    "value": "AUC",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_tst, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(pred_prob, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "classification_report_101": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_tst, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(pred_prob, axis=1)",
                            "Call"
                        ],
                        [
                            "le.inverse_transform(y_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cnn/cnn_filter.py": {
        "sklearn": {}
    },
    "cnn/cnn_filter_lasagne.py": {
        "sklearn": {}
    },
    "cnn/cnn_filter_lasagne_nepal.py": {
        "sklearn": {}
    }
}