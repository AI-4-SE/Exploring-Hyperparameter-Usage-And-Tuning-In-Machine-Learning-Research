{
    "evaluation/competitors/eval_dataset.py": {
        "torch": {}
    },
    "evaluation/competitors/our/our.py": {
        "torch": {
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "points_A",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['points_A']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_A).float()",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_A, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_A)",
                            "Call"
                        ],
                        [
                            "normalization_wrt_lowres_mesh(points_A, points_A_1k)",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_A)",
                            "Call"
                        ],
                        [
                            "points_A[None, ...].to(self.device)",
                            "Call"
                        ],
                        [
                            "points_A[None, ...].to('cpu')",
                            "Call"
                        ],
                        [
                            "sample['points_A']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_A).float()",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_A, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_A, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_A, rescale=False)",
                            "Call"
                        ],
                        [
                            "points_A[None, ...].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "points_B",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['points_B']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "normalization_wrt_lowres_mesh(points_B, points_B_1k)",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to(self.device)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to('cpu')",
                            "Call"
                        ],
                        [
                            "sample['points_B']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B.numpy()",
                            "Call"
                        ],
                        [
                            "normalization_wrt_lowres_mesh(points_B, points_B_1k)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to(self.device)",
                            "Call"
                        ],
                        [
                            "points_B.to('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_193": {
                "variable": {
                    "value": "points_A",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['points_A']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_A).float()",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_A, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_A)",
                            "Call"
                        ],
                        [
                            "normalization_wrt_lowres_mesh(points_A, points_A_1k)",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_A)",
                            "Call"
                        ],
                        [
                            "points_A[None, ...].to(self.device)",
                            "Call"
                        ],
                        [
                            "points_A[None, ...].to('cpu')",
                            "Call"
                        ],
                        [
                            "sample['points_A']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_A).float()",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_A, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_A, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_A, rescale=False)",
                            "Call"
                        ],
                        [
                            "points_A[None, ...].to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_194": {
                "variable": {
                    "value": "points_B",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['points_B']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "normalization_wrt_lowres_mesh(points_B, points_B_1k)",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to(self.device)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to('cpu')",
                            "Call"
                        ],
                        [
                            "sample['points_B']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B.numpy()",
                            "Call"
                        ],
                        [
                            "normalization_wrt_lowres_mesh(points_B, points_B_1k)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to(self.device)",
                            "Call"
                        ],
                        [
                            "points_B.to('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cdist_225": {
                "variable": {
                    "value": "pred_matching_A_to_B",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "points_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['points_B']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "normalization_wrt_lowres_mesh(points_B, points_B_1k)",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to(self.device)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to('cpu')",
                            "Call"
                        ],
                        [
                            "sample['points_B']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B.numpy()",
                            "Call"
                        ],
                        [
                            "normalization_wrt_lowres_mesh(points_B, points_B_1k)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to(self.device)",
                            "Call"
                        ],
                        [
                            "points_B.to('cpu')",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "B_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(points_B, points_A)",
                            "Call"
                        ],
                        [
                            "refine_hires(self.model, points_B, points_A, self.refine_steps)",
                            "Call"
                        ],
                        [
                            "B_hat[-1]",
                            "Subscript"
                        ],
                        [
                            "B_hat.to('cpu')",
                            "Call"
                        ],
                        [
                            "B_hat.detach().cpu().squeeze()",
                            "Call"
                        ],
                        [
                            "area_weighted_denormalization(B_hat, torch.from_numpy(sample['points_B']))",
                            "Call"
                        ],
                        [
                            "self.model(points_B, points_A)",
                            "Call"
                        ],
                        [
                            "refine(self.model, points_B, points_A, self.refine_steps)",
                            "Call"
                        ],
                        [
                            "B_hat[-1]",
                            "Subscript"
                        ],
                        [
                            "B_hat.to('cpu')",
                            "Call"
                        ],
                        [
                            "B_hat.detach().cpu().squeeze()",
                            "Call"
                        ],
                        [
                            "area_weighted_denormalization(B_hat, torch.from_numpy(sample['points_B']))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_225": {
                "variable": {
                    "value": "pred_matching_A_to_B",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmin_225": {
                "variable": {
                    "value": "pred_matching_A_to_B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "CHECKPOINTS_ROOT / self.checkpoint_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DEVICE",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_210": {
                "variable": {
                    "value": "points_B",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample['points_B']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "normalization_wrt_lowres_mesh(points_B, points_B_1k)",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to(self.device)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to('cpu')",
                            "Call"
                        ],
                        [
                            "sample['points_B']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B, rescale=False)",
                            "Call"
                        ],
                        [
                            "area_weighted_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B.numpy()",
                            "Call"
                        ],
                        [
                            "normalization_wrt_lowres_mesh(points_B, points_B_1k)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(points_B).float()",
                            "Call"
                        ],
                        [
                            "naive_normalization(points_B)",
                            "Call"
                        ],
                        [
                            "points_B[None, ...].to(self.device)",
                            "Call"
                        ],
                        [
                            "points_B.to('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_229": {
                "ndarray": {
                    "value": "sample['points_B']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "ndarray": {
                    "value": "sample['points_B']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/utils.py": {
        "torch": {
            "cat_47": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "argmins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_97": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "randn_696": {
                "*size": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_46": {
                "x1": {
                    "value": "input1_chunk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chunks",
                            "variable"
                        ],
                        [
                            "chunks",
                            "variable"
                        ]
                    ]
                },
                "x2": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input1",
                            "variable"
                        ],
                        [
                            "input1",
                            "variable"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmin_46": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cdist_96": {
                "x1": {
                    "value": "input1_chunk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "chunks",
                            "variable"
                        ],
                        [
                            "chunks",
                            "variable"
                        ]
                    ]
                },
                "x2": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input1",
                            "variable"
                        ],
                        [
                            "input1",
                            "variable"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ],
                        [
                            "input2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_96": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "test/test.py": {
        "torch": {
            "load_28": {
                "f": {
                    "value": "'models/' + args.run_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cdist_61": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "points_A.float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "y_hat_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(points_A.unsqueeze(0).float().cuda(), points_B.unsqueeze(0).float().cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_64": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "points_B.float().cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "y_hat_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(points_B.unsqueeze(0).float().cuda(), points_A.unsqueeze(0).float().cuda())",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "shape_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes[shape_A_idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "ndarray": {
                    "value": "shape_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes[shape_B_idx]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "test/train.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SMPLDataset(args.path_data, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_62": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/' + args.run_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transmatching/Data/dataset_faust.py": {
        "torch": {
            "from_numpy_17": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.mat['vertices']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "self.reference",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trimesh.load_mesh(os.path.join(self.in_path, '12ktemplate.ply'), process=False).vertices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_37": {
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data[index]",
                            "Subscript"
                        ],
                        [
                            "shape * 0.7535",
                            "BinOp"
                        ],
                        [
                            "shape - (shape * (A / A.sum(-1, keepdims=True))[..., None]).sum(-2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "shape - torch.mean(shape, dim=-2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_38": {
                "input": {
                    "value": "self.reference",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "transmatching/Data/dataset_smpl.py": {
        "torch": {
            "from_numpy_17": {
                "variable": {
                    "value": "self.train_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(self.in_path, '12k_shapes_train.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_18": {
                "variable": {
                    "value": "self.test_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(os.path.join(self.in_path, '12k_shapes_test.npy'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "self.reference",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trimesh.load_mesh(os.path.join(self.in_path, '12ktemplate.ply'), process=False).vertices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_43": {
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.train_data[index]",
                            "Subscript"
                        ],
                        [
                            "RandomRotateCustom(shape, 180, 1)",
                            "Call"
                        ],
                        [
                            "self.test_data[index]",
                            "Subscript"
                        ],
                        [
                            "shape - (shape * (A / A.sum(-1, keepdims=True))[..., None]).sum(-2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "shape - torch.mean(shape, dim=-2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_44": {
                "input": {
                    "value": "self.reference",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "transmatching/Model/attention.py": {
        "torch": {
            "softmax_45": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(lq * lk).sum(-1) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.exp()",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(d_k)",
                            "BinOp"
                        ],
                        [
                            "scores * lw",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -1000000000.0)",
                            "Call"
                        ],
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(wscores)",
                            "Call"
                        ],
                        [
                            "attention(q, k, v, self.d_k, mask, self.dropout, weights)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "variable"
                        ],
                        [
                            "wscores * weights[:, None, None, :]",
                            "BinOp"
                        ],
                        [
                            "wscores / wscores.sum(-1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_linear(v).view(bs, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "v.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.q_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_latent",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.v_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.k_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_39": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_linear(q).view(bs, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "q.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transmatching/Model/decoder.py": {
        "torch": {
            "zeros_62": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_channels",
                            "Method Argument"
                        ],
                        [
                            "d_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_channels",
                            "Method Argument"
                        ],
                        [
                            "d_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_origin, d_channels // 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "d_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_origin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_channels // 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "d_channels // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "d_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "d_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_channels",
                            "Method Argument"
                        ],
                        [
                            "d_channels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "transmatching/Model/encoder.py": {
        "torch": {
            "zeros_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_60": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_channels",
                            "Method Argument"
                        ],
                        [
                            "d_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_latent",
                            "Method Argument"
                        ],
                        [
                            "d_latent",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_origin, d_channels // 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "d_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_origin",
                            "Method Argument"
                        ],
                        [
                            "d_origin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_channels // 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "d_channels // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "d_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "d_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_channels",
                            "Method Argument"
                        ],
                        [
                            "d_channels",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "transmatching/Model/feedforward.py": {
        "torch": {
            "Linear_9": {
                "variable": {
                    "value": "self.linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_10": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_14": {
                "input": {
                    "value": "self.linear_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transmatching/Model/layernorm.py": {
        "torch": {
            "Dropout_8": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_9": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "normalized_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalized_shape",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "transmatching/Model/model.py": {
        "torch": {
            "ones_49": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_50": {
                "variable": {
                    "value": "trg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(d_channels, d_origin * 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn((d_bottleneck, d_latent))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "d_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_origin * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "d_origin * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_origin * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "d_origin * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_origin * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "d_origin * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_origin * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "d_origin * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_origin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_origin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_28": {
                "*size": {
                    "value": "(d_bottleneck, d_latent)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transmatching/Model/norm.py": {
        "torch": {
            "Parameter_10": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_11": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_10": {
                "*size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_11": {
                "*size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transmatching/Model/pos_enc.py": {
        "torch": {
            "Parameter_9": {
                "variable": {
                    "value": "self.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(max_seq_len, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_9": {
                "*size": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_seq_len",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "transmatching/Utils/refine.py": {
        "torch": {
            "cdist_11": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X[None, ...], Y[None, sel, :].cuda())",
                            "Call"
                        ],
                        [
                            "model.out(d_out)",
                            "Call"
                        ],
                        [
                            "model.out(d_out)",
                            "Call"
                        ],
                        [
                            "model.out(d_out)",
                            "Call"
                        ],
                        [
                            "trg.cpu() * 0",
                            "BinOp"
                        ],
                        [
                            "y_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subsamp(src)",
                            "Call"
                        ],
                        [
                            "subsamp(src, 30000)",
                            "Call"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_26": {
                "variable": {
                    "value": "subsamp",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "Y.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "better",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loss1, loss2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_71": {
                "variable": {
                    "value": "better",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_108": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[e_opt]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "Method Argument"
                        ],
                        [
                            "0.005",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_167": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[e_opt]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "Method Argument"
                        ],
                        [
                            "0.005",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cdist_187": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X[None, ...], Y[None, sel, :].cuda())",
                            "Call"
                        ],
                        [
                            "model.out(d_out)",
                            "Call"
                        ],
                        [
                            "model.out(d_out)",
                            "Call"
                        ],
                        [
                            "model.out(d_out)",
                            "Call"
                        ],
                        [
                            "trg.cpu() * 0",
                            "BinOp"
                        ],
                        [
                            "y_hat",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subsamp(src)",
                            "Call"
                        ],
                        [
                            "subsamp(src, 30000)",
                            "Call"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_18": {
                "n": {
                    "value": "X.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_114": {
                "n": {
                    "value": "x_d_pe.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_173": {
                "n": {
                    "value": "x_d_pe.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "transmatching/Utils/utils.py": {
        "torch": {
            "cdist_41": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmin_52": {
                "variable": {
                    "value": "p2p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{k: shape[[i for i in range(shape.shape[-2]) if i % n_parts == k]] for k in range(n_parts)}",
                            "DictComp"
                        ],
                        [
                            "dijkstra(matrix, directed=False)",
                            "Call"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_65": {
                "variable": {
                    "value": "p2p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d1",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_66": {
                "variable": {
                    "value": "p2p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d2",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(shape, torch.Tensor(matrix).to(device))",
                            "Call"
                        ],
                        [
                            "torch.matmul(shape, torch.Tensor(matrix).to(device))",
                            "Call"
                        ],
                        [
                            "shape * 0.741",
                            "BinOp"
                        ],
                        [
                            "shape - (shape * (shape_area / shape_area.sum(-1, keepdims=True))[..., None]).sum(-2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.Tensor(matrix).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(shape, torch.Tensor(matrix).to(device))",
                            "Call"
                        ],
                        [
                            "torch.matmul(shape, torch.Tensor(matrix).to(device))",
                            "Call"
                        ],
                        [
                            "shape * 0.741",
                            "BinOp"
                        ],
                        [
                            "shape - (shape * (shape_area / shape_area.sum(-1, keepdims=True))[..., None]).sum(-2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.Tensor(matrix).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_205": {
                "variable": {
                    "value": "final",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_v",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_28": {
                "variable": {
                    "value": "Ds",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_47": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(shape, torch.Tensor(matrix).to(device))",
                            "Call"
                        ],
                        [
                            "torch.matmul(shape, torch.Tensor(matrix).to(device))",
                            "Call"
                        ],
                        [
                            "shape * 0.741",
                            "BinOp"
                        ],
                        [
                            "shape - (shape * (shape_area / shape_area.sum(-1, keepdims=True))[..., None]).sum(-2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.Tensor(matrix).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "input": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(shape, torch.Tensor(matrix).to(device))",
                            "Call"
                        ],
                        [
                            "torch.matmul(shape, torch.Tensor(matrix).to(device))",
                            "Call"
                        ],
                        [
                            "shape * 0.741",
                            "BinOp"
                        ],
                        [
                            "shape - (shape * (shape_area / shape_area.sum(-1, keepdims=True))[..., None]).sum(-2, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.Tensor(matrix).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}