{
    "scripts/downstream/train_sequence_classification_lm_finetuning.py": {
        "sklearn": {
            "LabelEncoder_310": {
                "variable": {
                    "value": "label_encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_285": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/downstream/train_sequence_classification_thai2fit.py": {
        "sklearn": {
            "f1_score_332": {
                "variable": {
                    "value": "d[f1_macro]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "precision_score_333": {
                "variable": {
                    "value": "d[precision_macro]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "recall_score_334": {
                "variable": {
                    "value": "d[recall_macro]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "f1_score_20": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "(probs > th / 100).astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_324": {
                "y_true": {
                    "value": "y_true.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_score_325": {
                "y_true": {
                    "value": "y_true.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "recall_score_326": {
                "y_true": {
                    "value": "y_true.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/downstream/train_sequence_multiclass_nbsvm.py": {
        "sklearn": {
            "TfidfVectorizer_112": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "process_thai",
                    "type": "variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "unicode",
                    "type": "str",
                    "possible_values": []
                },
                "use_idf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "smooth_idf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sublinear_tf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "OneHotEncoder_139": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "handle_unknown": {
                    "value": "ignore",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_33": {
                "y_true": {
                    "value": "labels_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i - 1 for i in dataset['validation'][args.label_col]]",
                            "ListComp"
                        ],
                        [
                            "dataset['validation'][args.label_col]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.argmax(1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_X_y_58": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(x, y, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.toarray().ravel() if type(y) != np.ndarray else y.ravel()",
                            "IfExp"
                        ],
                        [
                            "check_X_y(x, y, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogisticRegression_66": {
                "variable": {
                    "value": "self._clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "penalty": {
                    "value": "self.penalty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "C": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dual": {
                    "value": "self.dual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_is_fitted_47": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "attributes": {
                    "value": "['_r', '_clf']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "check_is_fitted_52": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "attributes": {
                    "value": "['_r', '_clf']",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/downstream/train_sequence_multilabel_nbsvm.py": {
        "sklearn": {
            "TfidfVectorizer_129": {
                "variable": {
                    "value": "tfidf",
                    "type": "variable",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "process_thai",
                    "type": "variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "unicode",
                    "type": "str",
                    "possible_values": []
                },
                "use_idf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "smooth_idf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sublinear_tf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "f1_score_45": {
                "y_true": {
                    "value": "labels_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs.argmax(1)",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], y_test.shape[1]))",
                            "Call"
                        ],
                        [
                            "np.zeros((x_test.shape[0], y_test.shape[1]))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_X_y_70": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(x, y, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.toarray().ravel() if type(y) != np.ndarray else y.ravel()",
                            "IfExp"
                        ],
                        [
                            "check_X_y(x, y, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogisticRegression_78": {
                "variable": {
                    "value": "self._clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "penalty": {
                    "value": "self.penalty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "C": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dual": {
                    "value": "self.dual",
                    "type": "Attribute",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "f1_score_217": {
                "variable": {
                    "value": "d[f1_macro]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "precision_score_218": {
                "variable": {
                    "value": "d[precision_macro]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "recall_score_219": {
                "variable": {
                    "value": "d[recall_macro]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "check_is_fitted_59": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "attributes": {
                    "value": "['_r', '_clf']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "check_is_fitted_64": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "attributes": {
                    "value": "['_r', '_clf']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "f1_score_206": {
                "y_true": {
                    "value": "y_test.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_score_207": {
                "y_true": {
                    "value": "y_test.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "recall_score_208": {
                "y_true": {
                    "value": "y_test.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_28": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.toarray().ravel() if type(y) != np.ndarray else y.ravel()",
                            "IfExp"
                        ],
                        [
                            "check_X_y(x, y, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "(probs > th / 100).astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/downstream/train_token_classificaition_lm_finetuning.py": {
        "sklearn": {
            "precision_recall_fscore_support_428": {
                "variable": {
                    "value": "(precision_macro, recall_macro, f1_macro, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "batch['labels']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**batch)",
                            "Call"
                        ],
                        [
                            "preds.argmax(2)",
                            "Call"
                        ],
                        [
                            "preds.tolist()",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_430": {
                "variable": {
                    "value": "(precision_micro, recall_micro, f1_micro, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "batch['labels']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**batch)",
                            "Call"
                        ],
                        [
                            "preds.argmax(2)",
                            "Call"
                        ],
                        [
                            "preds.tolist()",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_431": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "batch['labels']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**batch)",
                            "Call"
                        ],
                        [
                            "preds.argmax(2)",
                            "Call"
                        ],
                        [
                            "preds.tolist()",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_123": {
                "seed": {
                    "value": "training_args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_383": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_391": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/downstream/train_token_classification_lm_finetuning.py": {
        "sklearn": {
            "precision_recall_fscore_support_428": {
                "variable": {
                    "value": "(precision_macro, recall_macro, f1_macro, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "batch['labels']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**batch)",
                            "Call"
                        ],
                        [
                            "preds.argmax(2)",
                            "Call"
                        ],
                        [
                            "preds.tolist()",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_430": {
                "variable": {
                    "value": "(precision_micro, recall_micro, f1_micro, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "batch['labels']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**batch)",
                            "Call"
                        ],
                        [
                            "preds.argmax(2)",
                            "Call"
                        ],
                        [
                            "preds.tolist()",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_431": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "batch['labels']",
                            "Subscript"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(**batch)",
                            "Call"
                        ],
                        [
                            "preds.argmax(2)",
                            "Call"
                        ],
                        [
                            "preds.tolist()",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_123": {
                "seed": {
                    "value": "training_args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_383": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_391": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/downstream/train_token_pos_crf.py": {
        "sklearn": {
            "classification_report_79": {
                "y_true": {
                    "value": "labs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(tag) for row in labels for tag in row]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(tag) for row in y_pred for tag in row]",
                            "ListComp"
                        ]
                    ]
                },
                "target_names": {
                    "value": "tag_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset['train'].features[args.label_col].feature.names",
                            "Attribute"
                        ],
                        [
                            "[tag_labels[i] for i in range(len(tag_labels)) if i not in [13, 26]]",
                            "ListComp"
                        ],
                        [
                            "dataset['train'].features[args.label_col].feature.names",
                            "Attribute"
                        ],
                        [
                            "dataset['train'].features[args.label_col].feature.names",
                            "Attribute"
                        ],
                        [
                            "tag_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "digits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "f1_score_80": {
                "y_true": {
                    "value": "labs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(tag) for row in labels for tag in row]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(tag) for row in y_pred for tag in row]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_81": {
                "y_true": {
                    "value": "labs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(tag) for row in labels for tag in row]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(tag) for row in y_pred for tag in row]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "thai2transformers/metrics.py": {
        "sklearn": {
            "classification_report_14": {
                "variable": {
                    "value": "result[classification_report]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                },
                "digits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_21": {
                "variable": {
                    "value": "(precision_macro, recall_macro, f1_macro, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_22": {
                "variable": {
                    "value": "(precision_micro, recall_micro, f1_micro, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_23": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_42": {
                "variable": {
                    "value": "f1_macro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_45": {
                "variable": {
                    "value": "f1_micro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_46": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_96": {
                "variable": {
                    "value": "(precision_macro, recall_macro, f1_macro, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_97": {
                "variable": {
                    "value": "(precision_micro, recall_micro, f1_micro, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_98": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_56": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ],
                        [
                            "pred.label_ids",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                },
                "digits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "f1_score_65": {
                "y_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions if pred_labs else pred.predictions.argmax(-1)",
                            "IfExp"
                        ],
                        [
                            "pred.predictions",
                            "Attribute"
                        ],
                        [
                            "(probs > threshold / 100).astype(int)",
                            "Call"
                        ],
                        [
                            "np.array(probs > best_thresholds)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "thai2transformers/tokenizers.py": {
        "tensorflow": {
            "set_intra_op_parallelism_threads_132": {
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_inter_op_parallelism_threads_133": {
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/custom_data_collator.py": {
        "torch": {
            "tensor_77": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "batch['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/data_loader.py": {
        "torch": {
            "tensor_409": {
                "variable": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "data": {
                    "value": "self.memmap_index_dataset[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_377": {
                "data": {
                    "value": "self.memmap_index_dataset[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/run_mlm.py": {
        "torch": {
            "load_309": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(custom_args.model_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_312": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(custom_args.model_dir, 'pytorch_model.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "thai2transformers/datasets.py": {
        "torch": {
            "tensor_93": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "self.features[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.features[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_462": {
                "data": {
                    "value": "feature['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_463": {
                "data": {
                    "value": "feature['attention_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_464": {
                "data": {
                    "value": "feature['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_465": {
                "data": {
                    "value": "feature['word_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_311": {
                "data": {
                    "value": "self.input_ids[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "data": {
                    "value": "self.attention_masks[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_313": {
                "data": {
                    "value": "self.labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "data": {
                    "value": "self.input_ids[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "data": {
                    "value": "self.attention_masks[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_319": {
                "data": {
                    "value": "self.labels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "thai2transformers/finetuners.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(self.hparams.num_hidden, self.hparams.num_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_31": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_58": {
                "variable": {
                    "value": "active_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['attention_mask'].view(-1) == 1",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "batch['label'].view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(self.loss_fn.ignore_index).type_as(batch['label'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_220": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TokenClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.train_dir, max_length=self.hparams.max_length, label_pad_token=self.hparams.label_pad_token, label_first_subword=self.hparams.label_first_subword)",
                            "Call"
                        ],
                        [
                            "SequenceClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.train_dir, max_length=self.hparams.max_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.per_device_train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_287": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(self.hparams.num_hidden, self.hparams.num_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_292": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_455": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TokenClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.train_dir, max_length=self.hparams.max_length, label_pad_token=self.hparams.label_pad_token, label_first_subword=self.hparams.label_first_subword)",
                            "Call"
                        ],
                        [
                            "SequenceClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.train_dir, max_length=self.hparams.max_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.per_device_train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_258": {
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TokenClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.valid_dir, max_length=self.hparams.max_length, label_pad_token=self.hparams.label_pad_token, label_first_subword=self.hparams.label_first_subword)",
                            "Call"
                        ],
                        [
                            "SequenceClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.valid_dir, max_length=self.hparams.max_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.per_device_eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_273": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TokenClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.test_dir, max_length=self.hparams.max_length, label_pad_token=self.hparams.label_pad_token, label_first_subword=self.hparams.label_first_subword)",
                            "Call"
                        ],
                        [
                            "SequenceClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.test_dir, max_length=self.hparams.max_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.per_device_eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_491": {
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TokenClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.valid_dir, max_length=self.hparams.max_length, label_pad_token=self.hparams.label_pad_token, label_first_subword=self.hparams.label_first_subword)",
                            "Call"
                        ],
                        [
                            "SequenceClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.valid_dir, max_length=self.hparams.max_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.per_device_eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_504": {
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TokenClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.test_dir, max_length=self.hparams.max_length, label_pad_token=self.hparams.label_pad_token, label_first_subword=self.hparams.label_first_subword)",
                            "Call"
                        ],
                        [
                            "SequenceClassificationDataset(tokenizer=self.tokenizer, data_dir=self.hparams.test_dir, max_length=self.hparams.max_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.per_device_eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "self.hparams.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "p": {
                    "value": "self.hparams.drop_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "self.hparams.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "self.loss_fn.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_288": {
                "in_features": {
                    "value": "self.hparams.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_289": {
                "p": {
                    "value": "self.hparams.drop_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "in_features": {
                    "value": "self.hparams.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "thai2transformers/mmap.py": {
        "torch": {}
    },
    "thai2transformers/models.py": {
        "torch": {
            "Dropout_48": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_92": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_156": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}