{
    "run/gru_test.py": {
        "tensorflow": {}
    },
    "run/gru_train.py": {
        "tensorflow": {}
    },
    "run/gru_try.py": {
        "tensorflow": {}
    },
    "run/test_detail_model2.py": {
        "tensorflow": {}
    },
    "run/test_try.py": {
        "tensorflow": {}
    },
    "run/test_try_r2_model2.py": {
        "tensorflow": {}
    },
    "run/training_model2.py": {
        "tensorflow": {}
    },
    "src/gru_encoder.py": {
        "tensorflow": {
            "constant_24": {
                "value": {
                    "value": "orthogonal(shape) * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_64": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reset_default_graph_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self._desc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._length1, self._wv_dim1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "desc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self._ndesc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._length1, self._wv_dim1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ndesc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self._desc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._length2, self._wv_dim2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "desc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self._ndesc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._length2, self._wv_dim2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ndesc2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "self._M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "M",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.dim, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_102": {
                "variable": {
                    "value": "gru_1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._wv_dim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_107": {
                "variable": {
                    "value": "gru_3",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._wv_dim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_112": {
                "variable": {
                    "value": "gru_5",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._wv_dim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1D_117": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "self._wv_dim1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "self._common_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_126": {
                "variable": {
                    "value": "DS3",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self._last_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_129": {
                "variable": {
                    "value": "self._att1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_130": {
                "variable": {
                    "value": "self._att2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_131": {
                "variable": {
                    "value": "self._att3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1D_133": {
                "variable": {
                    "value": "MP1",
                    "type": "variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "self._common_pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool1D_134": {
                "variable": {
                    "value": "MP2",
                    "type": "variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "self._common_pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPool1D_135": {
                "variable": {
                    "value": "MP3",
                    "type": "variable",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "self._common_pool_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_139": {
                "variable": {
                    "value": "DR1",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "variable": {
                    "value": "DR2",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_153": {
                "variable": {
                    "value": "att1_w",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att1(mp1_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "att1_nw",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att1(mp1_nb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_155": {
                "variable": {
                    "value": "att2_w",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att1(mp2_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_156": {
                "variable": {
                    "value": "att2_nw",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att1(mp2_nb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_171": {
                "variable": {
                    "value": "mp1_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mp1_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc1_batch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_b, tf.scalar_mul(size1, att1_w))",
                            "Call"
                        ],
                        [
                            "gru_5(mp1_b)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_b, att1_w)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.scalar_mul(size1, att1_w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_172": {
                "variable": {
                    "value": "mp1_nb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mp1_nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc1_nbatch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_nb, tf.scalar_mul(size1, att1_nw))",
                            "Call"
                        ],
                        [
                            "gru_5(mp1_nb)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_nb, att1_nw)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.scalar_mul(size1, att1_nw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_173": {
                "variable": {
                    "value": "mp2_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mp2_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc2_batch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_b, tf.scalar_mul(size1, att2_w))",
                            "Call"
                        ],
                        [
                            "gru_5(mp2_b)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_b, att2_w)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.scalar_mul(size1, att2_w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_174": {
                "variable": {
                    "value": "mp2_nb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mp2_nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc2_nbatch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_nb, tf.scalar_mul(size1, att2_nw))",
                            "Call"
                        ],
                        [
                            "gru_5(mp2_nb)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_nb, att2_nw)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.scalar_mul(size1, att2_nw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_201": {
                "variable": {
                    "value": "att1_w",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att3(mp1_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_202": {
                "variable": {
                    "value": "att1_nw",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att3(mp1_nb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_203": {
                "variable": {
                    "value": "att2_w",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att3(mp2_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_204": {
                "variable": {
                    "value": "att2_nw",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "att3(mp2_nb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_206": {
                "variable": {
                    "value": "mp1_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mp1_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc1_batch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_b, tf.scalar_mul(size1, att1_w))",
                            "Call"
                        ],
                        [
                            "gru_5(mp1_b)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_b, att1_w)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "att1_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.keras.activations.softmax(att1(mp1_b), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.keras.activations.softmax(att3(mp1_b), axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_207": {
                "variable": {
                    "value": "mp1_nb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mp1_nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc1_nbatch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_nb, tf.scalar_mul(size1, att1_nw))",
                            "Call"
                        ],
                        [
                            "gru_5(mp1_nb)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_nb, att1_nw)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "att1_nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.keras.activations.softmax(att1(mp1_nb), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.keras.activations.softmax(att3(mp1_nb), axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_208": {
                "variable": {
                    "value": "mp2_b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mp2_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc2_batch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_b, tf.scalar_mul(size1, att2_w))",
                            "Call"
                        ],
                        [
                            "gru_5(mp2_b)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_b, att2_w)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "att2_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.keras.activations.softmax(att1(mp2_b), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.keras.activations.softmax(att3(mp2_b), axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_209": {
                "variable": {
                    "value": "mp2_nb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mp2_nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc2_nbatch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_nb, tf.scalar_mul(size1, att2_nw))",
                            "Call"
                        ],
                        [
                            "gru_5(mp2_nb)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_nb, att2_nw)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "att2_nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.keras.activations.softmax(att1(mp2_nb), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.keras.activations.softmax(att3(mp2_nb), axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_212": {
                "variable": {
                    "value": "ds1_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mp1_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc1_batch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_b, tf.scalar_mul(size1, att1_w))",
                            "Call"
                        ],
                        [
                            "gru_5(mp1_b)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_b, att1_w)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_213": {
                "variable": {
                    "value": "ds1_nb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mp1_nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc1_nbatch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_nb, tf.scalar_mul(size1, att1_nw))",
                            "Call"
                        ],
                        [
                            "gru_5(mp1_nb)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp1_nb, att1_nw)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_214": {
                "variable": {
                    "value": "ds2_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mp2_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc2_batch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_b, tf.scalar_mul(size1, att2_w))",
                            "Call"
                        ],
                        [
                            "gru_5(mp2_b)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_b, att2_w)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_215": {
                "variable": {
                    "value": "ds2_nb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "mp2_nb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1(gru_1(AM_desc2_nbatch))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_nb, tf.scalar_mul(size1, att2_nw))",
                            "Call"
                        ],
                        [
                            "gru_5(mp2_nb)",
                            "Call"
                        ],
                        [
                            "tf.multiply(mp2_nb, att2_nw)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_227": {
                "variable": {
                    "value": "eb_desc_batch1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "DS3(ds1_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_228": {
                "variable": {
                    "value": "eb_desc_nbatch1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "DS3(ds1_nb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_229": {
                "variable": {
                    "value": "eb_desc_batch2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "DS3(ds2_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_230": {
                "variable": {
                    "value": "eb_desc_nbatch2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "DS3(ds2_nb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_237": {
                "variable": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((self._batch_sizeA, self._batch_sizeA), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(indicator)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_254": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_255": {
                "variable": {
                    "value": "self._opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_263": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "graph",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "orthogonal_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_171": {
                "scalar": {
                    "value": "size1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._att_scalar1",
                            "Attribute"
                        ]
                    ]
                },
                "x": {
                    "value": "att1_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.keras.activations.softmax(att1(mp1_b), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.keras.activations.softmax(att3(mp1_b), axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_mul_172": {
                "scalar": {
                    "value": "size1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._att_scalar1",
                            "Attribute"
                        ]
                    ]
                },
                "x": {
                    "value": "att1_nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.keras.activations.softmax(att1(mp1_nb), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.keras.activations.softmax(att3(mp1_nb), axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_mul_173": {
                "scalar": {
                    "value": "size1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._att_scalar1",
                            "Attribute"
                        ]
                    ]
                },
                "x": {
                    "value": "att2_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.keras.activations.softmax(att1(mp2_b), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.keras.activations.softmax(att3(mp2_b), axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_mul_174": {
                "scalar": {
                    "value": "size1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._att_scalar1",
                            "Attribute"
                        ]
                    ]
                },
                "x": {
                    "value": "att2_nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.keras.activations.softmax(att1(mp2_nb), axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.keras.activations.softmax(att3(mp2_nb), axis=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_249": {
                "input_tensor": {
                    "value": "tf.log(tf.sigmoid(tf.multiply(tf.matmul(eb_desc_batch1, tf.transpose(eb_desc_batch2)), indicator)) + self._epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_249": {
                "x": {
                    "value": "tf.sigmoid(tf.multiply(tf.matmul(eb_desc_batch1, tf.transpose(eb_desc_batch2)), indicator)) + self._epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_249": {
                "x": {
                    "value": "tf.multiply(tf.matmul(eb_desc_batch1, tf.transpose(eb_desc_batch2)), indicator)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_249": {
                "x": {
                    "value": "tf.matmul(eb_desc_batch1, tf.transpose(eb_desc_batch2))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "indicator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty((self._batch_sizeA, self._batch_sizeA), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant(indicator)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_249": {
                "a": {
                    "value": "eb_desc_batch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(DS3(ds1_b), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(eb_desc_batch2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_249": {
                "a": {
                    "value": "eb_desc_batch2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(DS3(ds2_b), dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/learner_gru.py": {
        "tensorflow": {
            "Session_224": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_57": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/model2.py": {
        "tensorflow": {
            "constant_24": {
                "value": {
                    "value": "orthogonal(shape) * scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reset_default_graph_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_62": {
                "variable": {
                    "value": "self._ht1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ht1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_entsA, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "self._r1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "r1",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_relsA, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "self._ht2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ht2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_entsB, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "self._r2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "r2",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._num_relsB, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_normalize_80": {
                "variable": {
                    "value": "self._ht1_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "ht1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_81": {
                "variable": {
                    "value": "self._ht2_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "ht2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "self._M",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "M",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.dim, self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "orthogonal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_91": {
                "variable": {
                    "value": "self._b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self._A_h_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "A_h_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "self._A_r_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "A_r_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "self._A_t_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "A_t_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "self._A_hn_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "A_hn_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "self._A_tn_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "A_tn_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_127": {
                "variable": {
                    "value": "A_h_ent_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, A_h_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_128": {
                "variable": {
                    "value": "A_t_ent_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, A_t_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_129": {
                "variable": {
                    "value": "A_rel_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "r1",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "A_r_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l2_normalize_131": {
                "variable": {
                    "value": "A_hn_ent_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, A_hn_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_132": {
                "variable": {
                    "value": "A_tn_ent_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, A_tn_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_135": {
                "variable": {
                    "value": "A_loss_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(A_h_ent_batch, A_rel_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "A_t_ent_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_t_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_137": {
                "variable": {
                    "value": "A_neg_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(A_hn_ent_batch, A_rel_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "A_tn_ent_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_tn_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "self._B_h_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "B_h_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "self._B_r_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "B_r_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_165": {
                "variable": {
                    "value": "self._B_t_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "B_t_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "self._B_hn_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "B_hn_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "self._B_tn_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeK]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "B_tn_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_178": {
                "variable": {
                    "value": "B_h_ent_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, B_h_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_179": {
                "variable": {
                    "value": "B_t_ent_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, B_t_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_180": {
                "variable": {
                    "value": "B_rel_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "r2",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "B_r_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l2_normalize_182": {
                "variable": {
                    "value": "B_hn_ent_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, B_hn_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_183": {
                "variable": {
                    "value": "B_tn_ent_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, B_tn_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_186": {
                "variable": {
                    "value": "B_loss_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(B_h_ent_batch, B_rel_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "B_t_ent_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_t_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_188": {
                "variable": {
                    "value": "B_neg_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(B_hn_ent_batch, B_rel_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "B_tn_ent_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_tn_index), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_207": {
                "variable": {
                    "value": "self._AM_index1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeA]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "AM_index1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_211": {
                "variable": {
                    "value": "self._AM_index2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeA]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "AM_index2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_216": {
                "variable": {
                    "value": "self._AM_nindex1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeA]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "AM_nindex1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_220": {
                "variable": {
                    "value": "self._AM_nindex2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._batch_sizeA]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "AM_nindex2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_225": {
                "variable": {
                    "value": "AM_ent1_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, AM_index1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_226": {
                "variable": {
                    "value": "AM_ent2_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, AM_index2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_227": {
                "variable": {
                    "value": "AM_ent1_nbatch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht1, AM_nindex1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_228": {
                "variable": {
                    "value": "AM_ent2_nbatch",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(ht2, AM_nindex2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_230": {
                "variable": {
                    "value": "AM_loss_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(AM_ent1_batch, M)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "AM_ent2_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, AM_index2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_244": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_245": {
                "variable": {
                    "value": "self._opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_251": {
                "variable": {
                    "value": "self._saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "graph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_127": {
                "params": {
                    "value": "ht1",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "A_h_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_128": {
                "params": {
                    "value": "ht1",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "A_t_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_131": {
                "params": {
                    "value": "ht1",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "A_hn_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_132": {
                "params": {
                    "value": "ht1",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "A_tn_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_135": {
                "x": {
                    "value": "A_h_ent_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_h_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "A_rel_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r1, A_r_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_137": {
                "x": {
                    "value": "A_hn_ent_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, A_hn_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "A_rel_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r1, A_r_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_178": {
                "params": {
                    "value": "ht2",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "B_h_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_179": {
                "params": {
                    "value": "ht2",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "B_t_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_182": {
                "params": {
                    "value": "ht2",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "B_hn_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_183": {
                "params": {
                    "value": "ht2",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "B_tn_index",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_186": {
                "x": {
                    "value": "B_h_ent_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_h_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "B_rel_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r2, B_r_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_188": {
                "x": {
                    "value": "B_hn_ent_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht2, B_hn_index), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "B_rel_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(r2, B_r_index)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_225": {
                "params": {
                    "value": "ht1",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "AM_index1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_226": {
                "params": {
                    "value": "ht2",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "AM_index2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_227": {
                "params": {
                    "value": "ht1",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "AM_nindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_228": {
                "params": {
                    "value": "ht2",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "AM_nindex2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_230": {
                "a": {
                    "value": "AM_ent1_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.l2_normalize(tf.nn.embedding_lookup(ht1, AM_index1), 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "input_tensor": {
                    "value": "tf.maximum(tf.subtract(tf.add(tf.reduce_sum(tf.abs(A_loss_matrix), 1), self._m1), tf.reduce_sum(tf.abs(A_neg_matrix), 1)), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_149": {
                "input_tensor": {
                    "value": "tf.maximum(tf.subtract(tf.add(tf.sqrt(tf.reduce_sum(tf.square(A_loss_matrix), 1)), self._m1), tf.sqrt(tf.reduce_sum(tf.square(A_neg_matrix), 1))), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_193": {
                "input_tensor": {
                    "value": "tf.maximum(tf.subtract(tf.add(tf.reduce_sum(tf.abs(B_loss_matrix), 1), self._m1), tf.reduce_sum(tf.abs(B_neg_matrix), 1)), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_200": {
                "input_tensor": {
                    "value": "tf.maximum(tf.subtract(tf.add(tf.sqrt(tf.reduce_sum(tf.square(B_loss_matrix), 1)), self._m1), tf.sqrt(tf.reduce_sum(tf.square(B_neg_matrix), 1))), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_233": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.abs(AM_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_237": {
                "input_tensor": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(AM_loss_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_143": {
                "x": {
                    "value": "tf.subtract(tf.add(tf.reduce_sum(tf.abs(A_loss_matrix), 1), self._m1), tf.reduce_sum(tf.abs(A_neg_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_150": {
                "x": {
                    "value": "tf.subtract(tf.add(tf.sqrt(tf.reduce_sum(tf.square(A_loss_matrix), 1)), self._m1), tf.sqrt(tf.reduce_sum(tf.square(A_neg_matrix), 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_194": {
                "x": {
                    "value": "tf.subtract(tf.add(tf.reduce_sum(tf.abs(B_loss_matrix), 1), self._m1), tf.reduce_sum(tf.abs(B_neg_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_201": {
                "x": {
                    "value": "tf.subtract(tf.add(tf.sqrt(tf.reduce_sum(tf.square(B_loss_matrix), 1)), self._m1), tf.sqrt(tf.reduce_sum(tf.square(B_neg_matrix), 1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_234": {
                "input_tensor": {
                    "value": "tf.abs(AM_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_238": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(AM_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_144": {
                "x": {
                    "value": "tf.add(tf.reduce_sum(tf.abs(A_loss_matrix), 1), self._m1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(tf.abs(A_neg_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_151": {
                "x": {
                    "value": "tf.add(tf.sqrt(tf.reduce_sum(tf.square(A_loss_matrix), 1)), self._m1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(A_neg_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_195": {
                "x": {
                    "value": "tf.add(tf.reduce_sum(tf.abs(B_loss_matrix), 1), self._m1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_sum(tf.abs(B_neg_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_202": {
                "x": {
                    "value": "tf.add(tf.sqrt(tf.reduce_sum(tf.square(B_loss_matrix), 1)), self._m1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(B_neg_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_234": {
                "x": {
                    "value": "AM_loss_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.matmul(AM_ent1_batch, M), AM_ent2_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_238": {
                "input_tensor": {
                    "value": "tf.square(AM_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_144": {
                "x": {
                    "value": "tf.reduce_sum(tf.abs(A_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_145": {
                "input_tensor": {
                    "value": "tf.abs(A_neg_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_151": {
                "x": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(A_loss_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_152": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(A_neg_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_195": {
                "x": {
                    "value": "tf.reduce_sum(tf.abs(B_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_196": {
                "input_tensor": {
                    "value": "tf.abs(B_neg_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_202": {
                "x": {
                    "value": "tf.sqrt(tf.reduce_sum(tf.square(B_loss_matrix), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self._m1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_203": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(B_neg_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_238": {
                "x": {
                    "value": "AM_loss_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.matmul(AM_ent1_batch, M), AM_ent2_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_144": {
                "input_tensor": {
                    "value": "tf.abs(A_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_145": {
                "x": {
                    "value": "A_neg_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_hn_ent_batch, A_rel_batch), A_tn_ent_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_151": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(A_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "input_tensor": {
                    "value": "tf.square(A_neg_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_195": {
                "input_tensor": {
                    "value": "tf.abs(B_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_196": {
                "x": {
                    "value": "B_neg_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_hn_ent_batch, B_rel_batch), B_tn_ent_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_202": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(B_loss_matrix), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_203": {
                "input_tensor": {
                    "value": "tf.square(B_neg_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_144": {
                "x": {
                    "value": "A_loss_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_h_ent_batch, A_rel_batch), A_t_ent_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_151": {
                "input_tensor": {
                    "value": "tf.square(A_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_152": {
                "x": {
                    "value": "A_neg_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_hn_ent_batch, A_rel_batch), A_tn_ent_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_195": {
                "x": {
                    "value": "B_loss_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_h_ent_batch, B_rel_batch), B_t_ent_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_202": {
                "input_tensor": {
                    "value": "tf.square(B_loss_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_203": {
                "x": {
                    "value": "B_neg_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_hn_ent_batch, B_rel_batch), B_tn_ent_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_151": {
                "x": {
                    "value": "A_loss_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(A_h_ent_batch, A_rel_batch), A_t_ent_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_202": {
                "x": {
                    "value": "B_loss_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(tf.add(B_h_ent_batch, B_rel_batch), B_t_ent_batch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/tester_MTransE2.py": {
        "tensorflow": {
            "Session_48": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/tester_gru.py": {
        "tensorflow": {
            "Session_51": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/trainer2.py": {
        "tensorflow": {
            "Session_239": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_48": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}