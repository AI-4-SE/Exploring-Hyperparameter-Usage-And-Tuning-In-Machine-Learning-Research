{
    "examples/example_adding_clause.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_25": {
                "variable": {
                    "value": "capped_payoff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "payoff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "payoff",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "barrier - strike",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_26": {
                "condition": {
                    "value": "max_spot < barrier",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "payoff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "payoff",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "capped_payoff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(payoff, barrier - strike)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/example_autogreek.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_default_dtype_20": {
                "d": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_black_scholes.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_expected_shortfall.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_hedging_variance_swap.py": {
        "torch": {
            "linspace_21": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_26": {
                "variable": {
                    "value": "total_vega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(50, 200, 100)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_16": {
                "start": {
                    "value": "70",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "180",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_heston_iv.py": {
        "torch": {
            "linspace_15": {
                "variable": {
                    "value": "LOG_MONEYNESS_RANGE",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "LOG_MONEYNESS_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.1",
                            "UnaryOp"
                        ]
                    ]
                },
                "end": {
                    "value": "LOG_MONEYNESS_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                },
                "steps": {
                    "value": "LOG_MONEYNESS_STEPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_knockout.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "input": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.max(-1).values",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "examples/example_module_output.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_multi_layer_perceptron.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_multiple_hedge.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_no_transaction_band.py": {
        "torch": {
            "manual_seed_80": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_73": {
                "input": {
                    "value": "width[..., [0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "leaky_relu_74": {
                "input": {
                    "value": "width[..., [1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_plot_american_binary.py": {
        "torch": {
            "linspace_12": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "LOG_MONEYNESS_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.2",
                            "UnaryOp"
                        ]
                    ]
                },
                "end": {
                    "value": "LOG_MONEYNESS_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "float"
                        ]
                    ]
                },
                "steps": {
                    "value": "LOG_MONEYNESS_STEPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "full_like_25": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_26": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_37": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_38": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_53": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_54": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_65": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_66": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_81": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_82": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_93": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_94": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "examples/example_plot_european.py": {
        "torch": {
            "linspace_12": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "LOG_MONEYNESS_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.2",
                            "UnaryOp"
                        ]
                    ]
                },
                "end": {
                    "value": "LOG_MONEYNESS_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "float"
                        ]
                    ]
                },
                "steps": {
                    "value": "LOG_MONEYNESS_STEPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "full_like_25": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_26": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_37": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_38": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_53": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_54": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_65": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_66": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_81": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_82": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_93": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_94": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "examples/example_plot_european_binary.py": {
        "torch": {
            "linspace_12": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "LOG_MONEYNESS_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.2",
                            "UnaryOp"
                        ]
                    ]
                },
                "end": {
                    "value": "LOG_MONEYNESS_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "float"
                        ]
                    ]
                },
                "steps": {
                    "value": "LOG_MONEYNESS_STEPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "full_like_25": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_26": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_37": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_38": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_53": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_54": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_65": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_66": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_81": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_82": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_93": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_94": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "examples/example_plot_lookback.py": {
        "torch": {
            "linspace_12": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "LOG_MONEYNESS_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.2",
                            "UnaryOp"
                        ]
                    ]
                },
                "end": {
                    "value": "LOG_MONEYNESS_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "float"
                        ]
                    ]
                },
                "steps": {
                    "value": "LOG_MONEYNESS_STEPS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "full_like_25": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_26": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_37": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_38": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_53": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_54": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_65": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_66": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_81": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_82": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ],
                        [
                            "VOLATILITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_93": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ],
                        [
                            "TIME_TO_MATURITY_RANGE",
                            "variable"
                        ]
                    ]
                }
            },
            "full_like_94": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ],
                        [
                            "S",
                            "variable"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "TIME_TO_MATURITY_DEFAULT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "examples/example_readme.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_svi.py": {
        "torch": {
            "linspace_14": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_25": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-0.1, 0.1, 100)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_whalley_wilmott.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/_utils/bisect.py": {
        "torch": {
            "max_70": {
                "input": {
                    "value": "upper - lower",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/_utils/hook.py": {
        "torch": {}
    },
    "pfhedge/_utils/lazy.py": {
        "torch": {}
    },
    "pfhedge/_utils/operations.py": {
        "torch": {
            "stack_35": {
                "variable": {
                    "value": "stack",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[function(*args, **kwargs) for _ in range(n_times)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/_utils/parse.py": {
        "torch": {
            "as_tensor_11": {
                "data": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/_utils/str.py": {
        "torch": {
            "tensor_19": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/_utils/testing.py": {
        "torch": {
            "full_like_93": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/_utils/typing.py": {
        "torch": {}
    },
    "pfhedge/autogreek.py": {
        "torch": {
            "grad_100": {
                "outputs": {
                    "value": "price",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_spot(**params).requires_grad_()",
                            "Call"
                        ],
                        [
                            "parse_spot(**params).requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(price)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_166": {
                "outputs": {
                    "value": "tensor_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta(pricer, create_graph=True, **params).requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_spot(**params).requires_grad_()",
                            "Call"
                        ],
                        [
                            "parse_spot(**params).requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(tensor_delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_251": {
                "outputs": {
                    "value": "price",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_volatility(**params).requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(price)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_308": {
                "outputs": {
                    "value": "price",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parse_time_to_maturity(**params).requires_grad_()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(price)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_103": {
                "input": {
                    "value": "price",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_169": {
                "input": {
                    "value": "tensor_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta(pricer, create_graph=True, **params).requires_grad_()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_254": {
                "input": {
                    "value": "price",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_311": {
                "input": {
                    "value": "price",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ],
                        [
                            "pricer(**params)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pfhedge/features/_base.py": {
        "torch": {}
    },
    "pfhedge/features/container.py": {
        "torch": {
            "cat_49": {
                "tensors": {
                    "value": "[f.get(time_step) for f in self.features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/features/features.py": {
        "torch": {
            "zeros_like_308": {
                "input": {
                    "value": "self.derivative.ul().spot[..., index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_308": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_338": {
                "input": {
                    "value": "self.derivative.ul().spot[..., index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_338": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_like_368": {
                "input": {
                    "value": "self.derivative.ul().spot[..., index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_368": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/instruments/base.py": {
        "torch": {
            "device_95": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_110": {
                "type": {
                    "value": "f'cuda:{device}' if device is not None else 'cuda'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "get_default_dtype_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/instruments/derivative/american_binary.py": {
        "torch": {}
    },
    "pfhedge/instruments/derivative/base.py": {
        "torch": {
            "arange_346": {
                "start": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.underlier.spot.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_350": {
                "data": {
                    "value": "[[time]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/instruments/derivative/cliquet.py": {
        "torch": {}
    },
    "pfhedge/instruments/derivative/european.py": {
        "torch": {}
    },
    "pfhedge/instruments/derivative/european_binary.py": {
        "torch": {}
    },
    "pfhedge/instruments/derivative/lookback.py": {
        "torch": {}
    },
    "pfhedge/instruments/derivative/variance_swap.py": {
        "torch": {}
    },
    "pfhedge/instruments/primary/base.py": {
        "torch": {}
    },
    "pfhedge/instruments/primary/brownian.py": {
        "torch": {
            "full_like_93": {
                "input": {
                    "value": "self.get_buffer('spot')",
                    "type": "Call",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_101": {
                "input": {
                    "value": "self.get_buffer('spot')",
                    "type": "Call",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/instruments/primary/cir.py": {
        "torch": {}
    },
    "pfhedge/instruments/primary/heston.py": {
        "torch": {}
    },
    "pfhedge/instruments/primary/local_volatility.py": {
        "torch": {}
    },
    "pfhedge/instruments/primary/vasicek.py": {
        "torch": {}
    },
    "pfhedge/nn/functional.py": {
        "torch": {
            "as_tensor_695": {
                "variable": {
                    "value": "k_m",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lerp_735": {
                "variable": {
                    "value": "lerp1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "lerp_736": {
                "variable": {
                    "value": "lerp2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input3",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "input4",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_950": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "(numerator == 0).logical_and(denominator == 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ncdf(d1(s, t, v))",
                            "Call"
                        ],
                        [
                            "delta - 1 if not call else delta",
                            "IfExp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ],
                        [
                            "torch.where((numerator == 0).logical_and(denominator == 0), torch.zeros_like(delta), delta)",
                            "Call"
                        ],
                        [
                            "-delta if not call else delta",
                            "IfExp"
                        ]
                    ]
                }
            },
            "relu_149": {
                "input": {
                    "value": "input[..., end_index] / input[..., start_index] - strike",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_334": {
                "variable": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(min).to(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_338": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(max).to(x)",
                            "Call"
                        ],
                        [
                            "m.exp() * strike",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_506": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_506": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Normal_552": {
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Normal_574": {
                "loc": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_574": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "lerp_737": {
                "input": {
                    "value": "lerp1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lerp(input1, input2, weight1)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "lerp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lerp(input3, input4, weight1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_874": {
                "condition": {
                    "value": "(numerator == 0).logical_and(denominator == 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_min_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "_max_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "input.quantile(q, dim=dim)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, min, max, clamped_slope=0.0, inverted_output='mean')",
                            "Call"
                        ],
                        [
                            "torch.clamp(input, min, max)",
                            "Call"
                        ],
                        [
                            "unit[..., :-1].mul(spot.diff(dim=-1)).sum(dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "output - (spot[..., [0]] * unit[..., [0]].abs() * c).sum(dim=(-2, -1))",
                            "BinOp"
                        ],
                        [
                            "s / variance + variance / 2",
                            "BinOp"
                        ],
                        [
                            "s / variance - variance / 2",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_909": {
                "condition": {
                    "value": "(numerator == 0).logical_and(denominator == 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_min_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "_max_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "input.quantile(q, dim=dim)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, min, max, clamped_slope=0.0, inverted_output='mean')",
                            "Call"
                        ],
                        [
                            "torch.clamp(input, min, max)",
                            "Call"
                        ],
                        [
                            "unit[..., :-1].mul(spot.diff(dim=-1)).sum(dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "output - (spot[..., [0]] * unit[..., [0]].abs() * c).sum(dim=(-2, -1))",
                            "BinOp"
                        ],
                        [
                            "s / variance + variance / 2",
                            "BinOp"
                        ],
                        [
                            "s / variance - variance / 2",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_1182": {
                "condition": {
                    "value": "max < strike",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "price_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spot * (ncdf(d1_value) + v * t.sqrt() * (d1_value * ncdf(d1_value) + npdf(d1_value))) - strike * ncdf(d2_value)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "price_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spot * (ncdf(m1) + v * t.sqrt() * (m1 * ncdf(m1) + npdf(m1))) - strike + max * (1 - ncdf(m2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_39": {
                "input": {
                    "value": "input[..., -1] - strike",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_41": {
                "input": {
                    "value": "strike - input[..., -1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_65": {
                "input": {
                    "value": "input.max(dim=-1).values - strike",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_67": {
                "input": {
                    "value": "strike - input.min(dim=-1).values",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_366": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(min).to(x)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(max).to(x)",
                            "Call"
                        ],
                        [
                            "m.exp() * strike",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_611": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_min_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "_max_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "input.quantile(q, dim=dim)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, min, max, clamped_slope=0.0, inverted_output='mean')",
                            "Call"
                        ],
                        [
                            "torch.clamp(input, min, max)",
                            "Call"
                        ],
                        [
                            "unit[..., :-1].mul(spot.diff(dim=-1)).sum(dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "output - (spot[..., [0]] * unit[..., [0]].abs() * c).sum(dim=(-2, -1))",
                            "BinOp"
                        ],
                        [
                            "s / variance + variance / 2",
                            "BinOp"
                        ],
                        [
                            "s / variance - variance / 2",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_648": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_min_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "_max_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "input.quantile(q, dim=dim)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, min, max, clamped_slope=0.0, inverted_output='mean')",
                            "Call"
                        ],
                        [
                            "torch.clamp(input, min, max)",
                            "Call"
                        ],
                        [
                            "unit[..., :-1].mul(spot.diff(dim=-1)).sum(dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "output - (spot[..., [0]] * unit[..., [0]].abs() * c).sum(dim=(-2, -1))",
                            "BinOp"
                        ],
                        [
                            "s / variance + variance / 2",
                            "BinOp"
                        ],
                        [
                            "s / variance - variance / 2",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_875": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_min_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "_max_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "input.quantile(q, dim=dim)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, min, max, clamped_slope=0.0, inverted_output='mean')",
                            "Call"
                        ],
                        [
                            "torch.clamp(input, min, max)",
                            "Call"
                        ],
                        [
                            "unit[..., :-1].mul(spot.diff(dim=-1)).sum(dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "output - (spot[..., [0]] * unit[..., [0]].abs() * c).sum(dim=(-2, -1))",
                            "BinOp"
                        ],
                        [
                            "s / variance + variance / 2",
                            "BinOp"
                        ],
                        [
                            "s / variance - variance / 2",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_910": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_min_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "_max_values(input, dim=dim)",
                            "Call"
                        ],
                        [
                            "input.quantile(q, dim=dim)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, min, max, clamped_slope=0.0, inverted_output='mean')",
                            "Call"
                        ],
                        [
                            "torch.clamp(input, min, max)",
                            "Call"
                        ],
                        [
                            "unit[..., :-1].mul(spot.diff(dim=-1)).sum(dim=(-2, -1))",
                            "Call"
                        ],
                        [
                            "output - (spot[..., [0]] * unit[..., [0]].abs() * c).sum(dim=(-2, -1))",
                            "BinOp"
                        ],
                        [
                            "s / variance + variance / 2",
                            "BinOp"
                        ],
                        [
                            "s / variance - variance / 2",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_951": {
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ncdf(d1(s, t, v))",
                            "Call"
                        ],
                        [
                            "delta - 1 if not call else delta",
                            "IfExp"
                        ],
                        [
                            "numerator / denominator",
                            "BinOp"
                        ],
                        [
                            "torch.where((numerator == 0).logical_and(denominator == 0), torch.zeros_like(delta), delta)",
                            "Call"
                        ],
                        [
                            "-delta if not call else delta",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_like_1045": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ncdf(d2(s, t, v)) + s.exp() * ncdf(d1(s, t, v))",
                            "BinOp"
                        ],
                        [
                            "npdf(d2_tensor).div(spot * w) + ncdf(d1_tensor).div(strike) + npdf(d1_tensor).div(strike * w)",
                            "BinOp"
                        ],
                        [
                            "-npdf(d2_tensor).div(spot.square() * w) - d2_tensor * npdf(d2_tensor).div(spot.square() * w.square()) + npdf(d1_tensor).div(spot * strike * w) - d1_tensor * npdf(d1_tensor).div(spot * strike * w.square())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_1072": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ncdf(d2(s, t, v)) + s.exp() * ncdf(d1(s, t, v))",
                            "BinOp"
                        ],
                        [
                            "npdf(d2_tensor).div(spot * w) + ncdf(d1_tensor).div(strike) + npdf(d1_tensor).div(strike * w)",
                            "BinOp"
                        ],
                        [
                            "-npdf(d2_tensor).div(spot.square() * w) - d2_tensor * npdf(d2_tensor).div(spot.square() * w.square()) + npdf(d1_tensor).div(spot * strike * w) - d1_tensor * npdf(d1_tensor).div(spot * strike * w.square())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_1099": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ncdf(d2(s, t, v)) + s.exp() * ncdf(d1(s, t, v))",
                            "BinOp"
                        ],
                        [
                            "npdf(d2_tensor).div(spot * w) + ncdf(d1_tensor).div(strike) + npdf(d1_tensor).div(strike * w)",
                            "BinOp"
                        ],
                        [
                            "-npdf(d2_tensor).div(spot.square() * w) - d2_tensor * npdf(d2_tensor).div(spot.square() * w.square()) + npdf(d1_tensor).div(spot * strike * w) - d1_tensor * npdf(d1_tensor).div(spot * strike * w.square())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pfhedge/nn/modules/bs/_base.py": {
        "torch": {}
    },
    "pfhedge/nn/modules/bs/american_binary.py": {
        "torch": {
            "enable_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/nn/modules/bs/black_scholes.py": {
        "torch": {}
    },
    "pfhedge/nn/modules/bs/european.py": {
        "torch": {}
    },
    "pfhedge/nn/modules/bs/european_binary.py": {
        "torch": {
            "enable_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/nn/modules/bs/lookback.py": {
        "torch": {
            "enable_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/nn/modules/clamp.py": {
        "torch": {}
    },
    "pfhedge/nn/modules/hedger.py": {
        "torch": {
            "stack_348": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h.spot for h in hedge]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_396": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h.spot for h in hedge]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_477": {
                "mode": {
                    "value": "enable_grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_grad_enabled_668": {
                "mode": {
                    "value": "enable_grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/nn/modules/loss.py": {
        "torch": {
            "Parameter_322": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_322": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/nn/modules/mlp.py": {
        "torch": {
            "ReLU_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "n_units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "n_units[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LazyLinear_111": {
                "out_features": {
                    "value": "n_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_units[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/nn/modules/naked.py": {
        "torch": {}
    },
    "pfhedge/nn/modules/svi.py": {
        "torch": {}
    },
    "pfhedge/nn/modules/ww.py": {
        "torch": {}
    },
    "pfhedge/stochastic/_utils.py": {
        "torch": {}
    },
    "pfhedge/stochastic/brownian.py": {
        "torch": {
            "arange_81": {
                "start": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_160": {
                "start": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_160": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/stochastic/cir.py": {
        "torch": {
            "empty_90": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*(n_paths, n_steps)",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_93": {
                "variable": {
                    "value": "randn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*(n_paths, n_steps), dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_94": {
                "variable": {
                    "value": "rand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*(n_paths, n_steps), dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_121": {
                "variable": {
                    "value": "next_1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "u > p",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pinv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((1 - p) / (1 - u).clamp(min=EPSILON)).log() / beta",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(u)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_123": {
                "variable": {
                    "value": "output[:, i_step + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "psi <= PSI_CRIT",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "next_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a * (b + randn[:, i_step]).square()",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "next_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(u > p, pinv, torch.zeros_like(u))",
                            "Call"
                        ]
                    ]
                }
            },
            "finfo_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_121": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rand[:, i_step]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "pfhedge/stochastic/engine.py": {
        "torch": {
            "SobolEngine_53": {
                "variable": {
                    "value": "engine",
                    "type": "variable",
                    "possible_values": []
                },
                "dimension": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scramble": {
                    "value": "self.scramble",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "(z0, z1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/stochastic/heston.py": {
        "torch": {
            "empty_like_128": {
                "variable": {
                    "value": "log_spot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generate_cir(n_paths=n_paths, n_steps=n_steps, init_state=init_state[1:], kappa=kappa, theta=theta, sigma=sigma, dt=dt, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_130": {
                "variable": {
                    "value": "randn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generate_cir(n_paths=n_paths, n_steps=n_steps, init_state=init_state[1:], kappa=kappa, theta=theta, sigma=sigma, dt=dt, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pfhedge/stochastic/local_volatility.py": {
        "torch": {
            "empty_98": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*(n_paths, n_steps)",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_like_100": {
                "variable": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*(n_paths, n_steps), dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_102": {
                "start": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_103": {
                "input": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*(n_paths, n_steps), dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_103": {
                "data": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/stochastic/random.py": {
        "torch": {
            "randn_54": {
                "variable": {
                    "value": "randn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*size_half",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(randn, -randn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_59": {
                "n": {
                    "value": "output.size(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pfhedge/stochastic/vasicek.py": {
        "torch": {
            "empty_93": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*(n_paths, n_steps)",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_100": {
                "variable": {
                    "value": "randn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(*(n_paths, n_steps), dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/_utils/test_bisect.py": {
        "torch": {
            "linspace_11": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_21": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.4",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_31": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.9",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_16": {
                "start": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_26": {
                "start": {
                    "value": "-0.4",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_36": {
                "start": {
                    "value": "-0.9",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_15": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanhshrink_25": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_35": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_44": {
                "start": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_47": {
                "start": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/_utils/test_lazy.py": {
        "torch": {
            "LazyLinear_9": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LazyLinear_18": {
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/_utils/test_operations.py": {
        "torch": {
            "tensor_18": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "5.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_12": {
                "data": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/_utils/test_parse.py": {
        "torch": {
            "randn_13": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_13": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_14": {
                "variable": {
                    "value": "strike",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_14": {
                "variable": {
                    "value": "strike",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_38": {
                "variable": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_38": {
                "variable": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_55": {
                "variable": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_55": {
                "variable": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_11": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_36": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/features/test_features.py": {
        "torch": {
            "arange_41": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "7.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_150": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_155": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_160": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.2, 0.1, 0.0], [0.2, 0.1, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_175": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_180": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_185": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.2, 0.1, 0.0], [0.2, 0.1, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_219": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_224": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_229": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_234": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ],
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_284": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_289": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_294": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_299": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_357": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_363": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_402": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_407": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_412": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_417": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_422": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [0.0, 0.0, 0.0, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_422": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_447": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_447": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_452": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_452": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_457": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_457": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_462": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_462": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_467": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [0.0, 0.0, 0.0, 0.0], [1.0, 1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_467": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_508": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_513": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_518": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_523": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_682": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_705": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_719": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_762": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f0.get(0), f1.get(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_766": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f0.get(1), f1.get(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_770": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f0.get(None), f1.get(None)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_781": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f0.get(1), f1.get(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_786": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f0.get(2), f1.get(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_810": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "7.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_810": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_817": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0], [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_823": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0], [5.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_829": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[3.0], [6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_855": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "7.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_855": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_862": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0], [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_868": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.0], [5.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_874": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[3.0], [6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_344": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_501": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_544": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_751": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_773": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "[[1.0], [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "[[2.0], [5.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "[[3.0], [6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_108": {
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "7.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_346": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_347": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "data": {
                    "value": "[[1.0, 1.5, 2.0, 3.0], [2.0, 1.0, 1.0, 1.0], [3.0, 4.0, 5.0, 6.0], [1.0, 1.1, 1.2, 1.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_435": {
                "data": {
                    "value": "[[3.0, 2.0, 1.5, 1.0], [1.0, 1.0, 1.0, 2.0], [6.0, 5.0, 4.0, 3.0], [1.3, 1.2, 1.1, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_503": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_546": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_583": {
                "data": {
                    "value": "[[1.0, 2.0, 1.5], [2.0, 3.0, 4.0], [3.0, 2.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_589": {
                "data": {
                    "value": "[[1.0], [2.0], [3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_595": {
                "data": {
                    "value": "[[2.0], [3.0], [3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_601": {
                "data": {
                    "value": "[[2.0], [4.0], [3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_608": {
                "data": {
                    "value": "[[1.0, 2.0, 2.0], [2.0, 3.0, 4.0], [3.0, 3.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_635": {
                "data": {
                    "value": "[[1.0, 2.0, 1.5], [2.0, 3.0, 4.0], [3.0, 2.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_688": {
                "tensors": {
                    "value": "[x1.of(derivative).get(0), x2.of(derivative).get(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_694": {
                "tensors": {
                    "value": "[x1.of(derivative).get(1), x2.of(derivative).get(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_700": {
                "tensors": {
                    "value": "[x1.of(derivative).get(2), x2.of(derivative).get(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_727": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_731": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_779": {
                "*size": {
                    "value": "derivative.ul().spot.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_784": {
                "*size": {
                    "value": "derivative.ul().spot.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "data": {
                    "value": "[[1.0], [4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "[[2.0], [5.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "[[3.0], [6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_641": {
                "data": {
                    "value": "[[1.0], [2.0], [3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_646": {
                "data": {
                    "value": "[[2.0], [3.0], [3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_651": {
                "data": {
                    "value": "[[2.0], [4.0], [3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_657": {
                "data": {
                    "value": "[[1.0, 2.0, 2.0], [2.0, 3.0, 4.0], [3.0, 3.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/instruments/derivative/test_american_binary.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_57": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_24": {
                "data": {
                    "value": "[[1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 2.0], [1.9, 2.0, 2.1, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "[[2.0, 2.0, 2.0, 2.0], [2.0, 2.0, 2.0, 1.0], [1.1, 1.0, 0.9, 2.0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/instruments/derivative/test_cliquet.py": {
        "torch": {
            "tensor_29": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0, 3.0, 6.0], [1.0, 3.0, 2.0, 6.0], [1.0, 7.0, 1.0, 6.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "[2.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "[1.0, 2.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[1.0, 2.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/instruments/derivative/test_european.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 1.0, 1.9], [1.0, 1.0, 2.0], [1.0, 1.0, 2.1], [1.0, 1.0, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 0.1, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.2, 0.1, 0.0], [0.2, 0.1, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_86": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_90": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_94": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.3, 0.2, 0.1, 0.0], [0.3, 0.2, 0.1, 0.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_107": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_111": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_115": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_214": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "7.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_234": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_149": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_155": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_160": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_164": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_248": {
                "input": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.max(-1).values",
                            "Attribute"
                        ],
                        [
                            "derivative.ul().spot.max(-1).values",
                            "Attribute"
                        ],
                        [
                            "derivative.ul().spot.max(-1).values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_242": {
                "input": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.max(-1).values",
                            "Attribute"
                        ],
                        [
                            "derivative.ul().spot.max(-1).values",
                            "Attribute"
                        ],
                        [
                            "derivative.ul().spot.max(-1).values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_256": {
                "input": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.max(-1).values",
                            "Attribute"
                        ],
                        [
                            "derivative.ul().spot.max(-1).values",
                            "Attribute"
                        ],
                        [
                            "derivative.ul().spot.max(-1).values",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "tests/instruments/derivative/test_european_binary.py": {
        "torch": {
            "tensor_25": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_62": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[[1.0, 1.0, 1.0, 1.0], [3.0, 1.0, 1.0, 1.0], [1.9, 2.0, 2.1, 3.0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/instruments/derivative/test_lookback.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[[1.0, 2.0, 1.5], [2.0, 3.0, 4.0], [3.0, 2.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "[[3.0, 2.0, 2.5], [6.0, 5.0, 4.0], [3.0, 4.0, 5.0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/instruments/derivative/test_variance_swap.py": {
        "torch": {
            "full_like_19": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.payoff()",
                            "Call"
                        ],
                        [
                            "derivative.payoff()",
                            "Call"
                        ],
                        [
                            "derivative.payoff()",
                            "Call"
                        ],
                        [
                            "repr(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-0.04",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_24": {
                "variable": {
                    "value": "log_return",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "sqrt(var * derivative.ul().dt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_29": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.payoff()",
                            "Call"
                        ],
                        [
                            "derivative.payoff()",
                            "Call"
                        ],
                        [
                            "derivative.payoff()",
                            "Call"
                        ],
                        [
                            "repr(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.04",
                            "float"
                        ]
                    ]
                }
            },
            "full_like_36": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.payoff()",
                            "Call"
                        ],
                        [
                            "derivative.payoff()",
                            "Call"
                        ],
                        [
                            "derivative.payoff()",
                            "Call"
                        ],
                        [
                            "repr(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-0.04",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_17": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_33": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/instruments/primary/test_brownian.py": {
        "torch": {
            "randn_52": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_53": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_199": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s.spot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_like_203": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s.spot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_208": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_213": {
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_218": {
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_222": {
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_227": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_230": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_233": {
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_33": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_207": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_216": {
                "type": {
                    "value": "cuda:1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_226": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/instruments/primary/test_cir.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/instruments/primary/test_heston.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/instruments/primary/test_local_volatility.py": {
        "torch": {
            "zeros_like_32": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stock.volatility[:, 10:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_20": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time",
                            "Method Argument"
                        ],
                        [
                            "time",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_like_21": {
                "variable": {
                    "value": "nonzero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time",
                            "Method Argument"
                        ],
                        [
                            "time",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_9": {
                "input": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "time",
                            "Method Argument"
                        ],
                        [
                            "time",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_14": {
                "input": {
                    "value": "stock.spot",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_15": {
                "input": {
                    "value": "stock.volatility",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_22": {
                "condition": {
                    "value": "time > 10 / 250",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(time)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nonzero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(time, 0.2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/instruments/primary/test_vasicek.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/nn/modules/bs/_base.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/bs/_utils.py": {
        "torch": {}
    },
    "tests/nn/modules/bs/test_american_binary.py": {
        "torch": {
            "tensor_46": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_298": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_303": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_416": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_421": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_426": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_431": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_539": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_544": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_549": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_554": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_665": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 / k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_665": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_666": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[s, s, d.maturity, d.ul().sigma]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_683": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 / k_shift]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_683": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_684": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[s, s, d.maturity, d.ul().sigma]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_693": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 0.94, 0.98]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_694": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_695": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_733": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.01, -0.01, 0.1, 0.5], [-0.01, -0.01, 0.1, 0.6], [-0.01, -0.01, 0.1, 0.7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_220": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_343": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_466": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_589": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_657": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_704": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_769": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[[-10.0, -10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "[[0.0, 0.01, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "[[-0.01, -0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "[[-0.01, -0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "data": {
                    "value": "[[-10.0, -10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "[[0.0, 0.01, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "data": {
                    "value": "[[-0.01, -0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "data": {
                    "value": "[[-0.01, -0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "data": {
                    "value": "[[-10.0, -10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_297": {
                "data": {
                    "value": "[[0.0, 0.01, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_302": {
                "data": {
                    "value": "[[-0.01, -0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_307": {
                "data": {
                    "value": "[[-0.01, -0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_415": {
                "data": {
                    "value": "[[-10.0, -10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_420": {
                "data": {
                    "value": "[[0.0, 0.01, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_425": {
                "data": {
                    "value": "[[-0.01, -0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_430": {
                "data": {
                    "value": "[[-0.01, -0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_538": {
                "data": {
                    "value": "[[-10.0, -10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_543": {
                "data": {
                    "value": "[[0.0, 0.01, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_548": {
                "data": {
                    "value": "[[-0.01, -0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_553": {
                "data": {
                    "value": "[[-0.01, -0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_681": {
                "data": {
                    "value": "beta * d.ul().sigma * sqrt(d.ul().dt)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_681": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_319": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_324": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_326": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_339": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_439": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_441": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_442": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_446": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_447": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_448": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_449": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_458": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_460": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_462": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_562": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_563": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_564": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_565": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_569": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_570": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_571": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_572": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_581": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_583": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_585": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_756": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_760": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_764": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/bs/test_bs.py": {
        "torch": {
            "zeros_49": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/bs/test_european.py": {
        "torch": {
            "tensor_119": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_119": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_126": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.01]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_133": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.01]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_140": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_147": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.01]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_147": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.01]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_154": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_166": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, d.maturity, d.ul().sigma]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, d.maturity, d.ul().sigma]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_like_187": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-0.4601721",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_like_195": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-0.4601721",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_like_201": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.5398278962",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_207": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-0.4601721",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_like_218": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1.0 if call else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_like_221": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1.0 if call else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_like_224": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1.0 if call else 0.0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_like_227": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.5 if call else -0.5",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_like_230": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.5 if call else -0.5",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_like_278": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1.9847627374",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_284": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1.9847627374",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_295": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_298": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_301": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_304": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_307": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_355": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0796557924",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_361": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0796557924",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_374": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1.718282 if call else 0.632121",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_like_379": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1.718282 if call else 0.632121",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_like_384": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1.718282 if call else 0.632121",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_like_387": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_390": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_436": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.1, 0.01], [0.0, 0.1, 0.02], [0.0, 0.1, 0.03]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_485": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.1, 0.2], [0.0, 0.2, 0.2], [0.0, 0.3, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_492": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1261, 0.1782, 0.2182]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_like_503": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_506": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_509": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_512": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_515": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_562": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 1.0, 1.1, 1.1, 1.1, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_563": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3, 0.0, 0.0, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_564": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3, 0.0, 0.2, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_588": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.1, 0.2], [0.0, 0.2, 0.2], [0.0, 0.3, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_595": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-12.6094, -8.9117, -7.2727]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_like_606": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-0.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_like_609": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-0.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_like_612": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-0.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_like_615": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_like_618": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), EPSILON, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[s.log(), 1.0, EPSILON]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0, 1.0, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanOption().price(input[:, 0], input[:, 1], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.vega(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.vega(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.theta(log_moneyness=input[..., 0], time_to_maturity=input[..., 1], volatility=input[..., 2])",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.1), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.theta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-0.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_672": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.022",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_163": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_174": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_245": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_322": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_405": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_456": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_530": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_573": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_633": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[[-10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_38": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "[[-10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "[-1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[[10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[[10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "[[-0.01, EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "[[-0.01, EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "[-1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "[[0.01, EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[[0.01, EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[[-0.01, 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[[-0.01, 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "[-1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[[0.01, 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[[0.01, 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "[[-10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "[[-10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "[[10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "[[10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "[[-0.01, EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "[[-0.01, EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "[[0.01, EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "[[0.01, EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "data": {
                    "value": "[[-0.01, 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "[[-0.01, 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "data": {
                    "value": "[[0.01, 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "[[0.01, 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "[[s.log(), 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "[[s.log(), 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "data": {
                    "value": "[1.0 - s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "[[s.log(), 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "[s - 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "[[s.log(), 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "data": {
                    "value": "[[s.log(), EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "[[s.log(), EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "[1.0 - s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "data": {
                    "value": "[[s.log(), EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "[s - 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "[[s.log(), EPSILON, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "data": {
                    "value": "[[s.log(), 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "data": {
                    "value": "[[s.log(), 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "[1.0 - s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "[[s.log(), 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "[s - 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "[[s.log(), 1.0, EPSILON]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_200": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_223": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_297": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_303": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_306": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_377": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_382": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_386": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_502": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_505": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_508": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_511": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_514": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_605": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_608": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_611": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_614": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_617": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_291": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_368": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_370": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_399": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_401": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_450": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_452": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_499": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_501": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_524": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_526": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_602": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_604": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_627": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_629": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/bs/test_european_binary.py": {
        "torch": {
            "tensor_160": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, d.maturity, d.ul().sigma]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, d.maturity, d.ul().sigma]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_178": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_179": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-0.5, 0.5, 10)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_180": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(-0.5, 0.5, 10)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_214": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m.delta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.gamma(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.vega(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.theta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.01), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "vega[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0001, 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanBinaryOption().price(lm, t, iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_217": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m.delta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.gamma(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.vega(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.theta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.01), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "vega[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0001, 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanBinaryOption().price(lm, t, iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_220": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m.delta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.gamma(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.vega(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.theta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.01), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "vega[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0001, 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanBinaryOption().price(lm, t, iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_223": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m.delta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.gamma(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.vega(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.theta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.01), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "vega[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0001, 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanBinaryOption().price(lm, t, iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('inf') if call else -float('inf')",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_like_226": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m.delta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.gamma(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.vega(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.theta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.01), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "vega[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0001, 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanBinaryOption().price(lm, t, iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('inf') if call else -float('inf')",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_274": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-1.4645787477493286",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_381": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 1.0, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_382": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_460": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.4874",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_464": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.488",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_477": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m.delta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.gamma(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.vega(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.theta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.01), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "vega[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0001, 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanBinaryOption().price(lm, t, iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_482": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m.delta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.gamma(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.vega(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.theta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.01), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "vega[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0001, 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanBinaryOption().price(lm, t, iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_487": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m.delta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.gamma(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.vega(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.theta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.01), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "vega[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0001, 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanBinaryOption().price(lm, t, iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_490": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m.delta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.gamma(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.vega(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.theta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.01), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "vega[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0001, 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanBinaryOption().price(lm, t, iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_493": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[10.0, 1.0, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[-0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(c, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(p, torch.tensor([[0.01, 1.0, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m.delta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.gamma(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.vega(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.theta(s, t, v)",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.delta(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.gamma(torch.tensor(0.01), torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "vega[..., :-1]",
                            "Subscript"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(0.0001, 0.1, 0.2)",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(1.0), torch.tensor(0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(1.0 if call else -1.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.1))",
                            "Call"
                        ],
                        [
                            "m.price(torch.tensor(0.0), torch.tensor(0.0), torch.tensor(0.0))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "BSEuropeanBinaryOption().price(lm, t, iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "hedger.price(derivative)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_539": {
                "variable": {
                    "value": "lm",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-0.01",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_540": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_541": {
                "variable": {
                    "value": "price",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.4, 0.41, 0.42]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_600": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.4922",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_167": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_241": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_297": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_348": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_392": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_425": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_508": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_563": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "[[-10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_45": {
                "data": {
                    "value": "[[-10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "[[10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "[[10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "[[-0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "[[-0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "[[0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "[[0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "data": {
                    "value": "[[-0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "[[-0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "[[0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "[[0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "[[-10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "[[-10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "[[10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "[[10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "[[-0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "data": {
                    "value": "[[-0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "[[0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "[[0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "[[-0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "[[-0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "[[0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "data": {
                    "value": "[[0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "[[-10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "[[-10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "[[10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "[[10.0, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "data": {
                    "value": "[[-0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "data": {
                    "value": "[[-0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "[[0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "data": {
                    "value": "[[0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "[[-0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "data": {
                    "value": "[[-0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "data": {
                    "value": "[[0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "[[0.01, 1.0, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_273": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_459": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_475": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_480": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_485": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_489": {
                "data": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_492": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_291": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_342": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_409": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_411": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_419": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_421": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_471": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_473": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_502": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_504": {
                "data": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_557": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_559": {
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/bs/test_lookback.py": {
        "torch": {
            "tensor_43": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_179": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_315": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_319": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_324": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_436": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_441": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_446": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_450": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_455": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_459": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_567": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_577": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_587": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_709": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 / k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_709": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_710": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[s, s, d.maturity, d.ul().sigma]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_717": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / 1.03",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_717": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_718": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[s, s, 1.0, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_like_720": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_delta(m, torch.tensor([[-10.0, -10.0, 0.1, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(m, torch.tensor([[0.0, 10.0, 0.1, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(m, torch.tensor([[-0.01, -0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(m, torch.tensor([[0.0, 0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(m, torch.tensor([[-0.01, -0.01, 0.1, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_delta(m, torch.tensor([[0.0, 0.01, 0.1, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "m.delta()",
                            "Call"
                        ],
                        [
                            "m.delta(None, derivative.max_log_moneyness(), derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.max_log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.delta(derivative.log_moneyness(), derivative.max_log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "compute_gamma(m, torch.tensor([[-10.0, -10.0, 0.1, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(m, torch.tensor([[0.0, 10.0, 0.1, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(m, torch.tensor([[-0.01, -0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(m, torch.tensor([[0.0, 0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(m, torch.tensor([[-0.01, -0.01, 0.1, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_gamma(m, torch.tensor([[0.0, 0.01, 0.1, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "m.gamma()",
                            "Call"
                        ],
                        [
                            "m.gamma(None, derivative.max_log_moneyness(), derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.max_log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.gamma(derivative.log_moneyness(), derivative.max_log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "compute_vega(m, torch.tensor([[-10.0, -10.0, 0.1, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_vega(m, torch.tensor([[0.0, 10.0, 0.1, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_vega(m, torch.tensor([[-0.01, -0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_vega(m, torch.tensor([[0.0, 0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_vega(m, torch.tensor([[-0.01, -0.01, 0.1, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_vega(m, torch.tensor([[0.0, 0.01, 0.1, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "m.vega()",
                            "Call"
                        ],
                        [
                            "m.vega(None, derivative.max_log_moneyness(), derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.max_log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.vega(derivative.log_moneyness(), derivative.max_log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "compute_theta(m, torch.tensor([[-10.0, -10.0, 0.1, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_theta(m, torch.tensor([[0.0, 10.0, 0.1, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_theta(m, torch.tensor([[-0.01, -0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_theta(m, torch.tensor([[0.0, 0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_theta(m, torch.tensor([[-0.01, -0.01, 0.1, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_theta(m, torch.tensor([[0.0, 0.01, 0.1, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "m.theta()",
                            "Call"
                        ],
                        [
                            "m.theta(None, derivative.max_log_moneyness(), derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.max_log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.theta(derivative.log_moneyness(), derivative.max_log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "compute_price(m, torch.tensor([[-10.0, -10.0, 0.1, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, torch.tensor([[0.0, 10.0, 0.1, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, torch.tensor([[-0.01, -0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, torch.tensor([[0.0, 0.01, 1e-10, 0.2]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, torch.tensor([[-0.01, -0.01, 0.1, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "compute_price(m, torch.tensor([[0.0, 0.01, 0.1, 1e-10]]))",
                            "Call"
                        ],
                        [
                            "m.price()",
                            "Call"
                        ],
                        [
                            "m.price(None, derivative.max_log_moneyness(), derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), None, derivative.time_to_maturity(), derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.max_log_moneyness(), None, derivative.underlier.volatility)",
                            "Call"
                        ],
                        [
                            "m.price(derivative.log_moneyness(), derivative.max_log_moneyness(), derivative.time_to_maturity(), None)",
                            "Call"
                        ],
                        [
                            "compute_price(m, input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m.price(s, s, torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.delta(s, s, torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "m.gamma(s, s, torch.tensor(1.0), torch.tensor(0.2))",
                            "Call"
                        ],
                        [
                            "BSLookbackOption().price(input[:, 0], input[:, 1], input[:, 2], iv)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(price=derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(None, derivative.max_log_moneyness(), derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), None, derivative.time_to_maturity(), derivative.underlier.spot)",
                            "Call"
                        ],
                        [
                            "m.implied_volatility(derivative.log_moneyness(), derivative.max_log_moneyness(), None, derivative.underlier.spot)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1.037",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_725": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / 1.03",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_725": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_727": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.14",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_732": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / 1.03",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_732": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_734": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.037",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_739": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / 1.03",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_739": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_741": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "4.466",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_745": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 0.1, 0.01], [0.0, 0.0, 0.1, 0.02], [0.0, 0.0, 0.1, 0.03]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_820": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.9, 0.94, 0.98]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_821": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_822": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_232": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_363": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_494": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_632": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_701": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_761": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_831": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_865": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "[[-10.0, -10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "data": {
                    "value": "[[0.0, 10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "[[-0.01, -0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "[[0.0, 0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "[[-0.01, -0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "[[0.0, 0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "[[-10.0, -10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "data": {
                    "value": "[[0.0, 10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "data": {
                    "value": "[[-0.01, -0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "data": {
                    "value": "[[0.0, 0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "[[-0.01, -0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "data": {
                    "value": "[[0.0, 0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_304": {
                "data": {
                    "value": "[[-10.0, -10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_309": {
                "data": {
                    "value": "[[0.0, 10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "data": {
                    "value": "[[-0.01, -0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_318": {
                "data": {
                    "value": "[[0.0, 0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "data": {
                    "value": "[[-0.01, -0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "data": {
                    "value": "[[0.0, 0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_435": {
                "data": {
                    "value": "[[-10.0, -10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_440": {
                "data": {
                    "value": "[[0.0, 10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_445": {
                "data": {
                    "value": "[[-0.01, -0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_449": {
                "data": {
                    "value": "[[0.0, 0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_454": {
                "data": {
                    "value": "[[-0.01, -0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_458": {
                "data": {
                    "value": "[[0.0, 0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_566": {
                "data": {
                    "value": "[[-10.0, -10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_571": {
                "data": {
                    "value": "[[0.0, 10.0, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_572": {
                "data": {
                    "value": "[10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_576": {
                "data": {
                    "value": "[[-0.01, -0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_581": {
                "data": {
                    "value": "[[0.0, 0.01, 1e-10, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_582": {
                "data": {
                    "value": "[0.01]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_582": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_586": {
                "data": {
                    "value": "[[-0.01, -0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_591": {
                "data": {
                    "value": "[[0.0, 0.01, 0.1, 1e-10]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_592": {
                "data": {
                    "value": "[0.01]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_592": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_596": {
                "data": {
                    "value": "[[-1e-05, -1e-05, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_597": {
                "data": {
                    "value": "[[1e-05, 1e-05, 0.1, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_726": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_733": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_740": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_876": {
                "data": {
                    "value": "0.017",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_208": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_338": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_339": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_343": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_345": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_346": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_359": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_467": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_468": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_469": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_470": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_474": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_475": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_476": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_477": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_486": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_488": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_490": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_605": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_606": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_607": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_608": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_612": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_613": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_614": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_615": {
                "data": {
                    "value": "-0.2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_624": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_626": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_628": {
                "data": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/test_clamp.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1.0, 0.0, 0.5, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.1, 0.0, 0.5, 1.0, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_like_25": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([-1.0, 0.0, 0.5, 1.0, 2.0])",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/test_hedger.py": {
        "torch": {
            "randn_131": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_136": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_136": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_155": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_180": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_196": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_201": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_201": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_218": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_223": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_223": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(N, 1), output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_246": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2, len(model.inputs()))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_257": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2, len(model.inputs()))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_33": {
                "input": {
                    "value": "self.ul().spot[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_114": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_128": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_146": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_169": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_191": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_298": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_307": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_323": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_329": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "hin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hin",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "hin + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_151": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_152": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_175": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_176": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_232": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size(0)",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ],
                        [
                            "derivative.ul().spot.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_311": {
                "input": {
                    "value": "input[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/test_loss.py": {
        "torch": {
            "randn_23": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_23": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_29": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_29": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_35": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_61": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_62": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_121": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_132": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_133": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_151": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-a * torch.tensor(value)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_181": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_181": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_193": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_193": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_194": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_194": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_236": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_247": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_248": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_257": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_285": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_309": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "m.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_323": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_326": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "EntropicLoss()(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_68": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_78": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_107": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_118": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_129": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_139": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_167": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_178": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_190": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_200": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_219": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_233": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_244": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_254": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_279": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_299": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_307": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_317": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_338": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_81": {
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_90": {
                "size": {
                    "value": "(n_paths,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "log_91": {
                "input": {
                    "value": "torch.exp(-a * torch.tensor(value))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_150": {
                "size": {
                    "value": "(n_paths,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "randn_265": {
                "*size": {
                    "value": "n_paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ],
                        [
                            "n_paths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_288": {
                "input": {
                    "value": "torch.tensor(sorted(input)[:k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_91": {
                "input": {
                    "value": "-a * torch.tensor(value)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "tensor_288": {
                "data": {
                    "value": "sorted(input)[:k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_332": {
                "input": {
                    "value": "-input",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_319": {
                "input": {
                    "value": "-input",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_340": {
                "input": {
                    "value": "-input",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "randn_313": {
                "*size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/test_mlp.py": {
        "torch": {
            "zeros_59": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "(1, in_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ELU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CELU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CELU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/test_naked.py": {
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_paths, n_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_17": {
                "input": {
                    "value": "m(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros((n_paths, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "(n_paths, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/test_svi.py": {
        "torch": {
            "linspace_9": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_14": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m(input)",
                            "Call"
                        ],
                        [
                            "m0(input)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "m.a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_20": {
                "input": {
                    "value": "input - m.m",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/modules/test_ww.py": {
        "torch": {
            "zeros_49": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M_1, M_2, H_in)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nn/test_functional.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-2.7183, -1.0, -0.3679]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-7.3891, -1.0, -0.1353]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1.0, -1.0, -1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_43": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_63": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "6.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-1.0, 0.0, 0.5, 1.0, 2.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.1, 0.0, 0.5, 1.0, 1.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_like_97": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_utility(input, 1.0)",
                            "Call"
                        ],
                        [
                            "exp_utility(input, 2.0)",
                            "Call"
                        ],
                        [
                            "exp_utility(input, 0.0)",
                            "Call"
                        ],
                        [
                            "topp(input, p, largest=largest).values",
                            "Attribute"
                        ],
                        [
                            "topp(input, p, largest=largest).indices",
                            "Attribute"
                        ],
                        [
                            "expected_shortfall(input, 3 / 5)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 1, clamped_slope=0.1)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 0, clamped_slope=0.01)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 1, clamped_slope=1)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 1, 0, clamped_slope=0.01)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 1, 0, clamped_slope=0.01, inverted_output='max')",
                            "Call"
                        ],
                        [
                            "clamp(input, 1, 0, inverted_output='max')",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 1, clamped_slope=0.0)",
                            "Call"
                        ],
                        [
                            "realized_variance(input, dt=1.0)",
                            "Call"
                        ],
                        [
                            "realized_volatility(input, dt=1.0)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit, payoff=payoff)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit, cost=[0.001], deduct_first_cost=False)",
                            "Call"
                        ],
                        [
                            "value1 - value0",
                            "BinOp"
                        ],
                        [
                            "pl(spot, unit, payoff=payoff)",
                            "Call"
                        ],
                        [
                            "d1(log_moneyness=torch.as_tensor([log_moneyness]), time_to_maturity=torch.as_tensor(time_to_maturity), volatility=torch.as_tensor(volatility))",
                            "Call"
                        ],
                        [
                            "d2(log_moneyness=torch.as_tensor([log_moneyness]), time_to_maturity=torch.as_tensor(time_to_maturity), volatility=torch.as_tensor(volatility))",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.0, 0.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 1.0, 0.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.1, 0.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.0, 0.1)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.5, 0.5)",
                            "Call"
                        ],
                        [
                            "output1.square() + output2.square()",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_101": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_utility(input, 1.0)",
                            "Call"
                        ],
                        [
                            "exp_utility(input, 2.0)",
                            "Call"
                        ],
                        [
                            "exp_utility(input, 0.0)",
                            "Call"
                        ],
                        [
                            "topp(input, p, largest=largest).values",
                            "Attribute"
                        ],
                        [
                            "topp(input, p, largest=largest).indices",
                            "Attribute"
                        ],
                        [
                            "expected_shortfall(input, 3 / 5)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 1, clamped_slope=0.1)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 0, clamped_slope=0.01)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 1, clamped_slope=1)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 1, 0, clamped_slope=0.01)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 1, 0, clamped_slope=0.01, inverted_output='max')",
                            "Call"
                        ],
                        [
                            "clamp(input, 1, 0, inverted_output='max')",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 1, clamped_slope=0.0)",
                            "Call"
                        ],
                        [
                            "realized_variance(input, dt=1.0)",
                            "Call"
                        ],
                        [
                            "realized_volatility(input, dt=1.0)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit, payoff=payoff)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit, cost=[0.001], deduct_first_cost=False)",
                            "Call"
                        ],
                        [
                            "value1 - value0",
                            "BinOp"
                        ],
                        [
                            "pl(spot, unit, payoff=payoff)",
                            "Call"
                        ],
                        [
                            "d1(log_moneyness=torch.as_tensor([log_moneyness]), time_to_maturity=torch.as_tensor(time_to_maturity), volatility=torch.as_tensor(volatility))",
                            "Call"
                        ],
                        [
                            "d2(log_moneyness=torch.as_tensor([log_moneyness]), time_to_maturity=torch.as_tensor(time_to_maturity), volatility=torch.as_tensor(volatility))",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.0, 0.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 1.0, 0.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.1, 0.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.0, 0.1)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.5, 0.5)",
                            "Call"
                        ],
                        [
                            "output1.square() + output2.square()",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_like_105": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "exp_utility(input, 1.0)",
                            "Call"
                        ],
                        [
                            "exp_utility(input, 2.0)",
                            "Call"
                        ],
                        [
                            "exp_utility(input, 0.0)",
                            "Call"
                        ],
                        [
                            "topp(input, p, largest=largest).values",
                            "Attribute"
                        ],
                        [
                            "topp(input, p, largest=largest).indices",
                            "Attribute"
                        ],
                        [
                            "expected_shortfall(input, 3 / 5)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 1, clamped_slope=0.1)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 0, clamped_slope=0.01)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 1, clamped_slope=1)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 1, 0, clamped_slope=0.01)",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 1, 0, clamped_slope=0.01, inverted_output='max')",
                            "Call"
                        ],
                        [
                            "clamp(input, 1, 0, inverted_output='max')",
                            "Call"
                        ],
                        [
                            "leaky_clamp(input, 0, 1, clamped_slope=0.0)",
                            "Call"
                        ],
                        [
                            "realized_variance(input, dt=1.0)",
                            "Call"
                        ],
                        [
                            "realized_volatility(input, dt=1.0)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit, payoff=payoff)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit)",
                            "Call"
                        ],
                        [
                            "pl(spot, unit, cost=[0.001], deduct_first_cost=False)",
                            "Call"
                        ],
                        [
                            "value1 - value0",
                            "BinOp"
                        ],
                        [
                            "pl(spot, unit, payoff=payoff)",
                            "Call"
                        ],
                        [
                            "d1(log_moneyness=torch.as_tensor([log_moneyness]), time_to_maturity=torch.as_tensor(time_to_maturity), volatility=torch.as_tensor(volatility))",
                            "Call"
                        ],
                        [
                            "d2(log_moneyness=torch.as_tensor([log_moneyness]), time_to_maturity=torch.as_tensor(time_to_maturity), volatility=torch.as_tensor(volatility))",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.0, 0.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 1.0, 0.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.1, 0.0)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.0, 0.1)",
                            "Call"
                        ],
                        [
                            "bilerp(i1, i2, i3, i4, 0.5, 0.5)",
                            "Call"
                        ],
                        [
                            "output1.square() + output2.square()",
                            "BinOp"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "min",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "max",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_160": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_160": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_162": {
                "variable": {
                    "value": "payoff",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "randn_169": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_169": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_170": {
                "variable": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_177": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_178": {
                "variable": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "ones_185": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_186": {
                "variable": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_194": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_195": {
                "variable": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 1, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 1, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 1, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "payoff",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_220": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_220": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_221": {
                "variable": {
                    "value": "unit",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, M, T)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_222": {
                "variable": {
                    "value": "payoff",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "as_tensor_249": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-4.9, 0, float('inf')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_286": {
                "variable": {
                    "value": "expected",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-5.1, 0, float('inf')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_305": {
                "variable": {
                    "value": "i1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_306": {
                "variable": {
                    "value": "i2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_307": {
                "variable": {
                    "value": "i3",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_308": {
                "variable": {
                    "value": "i4",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_334": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_335": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_342": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_343": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_349": {
                "variable": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_128": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_142": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_159": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_168": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_176": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_184": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_193": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_219": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_303": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_331": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_47": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([-1.0, 0.0, 1.0])",
                            "Call"
                        ],
                        [
                            "torch.randn(100)",
                            "Call"
                        ],
                        [
                            "torch.arange(1.0, 6.0)",
                            "Call"
                        ],
                        [
                            "-torch.arange(10.0)",
                            "UnaryOp"
                        ],
                        [
                            "torch.tensor([-1.0, 0.0, 0.5, 1.0, 2.0])",
                            "Call"
                        ],
                        [
                            "torch.zeros(10)",
                            "Call"
                        ],
                        [
                            "log_return.cumsum(-1).exp()",
                            "Call"
                        ],
                        [
                            "log_return.cumsum(-1).exp()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(p * 100)",
                            "Call"
                        ]
                    ]
                },
                "largest": {
                    "value": "largest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "largest",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_51": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([-1.0, 0.0, 1.0])",
                            "Call"
                        ],
                        [
                            "torch.randn(100)",
                            "Call"
                        ],
                        [
                            "torch.arange(1.0, 6.0)",
                            "Call"
                        ],
                        [
                            "-torch.arange(10.0)",
                            "UnaryOp"
                        ],
                        [
                            "torch.tensor([-1.0, 0.0, 0.5, 1.0, 2.0])",
                            "Call"
                        ],
                        [
                            "torch.zeros(10)",
                            "Call"
                        ],
                        [
                            "log_return.cumsum(-1).exp()",
                            "Call"
                        ],
                        [
                            "log_return.cumsum(-1).exp()",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(p * 100)",
                            "Call"
                        ]
                    ]
                },
                "largest": {
                    "value": "largest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "largest",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_71": {
                "start": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_130": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_144": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lerp_322": {
                "input": {
                    "value": "i1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "i2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "lerp_324": {
                "input": {
                    "value": "i1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "i3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, 3)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_345": {
                "input": {
                    "value": "output2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_muller(input1, input2)",
                            "Call"
                        ],
                        [
                            "box_muller(input1, input2)",
                            "Call"
                        ],
                        [
                            "box_muller(input1, input2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "*size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "9.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "9.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "8.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "as_tensor_245": {
                "data": {
                    "value": "[-1.0, 0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_246": {
                "data": {
                    "value": "[1.0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_247": {
                "data": {
                    "value": "[0.2, 0.2, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_282": {
                "data": {
                    "value": "[-1.0, 0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_283": {
                "data": {
                    "value": "[1.0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_284": {
                "data": {
                    "value": "[0.2, 0.2, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_236": {
                "data": {
                    "value": "[log_moneyness]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_237": {
                "data": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_238": {
                "data": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_253": {
                "data": {
                    "value": "[-1.0, 0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_254": {
                "data": {
                    "value": "[1.0, 0, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_255": {
                "data": {
                    "value": "[0.2, 0.2, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_259": {
                "data": {
                    "value": "[-1.0, 0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_260": {
                "data": {
                    "value": "[1.0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_261": {
                "data": {
                    "value": "[0.2, 0.2, -1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_273": {
                "data": {
                    "value": "[log_moneyness]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_274": {
                "data": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_275": {
                "data": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_290": {
                "data": {
                    "value": "[-1.0, 0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_291": {
                "data": {
                    "value": "[1.0, 0, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_292": {
                "data": {
                    "value": "[0.2, 0.2, 0.2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_296": {
                "data": {
                    "value": "[-1.0, 0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_297": {
                "data": {
                    "value": "[1.0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_298": {
                "data": {
                    "value": "[0.2, 0.2, -1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/stochastic/test_brownian.py": {
        "torch": {
            "zeros_like_19": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, sigma=0)",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, mu=mu, sigma=0, dt=dt)",
                            "Call"
                        ],
                        [
                            "output[:, -1].std()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ]
                    ]
                }
            },
            "linspace_35": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "mu * dt * (n_steps - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ],
                        [
                            "250",
                            "int"
                        ]
                    ]
                }
            },
            "unsqueeze_35": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_47": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, sigma=0)",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, mu=mu, sigma=0, dt=dt)",
                            "Call"
                        ],
                        [
                            "output[:, -1].std()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, sigma=0)",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, mu=mu, sigma=0, dt=dt)",
                            "Call"
                        ],
                        [
                            "output[:, -1].std()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_66": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, sigma=0)",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, mu=mu, sigma=0, dt=dt)",
                            "Call"
                        ],
                        [
                            "output[:, -1].std()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_73": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, sigma=0)",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, mu=mu, sigma=0, dt=dt)",
                            "Call"
                        ],
                        [
                            "output[:, -1].std()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_87": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, sigma=0)",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, mu=mu, sigma=0, dt=dt)",
                            "Call"
                        ],
                        [
                            "output[:, -1].std()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "mu * dt * n_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_100": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, sigma=0)",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, mu=mu, sigma=0, dt=dt)",
                            "Call"
                        ],
                        [
                            "output[:, -1].std()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_123": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, sigma=0)",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, mu=mu, sigma=0, dt=dt)",
                            "Call"
                        ],
                        [
                            "output[:, -1].std()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_12": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_40": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_106": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_116": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_144": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_129": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, sigma=0)",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, mu=mu, sigma=0, dt=dt)",
                            "Call"
                        ],
                        [
                            "output[:, -1].std()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_138": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, sigma=0)",
                            "Call"
                        ],
                        [
                            "generate_brownian(1, n_steps, mu=mu, sigma=0, dt=dt)",
                            "Call"
                        ],
                        [
                            "output[:, -1].std()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "output[:, -1].mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_138": {
                "data": {
                    "value": "n_steps * dt * mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/stochastic/test_cir.py": {
        "torch": {
            "Gamma_23": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * kappa * theta / sigma ** 2",
                            "BinOp"
                        ],
                        [
                            "2 * kappa * theta / sigma ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * kappa / sigma ** 2",
                            "BinOp"
                        ],
                        [
                            "2 * kappa / sigma ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_like_25": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "d.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Gamma_46": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * kappa * theta / sigma ** 2",
                            "BinOp"
                        ],
                        [
                            "2 * kappa * theta / sigma ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * kappa / sigma ** 2",
                            "BinOp"
                        ],
                        [
                            "2 * kappa / sigma ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_like_48": {
                "variable": {
                    "value": "expect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ],
                        [
                            "t[:, -1].mean()",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "d.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_11": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/stochastic/test_heston.py": {
        "torch": {
            "manual_seed_8": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_23": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/stochastic/test_randn.py": {
        "torch": {
            "manual_seed_9": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_11": {
                "input": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_autogreek.py": {
        "torch": {
            "randn_17": {
                "variable": {
                    "value": "spot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_28": {
                "variable": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_28": {
                "variable": {
                    "value": "volatility",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_29": {
                "variable": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_35": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_36": {
                "variable": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_47": {
                "variable": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_47": {
                "variable": {
                    "value": "time_to_maturity",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_48": {
                "variable": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_9": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}