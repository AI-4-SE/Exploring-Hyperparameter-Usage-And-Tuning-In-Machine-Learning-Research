{
    "BNN_MNIST/BNN_Dataloader.py": {
        "torch": {
            "set_default_tensor_type_21": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "input": {
                    "value": "data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "input": {
                    "value": "data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "input": {
                    "value": "data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "input": {
                    "value": "data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "BNN_MNIST/BNN_Model_def.py": {
        "torch": {
            "max_215": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.out_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.out_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.out_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.features(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_110": {
                "variable": {
                    "value": "X_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.view(-1, 28 * 28)",
                            "Call"
                        ],
                        [
                            "X.view(-1, 28 * 28)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_151": {
                "variable": {
                    "value": "prior_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "float(-0.5 * np.log(2.0 * 3.1415926 * sigma ** 2)) - weight ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_162": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(X, weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_178": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_192": {
                "variable": {
                    "value": "(_, y_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BNN_obj.predict(X, weight)",
                            "Call"
                        ],
                        [
                            "BNN_obj.predict(X)",
                            "Call"
                        ],
                        [
                            "logsumexp(self.forward(X, weight), dim=0) - float(np.log(num_chain))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight[:, dim_counter:dim_counter + dim_out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_193": {
                "input": {
                    "value": "y_hot * out_log",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_196": {
                "input": {
                    "value": "y == y_pred.data",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogSoftmax_35": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_132": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IN.matmul(W) + b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_146": {
                "input": {
                    "value": "torch.sum(y_ * self.forward(X, weight), dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_152": {
                "outputs": {
                    "value": "prob_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_N * torch.mean(torch.sum(y_ * self.forward(X, weight), dim=2), dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones(prob_out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "flag_retain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_163": {
                "input": {
                    "value": "log_prob * prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_146": {
                "input": {
                    "value": "y_ * self.forward(X, weight)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_152": {
                "*size": {
                    "value": "prob_out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y_.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "BNN_obj.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "BNN_MNIST/BNN_Q_D.py": {
        "torch": {
            "clamp_61": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "out_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_138": {
                "variable": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 + Q_out ** 2 * const + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "self.clamp_min + F.relu(out_D - self.clamp_min)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ],
                        [
                            "0 + Q_out ** 2 * const + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "self.clamp_min + F.relu(out_D - self.clamp_min)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.clamp_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clamp_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_157": {
                "variable": {
                    "value": "out_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50 * self.D_MLP.forward(input_NN_pre)",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(out_pre)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_161": {
                "variable": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 + Q_out ** 2 * const + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "self.clamp_min + F.relu(out_D - self.clamp_min)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ],
                        [
                            "0 + Q_out ** 2 * const + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "self.clamp_min + F.relu(out_D - self.clamp_min)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.clamp_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clamp_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_68": {
                "variable": {
                    "value": "grad_Q_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_Q[:, :, 1:] / self.dim_pen_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_62": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_136": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_137": {
                "input": {
                    "value": "out_D - self.clamp_min",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_159": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_160": {
                "input": {
                    "value": "out_D - self.clamp_min",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_66": {
                "outputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_NN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.stack((U_value, state_mom), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.stack((U_value, state_mom), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.stack((U_value, state_mom, grad_U), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.stack((U_value, state_mom, grad_U), dim=2).data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "flag_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_81": {
                "tensors": {
                    "value": "(U_value, state_mom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "input": {
                    "value": "grad(out, input_NN, torch.ones(out.data.shape), allow_unused=True, create_graph=flag_graph)[0][:, :, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_143": {
                "input": {
                    "value": "grad(out, input_NN, torch.ones(out.data.shape), allow_unused=True, create_graph=flag_graph)[0][:, :, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_144": {
                "outputs": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 + Q_out ** 2 * const + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "self.clamp_min + F.relu(out_D - self.clamp_min)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ],
                        [
                            "0 + Q_out ** 2 * const + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "self.clamp_min + F.relu(out_D - self.clamp_min)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Q_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(Q_out.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(Q_out.data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(Q_out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "flag_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_152": {
                "tensors": {
                    "value": "(U_value, state_mom, grad_U)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_153": {
                "tensors": {
                    "value": "(U_value, state_mom_pre, grad_U)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "(U_value, state_mom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "input": {
                    "value": "grad_Q[:, :, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_132": {
                "tensors": {
                    "value": "(U_value, state_mom, grad_U)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "Q_out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_141": {
                "outputs": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 + Q_out ** 2 * const + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "self.clamp_min + F.relu(out_D - self.clamp_min)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ],
                        [
                            "0 + Q_out ** 2 * const + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "self.clamp_min + F.relu(out_D - self.clamp_min)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Q_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(Q_out.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(Q_out.data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(Q_out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "flag_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_166": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_140": {
                "outputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_NN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.stack((U_value, state_mom), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.stack((U_value, state_mom), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.stack((U_value, state_mom, grad_U), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.stack((U_value, state_mom, grad_U), dim=2).data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "flag_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_141": {
                "*size": {
                    "value": "Q_out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_143": {
                "outputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "50 * self.D_MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_NN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.stack((U_value, state_mom), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.stack((U_value, state_mom), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.stack((U_value, state_mom, grad_U), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.stack((U_value, state_mom, grad_U), dim=2).data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "flag_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_140": {
                "*size": {
                    "value": "out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_143": {
                "*size": {
                    "value": "out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "BNN_MNIST/BNN_Sampler.py": {
        "torch": {
            "unsqueeze_69": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.U.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.BNN_obj.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.BNN_obj.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.U.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_158": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.U.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.BNN_obj.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.BNN_obj.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.U.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_361": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.U.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.BNN_obj.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.BNN_obj.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.U.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_457": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.U.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.BNN_obj.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.BNN_obj.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "Variable(torch.zeros(batch_y, self.U.dim_out).scatter_(1, y, 1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_93": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_274": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_276": {
                "input": {
                    "value": "2.0 * eps * D_out - eps ** 2 * B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_396": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_481": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_484": {
                "input": {
                    "value": "2 * eps * G",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_398": {
                "input": {
                    "value": "2.0 * eps * D_out.data - eps ** 2 * B.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_478": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(mean_grad_U.data * mean_grad_U.data)",
                            "Call"
                        ],
                        [
                            "exp_term * V + (1 - exp_term) * Variable(mean_grad_U.data * mean_grad_U.data)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.U.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_74": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.BNN_obj.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_363": {
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.BNN_obj.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_404": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.U.dim_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "BNN_MNIST/BNN_Util.py": {
        "torch": {
            "stack_40": {
                "variable": {
                    "value": "all_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_69": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_35": {
                "variable": {
                    "value": "p_dist[counter]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "base - pair",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_45": {
                "tensor": {
                    "value": "all_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_47": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_sample_list",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "tuple(state_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "BNN_MNIST/BNN_training_func.py": {
        "torch": {
            "mean_32": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dlogP_dW * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dlogQ_dW * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "variable": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(x.data.clone())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(y.data.clone())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "K_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.exp(-0.5 * torch.sum(torch.abs(y_batch.data - x_batch.data) ** 2, dim=2) / bandwidth.data))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(x_d.data - samples.data, 2, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "loss_1.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "loss_2.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_71": {
                "input": {
                    "value": "-0.5 * torch.sum(torch.abs(y_batch.data - x_batch.data) ** 2, dim=2) / bandwidth.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_74": {
                "input": {
                    "value": "1.0 / bandwidth.data * K_batch.data * (y_batch.data - x_batch.data)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(M, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_97": {
                "outputs": {
                    "value": "1.0 / num_samples * G * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inputs": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones(x.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_97": {
                "*size": {
                    "value": "x.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_79": {
                "input": {
                    "value": "x_d.data - samples.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "median_85": {
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "torch.cat((M, d), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_71": {
                "input": {
                    "value": "torch.abs(y_batch.data - x_batch.data) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_71": {
                "input": {
                    "value": "y_batch.data - x_batch.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_61": {
                "n": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(x.data.shape[0])",
                            "Call"
                        ],
                        [
                            "int(x.data.shape[0])",
                            "Call"
                        ],
                        [
                            "int(x.data.shape[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/NetworkTopologyGeneralization.py": {
        "torch": {
            "set_default_tensor_type_28": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_175": {
                "variable": {
                    "value": "tensor_state_list_nnsghmc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list_nnsghmc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "random_seed[total_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "tensor_state_list_sgld",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list_SGLD)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_113": {
                "variable": {
                    "value": "tensor_state_list_sghmc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list_sghmc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_125": {
                "seed": {
                    "value": "random_seed[total_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "tensor_state_list_nnsghmc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list_nnsghmc), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./ReLU_Generalization_Long_Run/Test_long_run_nnsghmc_%s_fd_0.18' % (total_idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_106": {
                "obj": {
                    "value": "tensor_state_list_sgld",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list_SGLD), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./ReLU_Generalization_Long_Run/Test_long_run_sgld_%s_0.2' % (total_idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "tensor_state_list_sghmc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list_sghmc), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./ReLU_Generalization_Long_Run/Test_long_run_sghmc_%s' % (total_idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_134": {
                "f": {
                    "value": "./Q_state_batch_500_baseline_50D_70G_step_0.007_40ep_broad_0.2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_135": {
                "f": {
                    "value": "./D_state_batch_500_baseline_50D_70G_step_0.007_40ep_broad_0.2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_83": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_96": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_160": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_162": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/PlotResults.py": {
        "torch": {
            "set_default_tensor_type_117": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.out_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.out_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_111": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.features(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "X_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((-X1, X2), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((-X1, X2, X3), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((-X1, X3, X2), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((X3, X1, X2), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "ndarray": {
                    "value": "X_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((-X1, X2), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((-X1, X2, X3), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((-X1, X3, X2), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((X3, X1, X2), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/Sampler_Training.py": {
        "torch": {
            "DataLoader_49": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NewMNISTLoader(train_X, train_Y, flag_train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NewMNISTLoader(test_X, test_Y, flag_train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "Adam_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(Q_MLP.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "Adam_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(D_MLP.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_31": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_57": {
                "seed": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_112": {
                "obj": {
                    "value": "Q_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./tmp_model_save/Q_state_batch_500_baseline_50D_70G_step_0.007_100ep_broad_0.2_ep%s_Adam_0.0015' % (ep + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_113": {
                "obj": {
                    "value": "D_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./tmp_model_save/D_state_batch_500_baseline_50D_70G_step_0.007_100ep_broad_0.2_ep%s_Adam_0.0015' % (ep + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_85": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_87": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/Sampler_Training_DataGen.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./BNN_MNIST/data/', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./BNN_MNIST/data/', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "MNIST_train_sampler_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MNIST_train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupMNIST(X_train_sampler_tensor, Y_train_sampler_tensor, group=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "MNIST_test_sampler_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MNIST_test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupMNIST(X_test_sampler_tensor, Y_test_sampler_tensor, group=4)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "MNIST_train_BNN_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MNIST_train_BNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupMNIST(X_train_BNN_tensor, Y_train_BNN_tensor, group=2)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "MNIST_test_BNN_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MNIST_test_BNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupMNIST(X_test_BNN_tensor, Y_test_BNN_tensor, group=3)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "Adam_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(Q_MLP.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_93": {
                "variable": {
                    "value": "Adam_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(D_MLP.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.003",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_31": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "Q_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./tmp_model_save/Q_state_batch_500_baseline_50D_70G_step_0.007_100ep_broad_0.2_ep%s_DataGen' % (ep + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "D_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./tmp_model_save/D_state_batch_500_baseline_50D_70G_step_0.007_100ep_broad_0.2_ep%s_DataGen' % (ep + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_107": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_109": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/SigmoidGeneralization.py": {
        "torch": {
            "set_default_tensor_type_28": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_170": {
                "variable": {
                    "value": "tensor_state_list_nnsghmc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list_nnsghmc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "random_seed[total_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "tensor_state_list_sgld",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list_SGLD)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_117": {
                "variable": {
                    "value": "tensor_state_list_sghmc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list_sghmc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_129": {
                "seed": {
                    "value": "random_seed[total_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "tensor_state_list_nnsghmc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list_nnsghmc), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./Sigmoid_Generalization_Long_Run/Test_long_run_nnsghmc_%s_broad_0.2_fd_0.18' % (total_idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "tensor_state_list_sgld",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list_SGLD), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./Sigmoid_Generalization_Long_Run/Test_long_run_sgld_%s' % (total_idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "tensor_state_list_sghmc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list_sghmc), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./Sigmoid_Generalization_Long_Run/Test_long_run_sghmc_%s' % (total_idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_135": {
                "f": {
                    "value": "./Q_state_batch_500_baseline_50D_70G_step_0.007_40ep_broad_0.2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_136": {
                "f": {
                    "value": "./D_state_batch_500_baseline_50D_70G_step_0.007_40ep_broad_0.2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_86": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_100": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_160": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_162": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/long_run_Dataset_Gen.py": {
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./BNN_MNIST/data/', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./BNN_MNIST/data/', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_28": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "random_seed[total_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "tensor_state_list_sgld",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list_SGLD)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "tensor_state_list_sghmc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list_sghmc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_199": {
                "variable": {
                    "value": "tensor_state_list_nnsghmc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list_nnsghmc)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_137": {
                "obj": {
                    "value": "tensor_state_list_sgld",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list_SGLD), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./Dataset_Gen_Long_Run/Test_long_run_sgld_%s' % (total_idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "tensor_state_list_sghmc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list_sghmc), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./Dataset_Gen_Long_Run/Test_long_run_sghmc_%s' % (total_idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_156": {
                "seed": {
                    "value": "random_seed[total_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_200": {
                "obj": {
                    "value": "tensor_state_list_nnsghmc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list_nnsghmc), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./Dataset_Gen_Long_Run/Test_long_run_nnsghmc_%s_fd_0.18' % (total_idx + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_236": {
                "variable": {
                    "value": "tensor_state_list_psgld",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list_PSGLD)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_113": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_127": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_164": {
                "f": {
                    "value": "./tmp_model_save/Q_state_batch_500_baseline_50D_70G_step_0.007_100ep_broad_0.2_ep40",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_165": {
                "f": {
                    "value": "./tmp_model_save/D_state_batch_500_baseline_50D_70G_step_0.007_100ep_broad_0.2_ep40",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_211": {
                "seed": {
                    "value": "random_seed[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_237": {
                "obj": {
                    "value": "tensor_state_list_psgld",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list_PSGLD), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./Dataset_Gen_Long_Run/Test_long_run_psgld_%s_step_1.3' % (ind + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_189": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_191": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_220": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ],
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ],
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/long_run_Dataset_Gen_plot.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./BNN_MNIST/data/', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_41": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./BNN_MNIST/data/', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_27": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "FilePath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_75": {
                "tensor": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(FilePath)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_list_tmp",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/long_run_plot_generate.py": {
        "torch": {
            "set_default_tensor_type_27": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_32": {
                "variable": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "FilePath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_33": {
                "tensor": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(FilePath)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_list_tmp",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/long_run_plot_nnsghmc.py": {
        "torch": {
            "set_default_tensor_type_26": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_29": {
                "variable": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "FilePath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_30": {
                "tensor": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(FilePath)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_33": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_list_tmp",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/long_run_plot_psgld.py": {
        "torch": {
            "set_default_tensor_type_27": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_30": {
                "variable": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "FilePath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_31": {
                "tensor": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(FilePath)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_list_tmp",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/long_run_plot_sghmc.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./BNN_MNIST/data/', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./BNN_MNIST/data/', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_26": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_29": {
                "variable": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "FilePath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_30": {
                "tensor": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(FilePath)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_33": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_list_tmp",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/long_run_plot_sgld.py": {
        "torch": {
            "set_default_tensor_type_27": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_30": {
                "variable": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "FilePath",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_31": {
                "tensor": {
                    "value": "tensor_state_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(FilePath)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_list_tmp",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "BNN_MNIST/run_PSGLD.py": {
        "torch": {
            "set_default_tensor_type_28": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "tensor_state_list_psgld",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list_PSGLD)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "random_seed[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_84": {
                "obj": {
                    "value": "tensor_state_list_psgld",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list_PSGLD), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./ReLU_Generalization_Long_Run/Test_long_run_psgld_%s_step_1.4' % (ind + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_67": {
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MLP_mnist.get_total_dim()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CNN_Cifar/CNN_Module.py": {
        "torch": {
            "max_270": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.CNN_out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_30": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_pool2d_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.AF(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_pool2d_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.AF(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_138": {
                "variable": {
                    "value": "conv1_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.AF(F.conv2d(x, weight_list[0][ind], weight_list[1][ind]))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_139": {
                "variable": {
                    "value": "conv2_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.AF(F.conv2d(conv1_output, weight_list[2][ind], weight_list[3][ind]))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_225": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_227": {
                "variable": {
                    "value": "prior_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "float(-0.5 * np.log(2.0 * 3.1415926 * sigma ** 2)) - weight ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_285": {
                "variable": {
                    "value": "self.out_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_286": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_310": {
                "variable": {
                    "value": "self.out_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_311": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_320": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.features(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "input": {
                    "value": "out_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_158": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sub_forward(weight_list, x, ind)",
                            "Call"
                        ],
                        [
                            "self.sub_forward(weight_list, x, ind)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_141": {
                "input": {
                    "value": "x_fc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2_output.view(-1, self.flat_size)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_list[4][ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weight_list[5][ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linear_142": {
                "input": {
                    "value": "fc1_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.AF(F.linear(x_fc, weight_list[4][ind], weight_list[5][ind]))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_list[6][ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weight_list[7][ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_160": {
                "variable": {
                    "value": "log_prob_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out_CNN, dim=1)",
                            "Call"
                        ],
                        [
                            "data_N * torch.mean(torch.sum(y * F.log_softmax(out_CNN, dim=1), dim=1, keepdim=True), dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "log_prob_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_prob_all, torch.unsqueeze(log_prob, dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_189": {
                "variable": {
                    "value": "log_prob_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out_CNN, dim=1)",
                            "Call"
                        ],
                        [
                            "data_N * torch.mean(torch.sum(y * F.log_softmax(out_CNN, dim=1), dim=1, keepdim=True), dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "grad_list",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_log_prob.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "log_prob_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_prob_all, torch.unsqueeze(log_prob, dim=0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "grad_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_list, grad_log_prob)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_226": {
                "input": {
                    "value": "torch.sum(y_ * self.forward(x, weight), dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_229": {
                "outputs": {
                    "value": "prob_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_N * torch.mean(torch.sum(y_ * self.forward(x, weight), dim=2), dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones(prob_out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "flag_retain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_287": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_290": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_292": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_312": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_314": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_316": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_138": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(self.AF(self.conv1(x)), (2, 2))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(self.AF(self.conv2(x)), 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.num_flat_features(x))",
                            "Call"
                        ],
                        [
                            "self.AF(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_list[0][ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weight_list[1][ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_139": {
                "input": {
                    "value": "conv1_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(self.AF(F.conv2d(x, weight_list[0][ind], weight_list[1][ind])), 2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight_list[2][ind]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "weight_list[3][ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_185": {
                "input": {
                    "value": "torch.sum(y * F.log_softmax(out_CNN, dim=1), dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_226": {
                "input": {
                    "value": "y_ * self.forward(x, weight)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_229": {
                "*size": {
                    "value": "prob_out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "y * F.log_softmax(out_CNN, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_186": {
                "outputs": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out_CNN, dim=1)",
                            "Call"
                        ],
                        [
                            "data_N * torch.mean(torch.sum(y * F.log_softmax(out_CNN, dim=1), dim=1, keepdim=True), dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_162": {
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out_CNN, dim=1)",
                            "Call"
                        ],
                        [
                            "data_N * torch.mean(torch.sum(y * F.log_softmax(out_CNN, dim=1), dim=1, keepdim=True), dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_193": {
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(out_CNN, dim=1)",
                            "Call"
                        ],
                        [
                            "data_N * torch.mean(torch.sum(y * F.log_softmax(out_CNN, dim=1), dim=1, keepdim=True), dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_185": {
                "input": {
                    "value": "out_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sub_forward(weight_list, x, ind)",
                            "Call"
                        ],
                        [
                            "self.sub_forward(weight_list, x, ind)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CNN_Cifar/CNN_Q_D.py": {
        "torch": {
            "tensor_62": {
                "variable": {
                    "value": "input_NN",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.stack((U_value, state_mom), dim=2).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_70": {
                "variable": {
                    "value": "grad_Q_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_Q[:, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "state_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_mom.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "U_value",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "energy_rep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "grad_U",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_U.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "grad_Q_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(out_Q.data - Q_dash_pre.data) / (energy.data - energy_pre.data + 1e-07) * grad_U.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "state_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_mom.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "input_NN",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.stack((U_value, state_mom, grad_U), dim=2).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_151": {
                "variable": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.offset + Q_out ** 2 * self.scale_Q_term + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ],
                        [
                            "self.offset + Q_out ** 2 * self.scale_Q_term + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.clamp_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clamp_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_153": {
                "variable": {
                    "value": "grad_D_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad(out, input_NN, torch.ones(out.data.shape), allow_unused=True, create_graph=flag_graph)[0][:, :, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "state_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_mom.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "Q_out",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Q_out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "U_value",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "energy_rep.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "input_NN",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.stack((U_value, state_mom, grad_U), dim=2).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "input_NN_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.stack((U_value, state_mom_pre, grad_U), dim=2).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_181": {
                "variable": {
                    "value": "out_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_scale * self.MLP.forward(input_NN_pre)",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(out_pre)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_184": {
                "variable": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.offset + Q_out ** 2 * self.scale_Q_term + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ],
                        [
                            "self.offset + Q_out ** 2 * self.scale_Q_term + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.clamp_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clamp_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "grad_D_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(torch.squeeze(out).data - out_pre.data) / (state_mom.data - state_mom_pre.data + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "grad_D_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2 * Q_out.data * self.scale_Q_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "grad_Q_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(Q_dash_pre.data - Q_pre.data) / (state_mom.data - state_mom_pre.data + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "grad_Q_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(out_Q.data - Q_pre.data) / (state_mom.data - state_mom_pre.data + 1e-07)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "grad_U.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "input": {
                    "value": "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_68": {
                "outputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_NN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(torch.stack((U_value, state_mom), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.stack((U_value, state_mom), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.stack((U_value, state_mom, grad_U), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.stack((U_value, state_mom, grad_U), dim=2).data)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "flag_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_71": {
                "input": {
                    "value": "grad_Q[:, :, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_141": {
                "data": {
                    "value": "energy.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "grad_U.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_149": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_156": {
                "outputs": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.offset + Q_out ** 2 * self.scale_Q_term + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ],
                        [
                            "self.offset + Q_out ** 2 * self.scale_Q_term + torch.squeeze(out)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(out_D, min=self.clamp_min, max=self.clamp_max)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Q_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(Q_out.data)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(Q_out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "flag_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_173": {
                "data": {
                    "value": "grad_U.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_183": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_62": {
                "tensors": {
                    "value": "(U_value, state_mom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_65": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_68": {
                "*size": {
                    "value": "out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_91": {
                "tensors": {
                    "value": "(U_value, state_mom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_145": {
                "tensors": {
                    "value": "(U_value, state_mom, grad_U)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "Q_out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_175": {
                "tensors": {
                    "value": "(U_value, state_mom, grad_U)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_176": {
                "tensors": {
                    "value": "(U_value, state_mom_pre, grad_U)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_154": {
                "outputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_NN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(torch.stack((U_value, state_mom), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.stack((U_value, state_mom), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.stack((U_value, state_mom, grad_U), dim=2).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.stack((U_value, state_mom, grad_U), dim=2).data)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "flag_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_154": {
                "*size": {
                    "value": "out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_187": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "self.MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ],
                        [
                            "self.D_scale * self.MLP.forward(input_NN)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "CNN_Cifar/CNN_Sampler.py": {
        "torch": {
            "tensor_84": {
                "variable": {
                    "value": "y_orig",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y.data.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_85": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "state_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_pos.data + state_mom.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "state_pos_clone",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_pos.data.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_103": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.total_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "state_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_mom.data - eps * grad_U.data - alpha * state_mom.data + add_noise.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_193": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "state_pos_clone",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_pos.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "energy.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_203": {
                "variable": {
                    "value": "grad_U",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_U.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "variable": {
                    "value": "mean_grad_U",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / data_N * grad_U.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "variable": {
                    "value": "mean_grad_U_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / data_N * grad_U_mod.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_247": {
                "variable": {
                    "value": "G_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.total_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_314": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_316": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "state_pos_clone",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_pos.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_323": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "energy.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_324": {
                "variable": {
                    "value": "grad_U",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_U.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "variable": {
                    "value": "mean_grad_U",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / data_N * grad_U.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_326": {
                "variable": {
                    "value": "mean_grad_U_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / data_N * grad_U_mod.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "mean_energy_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / data_N * energy_mod.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "variable": {
                    "value": "mean_energy_mod_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_energy_mod.repeat(1, self.total_dim).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "variable": {
                    "value": "G_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_CNN, self.total_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_359": {
                "variable": {
                    "value": "state_mom_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_mom.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_360": {
                "variable": {
                    "value": "state_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_mom.data - eps * Q_out.data * grad_U.data - eps * D_out.data * state_mom.data + eps * tau_out2.data + noise.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_375": {
                "variable": {
                    "value": "state_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_pos.data + eps * Q_out_dash.data * state_mom.data + eps * tau_out1.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_406": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(y, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(y, dim=1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_408": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(batch_y, CNN_out_dim).scatter_(1, y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_411": {
                "variable": {
                    "value": "state_pos_clone",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_pos.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_414": {
                "variable": {
                    "value": "grad_U",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_U.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_415": {
                "variable": {
                    "value": "mean_grad_U",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / data_N * (-grad_U.data - -state_pos.data / sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_417": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "energy.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_430": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.total_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_434": {
                "variable": {
                    "value": "state_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_pos.data - eps * G.data * grad_U.data + add_noise.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "state_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.total_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "state_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_pos.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_212": {
                "variable": {
                    "value": "state_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_mom.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "variable": {
                    "value": "state_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_mom.data - eps * Q_out.data * grad_U.data - eps * D_out.data * state_mom.data + eps * tau_out2.data + noise.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "variable": {
                    "value": "state_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state_pos.data + eps * Q_out_dash.data * state_mom.data + eps * tau_out1.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_296": {
                "data": {
                    "value": "state_pos.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_297": {
                "data": {
                    "value": "state_mom.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_320": {
                "variable": {
                    "value": "energy_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_energy_mod.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "variable": {
                    "value": "Q_out_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Q_out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_366": {
                "variable": {
                    "value": "Q_dash_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Q_out_dash.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_371": {
                "variable": {
                    "value": "Q_dash_pre",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Q_out_dash.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_423": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_grad_U.data * mean_grad_U.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "data[1][0].cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_248": {
                "input": {
                    "value": "2.0 * eps * D_out - eps ** 2 * B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "data": {
                    "value": "state_pos.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "data": {
                    "value": "state_mom.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_313": {
                "data": {
                    "value": "data[1][0].cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_355": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.total_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "data": {
                    "value": "torch.sqrt(2.0 * eps * D_out.data - eps ** 2 * B.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_405": {
                "data": {
                    "value": "data[1][0].cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_433": {
                "input": {
                    "value": "2 * eps * G",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_93": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.total_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_235": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.total_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_332": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.total_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_357": {
                "input": {
                    "value": "2.0 * eps * D_out.data - eps ** 2 * B.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_379": {
                "data": {
                    "value": "state_pos.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_427": {
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mean_grad_U.data * mean_grad_U.data)",
                            "Call"
                        ],
                        [
                            "exp_term * V + (1 - exp_term) * torch.tensor(mean_grad_U.data * mean_grad_U.data)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "CNN_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "CNN_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_278": {
                "data": {
                    "value": "state_pos.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_316": {
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "CNN_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_408": {
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "CNN_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_425": {
                "data": {
                    "value": "mean_grad_U.data * mean_grad_U.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_217": {
                "input": {
                    "value": "torch.abs(Q_out.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_218": {
                "input": {
                    "value": "torch.abs(D_out.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_217": {
                "input": {
                    "value": "Q_out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_218": {
                "input": {
                    "value": "D_out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CNN_Cifar/CNN_training_func.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x.data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x.data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "variable": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(y.data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y.data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.exp(-0.5 * torch.sum(torch.abs(y_batch.data - x_batch.data) ** 2, dim=2) / bandwidth.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_41": {
                "variable": {
                    "value": "K_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(torch.exp(-0.5 * torch.sum(torch.abs(y_batch.data - x_batch.data) ** 2, dim=2) / bandwidth.data))",
                            "Call"
                        ],
                        [
                            "torch.exp(-0.5 / bandwidth.data * exponent)[:num_samples, num_samples:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "G_K",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.sum(1.0 / bandwidth.data * K_batch.data * (y_batch.data - x_batch.data), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(x.data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x.data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_51": {
                "variable": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(y.data)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y.data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_54": {
                "variable": {
                    "value": "ZZT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x, y), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_55": {
                "variable": {
                    "value": "diag_ZZT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ZZT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(Z, Z.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_55": {
                "variable": {
                    "value": "diag_ZZT",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "K_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(torch.exp(-0.5 * torch.sum(torch.abs(y_batch.data - x_batch.data) ** 2, dim=2) / bandwidth.data))",
                            "Call"
                        ],
                        [
                            "torch.exp(-0.5 / bandwidth.data * exponent)[:num_samples, num_samples:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "G_K",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "G_K_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum(1.0 / bandwidth.data.cpu().numpy() * K_batch_np * (y_batch_np - x_batch_np), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "G_e",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "-(K_e.data + lam * Variable(torch.eye(num_samples)).data).inverse().matmul(G_K_e.data).data",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "med",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([torch.median(M)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "weight_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "dlogP_dW",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(-neg_dlogP_dW).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "bandwidth",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(sample_median(weight) / 2.0).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "concat_vector_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "concat_vector.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "dlogP_dW",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(-neg_dlogP_dW).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_127": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dlogP_dW * concat_vector",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "variable": {
                    "value": "bandwidth",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(sample_median(concat_vector) / 2.0).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(x_d.data - samples.data, 2, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_39": {
                "input": {
                    "value": "-0.5 * torch.sum(torch.abs(y_batch.data - x_batch.data) ** 2, dim=2) / bandwidth.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_42": {
                "input": {
                    "value": "1.0 / bandwidth.data * K_batch.data * (y_batch.data - x_batch.data)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_58": {
                "input": {
                    "value": "-0.5 / bandwidth.data * exponent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(M, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_96": {
                "input": {
                    "value": "dlogP_dW * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_98": {
                "*size": {
                    "value": "loss_1.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_102": {
                "input": {
                    "value": "dlogQ_dW * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "loss_2.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "concat_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(concat_vector, p_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_128": {
                "*size": {
                    "value": "loss_1.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_135": {
                "input": {
                    "value": "dlogQ_dW * concat_vector",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_136": {
                "*size": {
                    "value": "loss_2.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "p.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / counter_ELBO * p.grad.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "variable": {
                    "value": "p.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / counter_ELBO * p.grad.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_79": {
                "input": {
                    "value": "x_d.data - samples.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "median_85": {
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "torch.cat((M, d), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_39": {
                "input": {
                    "value": "torch.abs(y_batch.data - x_batch.data) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_39": {
                "input": {
                    "value": "y_batch.data - x_batch.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_74": {
                "n": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(x.data.shape[0])",
                            "Call"
                        ],
                        [
                            "int(x.data.shape[0])",
                            "Call"
                        ],
                        [
                            "int(x.data.shape[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CNN_Cifar/Cifar_Dataloader.py": {
        "torch": {
            "squeeze_102": {
                "input": {
                    "value": "data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_113": {
                "input": {
                    "value": "data[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "CNN_Cifar/DataGen_Sampler_Test.py": {
        "torch": {
            "DataLoader_48": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_39": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "Sampler_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Sampler_train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupCifar(X_train_sampler_tensor, Y_train_sampler_tensor, group=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "Sampler_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Sampler_test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupCifar(X_test_sampler_tensor, Y_test_sampler_tensor, group=4)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "CNN_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CNN_train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupCifar(X_train_CNN_tensor, Y_train_CNN_tensor, group=2)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "CNN_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CNN_test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupCifar(X_test_CNN_tensor, Y_test_CNN_tensor, group=3)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "Param['Random Seed'][n_r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_150": {
                "f": {
                    "value": "'%s/DataGen_Q_MLP_%s' % (model_load_path, model_str)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_151": {
                "f": {
                    "value": "'%s/DataGen_D_MLP_%s' % (model_load_path, model_str)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_164": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_165": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_180": {
                "seed": {
                    "value": "Param['Random Seed'][n_r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_198": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_199": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_215": {
                "seed": {
                    "value": "Param['Random Seed'][n_r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_231": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_232": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_252": {
                "seed": {
                    "value": "Param['Random Seed'][n_r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_268": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CNN_Cifar/DataGen_Sampler_Training.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "Sampler_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Sampler_train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupCifar(X_train_sampler_tensor, Y_train_sampler_tensor, group=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "Sampler_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Sampler_test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupCifar(X_test_sampler_tensor, Y_test_sampler_tensor, group=4)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "CNN_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CNN_train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupCifar(X_train_CNN_tensor, Y_train_CNN_tensor, group=2)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "CNN_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CNN_test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupCifar(X_test_CNN_tensor, Y_test_CNN_tensor, group=3)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "Adam_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(Q_MLP.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "Param['Optimizer Step Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                },
                "betas": {
                    "value": "Param['Optimizer Betas']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "Adam_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(D_MLP.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "Param['Optimizer Step Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                },
                "betas": {
                    "value": "Param['Optimizer Betas']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_39": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "Param['Random Seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "data": {
                    "value": "state_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "data": {
                    "value": "state_mom_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_274": {
                "obj": {
                    "value": "Q_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./tmp_model_save/DataGen_Q_MLP_%s_%s' % (timestr, ep + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_275": {
                "obj": {
                    "value": "D_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./tmp_model_save/DataGen_D_MLP_%s_%s' % (timestr, ep + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_185": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_186": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_189": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "data": {
                    "value": "state_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "data": {
                    "value": "state_mom_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_249": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CNN_Cifar/Optimizer_Test.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_train, tensor_train_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Param['Batch Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_Adam",
                            "variable"
                        ],
                        [
                            "Param_SGDM",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_test, tensor_test_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Param['Batch Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_Adam",
                            "variable"
                        ],
                        [
                            "Param_SGDM",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "test_loader_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_test, tensor_test_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_32": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "Adam",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "CNN.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "Param['Step Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_Adam",
                            "variable"
                        ],
                        [
                            "Param_SGDM",
                            "variable"
                        ]
                    ]
                },
                "betas": {
                    "value": "Param['Betas']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_Adam",
                            "variable"
                        ],
                        [
                            "Param_SGDM",
                            "variable"
                        ]
                    ]
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "Param['Random Seed'][n_r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_114": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_115": {
                "variable": {
                    "value": "SGDM",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "CNN.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "Param['Step Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_Adam",
                            "variable"
                        ],
                        [
                            "Param_SGDM",
                            "variable"
                        ]
                    ]
                },
                "momentum": {
                    "value": "Param['Momentum']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_Adam",
                            "variable"
                        ],
                        [
                            "Param_SGDM",
                            "variable"
                        ]
                    ]
                }
            },
            "manual_seed_111": {
                "seed": {
                    "value": "Param['Random Seed'][n_r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CNN_Cifar/Result_Plot.py": {
        "torch": {
            "set_default_tensor_type_39": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "X_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(X_grid).float().data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_172": {
                "f": {
                    "value": "'%sQ_MLP_%s' % (model_load_path, model_str)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_173": {
                "f": {
                    "value": "'%sD_MLP_%s' % (model_load_path, model_str)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "ndarray": {
                    "value": "X_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((-X1, X2), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((-X1, X2, X3), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((-X1, X3, X2), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((X3, X1, X2), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_48": {
                "ndarray": {
                    "value": "X_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((-X1, X2), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((-X1, X2, X3), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((-X1, X3, X2), axis=2)",
                            "Call"
                        ],
                        [
                            "np.stack((X3, X1, X2), axis=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CNN_Cifar/Sampler_Test.py": {
        "torch": {
            "DataLoader_48": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_39": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_117": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_train, tensor_train_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Param['Batch Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC",
                            "variable"
                        ],
                        [
                            "Param_SGHMC",
                            "variable"
                        ],
                        [
                            "Param_PSGLD",
                            "variable"
                        ],
                        [
                            "Param_SGLD",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_test, tensor_test_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Param['Batch Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC",
                            "variable"
                        ],
                        [
                            "Param_SGHMC",
                            "variable"
                        ],
                        [
                            "Param_PSGLD",
                            "variable"
                        ],
                        [
                            "Param_SGLD",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "test_loader_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_test, tensor_test_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_125": {
                "seed": {
                    "value": "Param['Random Seed'][n_r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_138": {
                "f": {
                    "value": "'%s/Q_MLP_%s' % (model_load_path, model_str)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_139": {
                "f": {
                    "value": "'%s/D_MLP_%s' % (model_load_path, model_str)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_152": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_153": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_168": {
                "seed": {
                    "value": "Param['Random Seed'][n_r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_186": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_187": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_203": {
                "seed": {
                    "value": "Param['Random Seed'][n_r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_219": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_220": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_240": {
                "seed": {
                    "value": "Param['Random Seed'][n_r]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_256": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ],
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ],
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CNN_Cifar/Sampler_Training.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_train, tensor_train_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Param['Batch Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_test, tensor_test_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Param['Batch Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "test_loader_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_test, tensor_test_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "Adam_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(Q_MLP.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "Param['Optimizer Step Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                },
                "betas": {
                    "value": "Param['Optimizer Betas']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "Adam_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(D_MLP.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "Param['Optimizer Step Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                },
                "betas": {
                    "value": "Param['Optimizer Betas']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_39": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_111": {
                "seed": {
                    "value": "Param['Random Seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "data": {
                    "value": "state_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "data": {
                    "value": "state_mom_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "Q_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./tmp_model_save/Q_MLP_%s_%s' % (timestr, ep + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_264": {
                "obj": {
                    "value": "D_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./tmp_model_save/D_MLP_%s_%s' % (timestr, ep + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_174": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_175": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_178": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_251": {
                "data": {
                    "value": "state_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "data": {
                    "value": "state_mom_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_238": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CNN_Cifar/Sampler_Training_eps.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.sqrt(eps1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_train, tensor_train_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Param['Batch Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_test, tensor_test_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Param['Batch Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "test_loader_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_test, tensor_test_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "Adam_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(Q_MLP.parameters()) + [eps]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "Param['Optimizer Step Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                },
                "betas": {
                    "value": "Param['Optimizer Betas']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "Adam_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(D_MLP.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "Param['Optimizer Step Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                },
                "betas": {
                    "value": "Param['Optimizer Betas']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_NNSGHMC_Training",
                            "variable"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_39": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_115": {
                "seed": {
                    "value": "Param['Random Seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "data": {
                    "value": "state_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "state_mom_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "Q_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./tmp_model_save/Q_MLP_%s_%s' % (timestr, ep + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_270": {
                "obj": {
                    "value": "D_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./tmp_model_save/D_MLP_%s_%s' % (timestr, ep + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_178": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_179": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_182": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_256": {
                "data": {
                    "value": "state_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_257": {
                "data": {
                    "value": "state_mom_list[-1].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_243": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "CNN_Cifar/Scratch.py": {
        "torch": {
            "tensor_47": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "A.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_30": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CNN_Cifar/Test_File.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_67": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_train, tensor_train_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Param['Batch Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_SGHMC",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_test, tensor_test_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "Param['Batch Size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Param_SGHMC",
                            "variable"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "test_loader_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Cifar_class(tensor_test, tensor_test_label)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_32": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_169": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_170": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Param['Num CNN']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.get_dimension()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CNN_Cifar/Test_Module.py": {
        "torch": {
            "unsqueeze_28": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "y_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y_.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y_.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y_.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "CNN_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_34": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.forward(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_58": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "y_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y_.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y_.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y_.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "CNN_out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_67": {
                "variable": {
                    "value": "(_, y_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out_log",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CNN.log_prob(x)",
                            "Call"
                        ],
                        [
                            "CNN.predict(x, weight)",
                            "Call"
                        ],
                        [
                            "CNN.predict(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "self.marginal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "size_of_marginal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(10000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_39": {
                "input": {
                    "value": "y_hot * out_log",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "y_hot * out_log",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_110": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "y_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(y_.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y_.shape[0])",
                            "Call"
                        ],
                        [
                            "int(y_.shape[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_114": {
                "variable": {
                    "value": "likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.CNN.predict(x, weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_118": {
                "variable": {
                    "value": "(_, yhat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "marginal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_marginal()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_121": {
                "input": {
                    "value": "y_hot * torch.log(marginal)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_121": {
                "input": {
                    "value": "marginal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_marginal()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CNN_Cifar/Util.py": {
        "torch": {
            "rand_191": {
                "variable": {
                    "value": "u_list",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_193": {
                "variable": {
                    "value": "total_num_replay",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ind_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_list <= p",
                            "Compare"
                        ]
                    ]
                }
            },
            "randint_205": {
                "variable": {
                    "value": "ind_state",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "size_repo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(state_pos_rep)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(total_num_replay,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multinomial_206": {
                "variable": {
                    "value": "ind_chain",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(num_CNN)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "total_num_replay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(ind_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_209": {
                "variable": {
                    "value": "ind_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(size_repo)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "total_num_replay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(ind_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_210": {
                "variable": {
                    "value": "ind_chain",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(total_num_replay,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "repo_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(repo_pos, state_pos_rep[int(x)][int(ind_chain[i]):int(ind_chain[i]) + 1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "repo_mom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(repo_mom, state_mom_rep[int(x)][int(ind_chain[i]):int(ind_chain[i]) + 1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_222": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_224": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_196": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_197": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "total_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_206": {
                "*size": {
                    "value": "num_CNN",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_209": {
                "*size": {
                    "value": "size_repo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(state_pos_rep)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_195": {
                "input": {
                    "value": "total_num_replay - 0.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Toy Example/NNSGHMC_toy.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.out_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.out_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_41": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.features(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "torch.abs(self.features(x))",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_116": {
                "variable": {
                    "value": "grad_U",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_121": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "torch.abs(self.features(x))",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_83": {
                "outputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "torch.abs(self.features(x))",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_NN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.cat((U_value, state_mom), dim=1).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cat((U_value, state_mom, grad_U), dim=1).data.clone(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clone_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "(U_value, state_mom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_83": {
                "*size": {
                    "value": "out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_125": {
                "outputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "torch.abs(self.features(x))",
                            "Call"
                        ],
                        [
                            "self.Q_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ],
                        [
                            "self.D_MLP.forward(input_NN)",
                            "Call"
                        ],
                        [
                            "torch.clamp(out, min=-self.clamp, max=self.clamp)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_NN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.cat((U_value, state_mom), dim=1).data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(torch.cat((U_value, state_mom, grad_U), dim=1).data.clone(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(out.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_182": {
                "*size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_184": {
                "input": {
                    "value": "2.0 * eps * D_out - eps ** 2 * torch.unsqueeze(torch.diag(B), dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.U.forward(state_pos_clone)",
                            "Call"
                        ],
                        [
                            "Variable(energy.data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_112": {
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.U.forward(state_pos_clone)",
                            "Call"
                        ],
                        [
                            "Variable(energy.data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_125": {
                "*size": {
                    "value": "out.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_168": {
                "*size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_200": {
                "input": {
                    "value": "torch.isnan(state_pos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_119": {
                "tensors": {
                    "value": "(U_value, state_mom, grad_U)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_165": {
                "outputs": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.U.forward(state_pos_clone)",
                            "Call"
                        ],
                        [
                            "Variable(energy.data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "state_pos_clone",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(state_pos.data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(energy.data.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_176": {
                "*size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_200": {
                "input": {
                    "value": "state_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(state_pos.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "state_pos.t().contiguous().view(total_dim, 1)",
                            "Call"
                        ],
                        [
                            "Variable(state_pos.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "state_pos.t().contiguous().view(total_dim, 1)",
                            "Call"
                        ],
                        [
                            "Variable(state_pos.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "state_pos + eps * Q_out * state_mom + eps * tau_out1",
                            "BinOp"
                        ],
                        [
                            "Variable(state_pos.data + eps * Q_out.data * state_mom.data + eps * tau_out1.data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_165": {
                "*size": {
                    "value": "energy.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_184": {
                "input": {
                    "value": "torch.diag(B)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_184": {
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Toy Example/SGHMC_toy.py": {
        "torch": {
            "sqrt_40": {
                "variable": {
                    "value": "add_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eps * 2 * self.C - eps ** 2 * self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "variable": {
                    "value": "add_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.randn(self.dim, 1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.randn(self.dim, 1))",
                            "Call"
                        ],
                        [
                            "Variable(torch.randn(self.dim, num_chain))",
                            "Call"
                        ],
                        [
                            "Variable(torch.randn(self.dim, num_chain))",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_39": {
                "*size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_67": {
                "*size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_68": {
                "input": {
                    "value": "torch.diag(torch.sqrt(eps * 2 * self.C - eps ** 2 * self.B))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_36": {
                "*size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_64": {
                "*size": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "diag_68": {
                "input": {
                    "value": "torch.sqrt(eps * 2 * self.C - eps ** 2 * self.B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_68": {
                "input": {
                    "value": "eps * 2 * self.C - eps ** 2 * self.B",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_69": {
                "input": {
                    "value": "torch.diag(self.C)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_34": {
                "outputs": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.U.forward(state_pos_clone)",
                            "Call"
                        ],
                        [
                            "self.U.forward(state_pos_clone)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "state_pos_clone",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(state_pos.data.clone(), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(state_pos.data.clone(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_62": {
                "outputs": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.U.forward(state_pos_clone)",
                            "Call"
                        ],
                        [
                            "self.U.forward(state_pos_clone)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "state_pos_clone",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(state_pos.data.clone(), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "Variable(state_pos.data.clone(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(energy.data.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_69": {
                "input": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_62": {
                "*size": {
                    "value": "energy.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Toy Example/Sampler_Training.py": {
        "torch": {
            "Adam_129": {
                "variable": {
                    "value": "Adam",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(Q_MLP.parameters()) + list(D_MLP.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_91": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "diag_124": {
                "input": {
                    "value": "opt.noise_estimate * torch.ones(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_104": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_137": {
                "obj": {
                    "value": "Q_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./saveModel/Q_state_%s_dim_%s_step_%s_clamp_%s_range_%s_time_%s' % (ep + 1, dim, opt.step_size, opt.clamp, opt.init_pos_range, timestr)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_138": {
                "obj": {
                    "value": "D_MLP.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./saveModel/D_state_%s_dim_%s_step_%s_clamp_%s_range_%s_time_%s' % (ep + 1, dim, opt.step_size, opt.clamp, opt.init_pos_range, timestr)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_124": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_141": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.num_chain",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_142": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.num_chain",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Toy Example/Stein.py": {
        "torch": {
            "unsqueeze_21": {
                "variable": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(x.data.clone(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_22": {
                "variable": {
                    "value": "y_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(y.data.clone(), requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_24": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * torch.sum(torch.abs(y_batch - x_batch) ** 2, dim=2) / bandwidth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "variable": {
                    "value": "K_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-0.5 * torch.sum(torch.abs(y_batch - x_batch) ** 2, dim=2) / bandwidth)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "G_K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / bandwidth * K_batch * (y_batch - x_batch)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "median_38": {
                "variable": {
                    "value": "med",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d",
                            "variable"
                        ],
                        [
                            "torch.cat((M, d), dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_50": {
                "variable": {
                    "value": "G_param",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "1.0 / num_samples * G * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inputs": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones(x.data.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(x_d - samples, 2, dim=1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(M, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_50": {
                "*size": {
                    "value": "x.data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "torch.abs(y_batch - x_batch) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_32": {
                "input": {
                    "value": "x_d - samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_24": {
                "input": {
                    "value": "y_batch - x_batch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_14": {
                "n": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(x.data.shape[0])",
                            "Call"
                        ],
                        [
                            "int(x.data.shape[0])",
                            "Call"
                        ],
                        [
                            "int(x.data.shape[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Toy Example/Test_Sampler.py": {
        "torch": {
            "from_numpy_68": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt('./TestResult/Cov_rand_1_scale_0.6')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(var).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_default_tensor_type_60": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "diag_76": {
                "input": {
                    "value": "opt.SGHMC_friction * torch.ones(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_77": {
                "input": {
                    "value": "opt.noise_estimate * torch.ones(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_89": {
                "f": {
                    "value": "./saveModel/Q_state_100_dim_10_clamp_5.0_range_6.0_time_20180413-1226",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_90": {
                "f": {
                    "value": "./saveModel/D_state_100_dim_10_clamp_5.0_range_6.0_time_20180413-1226",
                    "type": "str",
                    "possible_values": []
                }
            },
            "diag_97": {
                "input": {
                    "value": "opt.noise_estimate * torch.ones(dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "input": {
                    "value": "torch.ones(dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_80": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.num_chain",
                            "Attribute"
                        ],
                        [
                            "opt.num_chain",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_81": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.num_chain",
                            "Attribute"
                        ],
                        [
                            "opt.num_chain",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_98": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.num_chain",
                            "Attribute"
                        ],
                        [
                            "opt.num_chain",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_99": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "num_chain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.num_chain",
                            "Attribute"
                        ],
                        [
                            "opt.num_chain",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_66": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_76": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_77": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_97": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.dim",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Toy Example/Training_func.py": {
        "torch": {
            "cat_15": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(samples_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_19": {
                "variable": {
                    "value": "grad_log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "mean_log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / num_samples * torch.sum(U.forward(samples, transp=False))",
                            "BinOp"
                        ],
                        [
                            "1.0 / num_samples * torch.sum(U.forward(samples, transp=False))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Q_MLP.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_20": {
                "variable": {
                    "value": "grad_log_p_D",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "mean_log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / num_samples * torch.sum(U.forward(samples, transp=False))",
                            "BinOp"
                        ],
                        [
                            "1.0 / num_samples * torch.sum(U.forward(samples, transp=False))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "D_MLP.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(samples_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_53": {
                "variable": {
                    "value": "grad_log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "mean_log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / num_samples * torch.sum(U.forward(samples, transp=False))",
                            "BinOp"
                        ],
                        [
                            "1.0 / num_samples * torch.sum(U.forward(samples, transp=False))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "Q_MLP.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_54": {
                "variable": {
                    "value": "grad_log_p_D",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "mean_log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / num_samples * torch.sum(U.forward(samples, transp=False))",
                            "BinOp"
                        ],
                        [
                            "1.0 / num_samples * torch.sum(U.forward(samples, transp=False))",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "D_MLP.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "U.forward(samples, transp=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "G_log",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(G_log, grad_x_log_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "U.forward(samples, transp=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Toy Example/Util.py": {
        "torch": {
            "from_numpy_84": {
                "variable": {
                    "value": "X_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "Y_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-U.forward(XY, transp=False)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_42": {
                "variable": {
                    "value": "all_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(state_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_48": {
                "variable": {
                    "value": "all_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(tuple(state_list), dim=0)[:, :, chain_ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_192": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_43": {
                "tensor": {
                    "value": "all_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(tuple(state_list), dim=0)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(torch.stack(tuple(state_list), dim=0)[:, :, chain_ind])",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_76": {
                "input": {
                    "value": "(state_pos - self.mu) * torch.t(torch.matmul(torch.inverse(self.var), torch.t(state_pos - self.mu)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "state_convert",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_convert, i.t())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "state_convert",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_convert, i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_186": {
                "input": {
                    "value": "torch.rand(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_list",
                            "variable"
                        ],
                        [
                            "all_sample_list",
                            "variable"
                        ]
                    ]
                }
            },
            "stack_48": {
                "tensors": {
                    "value": "tuple(state_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "(X_torch, Y_torch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_186": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_76": {
                "input": {
                    "value": "state_pos - self.mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "input": {
                    "value": "torch.inverse(self.var)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.t(state_pos - self.mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_76": {
                "input": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}