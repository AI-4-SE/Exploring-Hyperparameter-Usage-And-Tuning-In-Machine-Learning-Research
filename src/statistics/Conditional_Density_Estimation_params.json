{
    "cde/BaseConditionalDensity.py": {
        "sklearn": {}
    },
    "cde/density_estimator/BaseDensityEstimator.py": {
        "sklearn": {
            "cross_validate_32": {
                "variable": {
                    "value": "cv_results",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "possible_values": []
                },
                "y": {
                    "value": "Y",
                    "possible_values": []
                },
                "cv": {
                    "value": "n_splits",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "return_estimator": {
                    "value": "True",
                    "possible_values": []
                },
                "verbose": {
                    "value": "verbose",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GridSearchCV_68": {
                "variable": {
                    "value": "cv_model",
                    "possible_values": []
                },
                "estimator": {
                    "value": "self",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "param_grid",
                    "possible_values": [
                        [
                            "self._param_grid()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "refit": {
                    "value": "True",
                    "possible_values": []
                },
                "cv": {
                    "value": "n_folds",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "verbose",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "cde/density_estimator/BaseNNEstimator.py": {
        "sklearn": {
            "ParameterGrid_70": {
                "param_grid": {
                    "value": "param_grid",
                    "possible_values": [
                        [
                            "self._param_grid()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KFold_71": {
                "n_splits": {
                    "value": "n_folds",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "get_default_session_206": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "placeholder_235": {
                "variable": {
                    "value": "self.X_ph",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.ndim_x)",
                    "possible_values": []
                }
            },
            "placeholder_236": {
                "variable": {
                    "value": "self.Y_ph",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.ndim_y)",
                    "possible_values": []
                }
            },
            "placeholder_with_default_237": {
                "variable": {
                    "value": "self.train_phase",
                    "possible_values": []
                },
                "input": {
                    "value": "False",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "placeholder_with_default_261": {
                "variable": {
                    "value": "self.dropout_ph",
                    "possible_values": []
                },
                "input": {
                    "value": "0.0",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "possible_values": []
                }
            },
            "get_default_session_290": {
                "variable": {
                    "value": "self.sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConfigProto_85": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'CPU': 1}",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "get_default_session_226": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "concat_272": {
                "variable": {
                    "value": "weight_vector",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(param, (-1,)) for param in core_network.get_params_internal() if '/W' in param.name]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "get_variable_scope_299": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_89": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'CPU': 1}, inter_op_parallelism_threads=1, intra_op_parallelism_threads=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_208": {
                "ref": {
                    "value": "self.mean_x_sym",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_mean",
                    "possible_values": []
                }
            },
            "assign_209": {
                "ref": {
                    "value": "self.std_x_sym",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_std",
                    "possible_values": []
                }
            },
            "assign_210": {
                "ref": {
                    "value": "self.mean_y_sym",
                    "possible_values": []
                },
                "value": {
                    "value": "self.y_mean",
                    "possible_values": []
                }
            },
            "assign_211": {
                "ref": {
                    "value": "self.std_y_sym",
                    "possible_values": []
                },
                "value": {
                    "value": "self.y_std",
                    "possible_values": []
                }
            },
            "add_loss_277": {
                "loss": {
                    "value": "self.l2_reg_loss",
                    "possible_values": []
                },
                "loss_collection": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "possible_values": []
                }
            },
            "add_loss_280": {
                "loss": {
                    "value": "self.l1_reg_loss",
                    "possible_values": []
                },
                "loss_collection": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "possible_values": []
                }
            },
            "assign_228": {
                "ref": {
                    "value": "self.x_noise_std_sym",
                    "possible_values": []
                },
                "value": {
                    "value": "self.x_noise_std",
                    "possible_values": []
                }
            },
            "assign_229": {
                "ref": {
                    "value": "self.y_noise_std_sym",
                    "possible_values": []
                },
                "value": {
                    "value": "self.y_noise_std",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "tensor": {
                    "value": "param",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "possible_values": []
                }
            },
            "reduce_sum_276": {
                "input_tensor": {
                    "value": "weight_vector ** 2",
                    "possible_values": []
                }
            },
            "reduce_sum_279": {
                "input_tensor": {
                    "value": "tf.abs(weight_vector)",
                    "possible_values": []
                }
            },
            "global_variables_300": {
                "scope": {
                    "value": "current_scope",
                    "possible_values": [
                        [
                            "tf.get_variable_scope().name",
                            "Attribute"
                        ]
                    ]
                }
            },
            "abs_279": {
                "x": {
                    "value": "weight_vector",
                    "possible_values": [
                        [
                            "tf.concat([tf.reshape(param, (-1,)) for param in core_network.get_params_internal() if '/W' in param.name], axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cde/density_estimator/BaseNNMixtureEstimator.py": {
        "sklearn": {
            "GaussianMixture_212": {
                "variable": {
                    "value": "gmm",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.n_centers",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "5",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "reduce_mean_225": {
                "variable": {
                    "value": "self.softmax_entropy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(-tf.multiply(tf.log(self.weights), self.weights), axis=1)",
                    "possible_values": []
                }
            },
            "placeholder_with_default_226": {
                "variable": {
                    "value": "self.entropy_reg_coef_ph",
                    "possible_values": []
                },
                "input": {
                    "value": "float(self.entropy_reg_coef)",
                    "possible_values": []
                },
                "name": {
                    "value": "entropy_reg_coef",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "possible_values": []
                }
            },
            "get_default_session_285": {
                "variable": {
                    "value": "self.sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_collection_288": {
                "variable": {
                    "value": "var_list",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "add_loss_229": {
                "loss": {
                    "value": "self.softmax_entrop_loss",
                    "possible_values": []
                },
                "loss_collection": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "possible_values": []
                }
            },
            "reset_default_graph_272": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "run_289": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_sum_225": {
                "input_tensor": {
                    "value": "-tf.multiply(tf.log(self.weights), self.weights)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "variable_scope_278": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "AdamOptimizer_282": {
                "learning_rate": {
                    "value": "0.002",
                    "possible_values": []
                }
            },
            "multiply_225": {
                "x": {
                    "value": "tf.log(self.weights)",
                    "possible_values": []
                },
                "y": {
                    "value": "self.weights",
                    "possible_values": []
                }
            },
            "trainable_variables_283": {
                "scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "log_225": {
                "x": {
                    "value": "self.weights",
                    "possible_values": []
                }
            }
        }
    },
    "cde/density_estimator/KMN.py": {
        "sklearn": {},
        "tensorflow": {
            "set_verbosity_23": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "possible_values": []
                }
            },
            "set_random_seed_71": {
                "seed": {
                    "value": "random_seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_184": {
                "variable": {
                    "value": "self.locs",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((self.n_centers, self.ndim_y))",
                    "possible_values": []
                },
                "name": {
                    "value": "locs",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "unstack_187": {
                "variable": {
                    "value": "self.locs_array",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.transpose(tf.multiply(tf.ones((self.batch_size, self.n_centers, self.ndim_y)), self.locs), perm=[1, 0, 2])",
                    "possible_values": []
                }
            },
            "unstack_197": {
                "variable": {
                    "value": "self.scales_array",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.transpose(tf.multiply(tf.ones((self.batch_size, self.ndim_y, self.n_scales)), self.scales), perm=[2, 0, 1])",
                    "possible_values": []
                }
            },
            "assign_142": {
                "ref": {
                    "value": "self.locs",
                    "possible_values": []
                },
                "value": {
                    "value": "sampled_locs",
                    "possible_values": [
                        [
                            "sample_center_points(Y_normalized, method=self.center_sampling_method, k=self.n_centers, keep_edges=self.keep_edges, random_state=self.random_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "transpose_223": {
                "variable": {
                    "value": "self.scales_unnormalized",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.multiply(tf.ones((self.ndim_y, self.n_scales)), self.scales)",
                    "possible_values": []
                }
            },
            "shape_163": {
                "input": {
                    "value": "self.X_ph",
                    "possible_values": []
                }
            },
            "transpose_187": {
                "a": {
                    "value": "tf.multiply(tf.ones((self.batch_size, self.n_centers, self.ndim_y)), self.locs)",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "possible_values": []
                }
            },
            "transpose_197": {
                "a": {
                    "value": "tf.multiply(tf.ones((self.batch_size, self.ndim_y, self.n_scales)), self.scales)",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "possible_values": []
                }
            },
            "multiply_187": {
                "x": {
                    "value": "tf.ones((self.batch_size, self.n_centers, self.ndim_y))",
                    "possible_values": []
                },
                "y": {
                    "value": "self.locs",
                    "possible_values": []
                }
            },
            "Variable_192": {
                "initial_value": {
                    "value": "self.init_scales_softplus",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.train_scales",
                    "possible_values": []
                }
            },
            "multiply_197": {
                "x": {
                    "value": "tf.ones((self.batch_size, self.ndim_y, self.n_scales))",
                    "possible_values": []
                },
                "y": {
                    "value": "self.scales",
                    "possible_values": []
                }
            },
            "reduce_prod_212": {
                "input_tensor": {
                    "value": "self.std_y_sym",
                    "possible_values": []
                }
            },
            "reduce_sum_213": {
                "input_tensor": {
                    "value": "tf.log(self.std_y_sym)",
                    "possible_values": []
                }
            },
            "transpose_220": {
                "a": {
                    "value": "tf.multiply(tf.ones((self.ndim_y, self.n_scales)), self.scales)",
                    "possible_values": []
                }
            },
            "multiply_223": {
                "x": {
                    "value": "tf.ones((self.ndim_y, self.n_scales))",
                    "possible_values": []
                },
                "y": {
                    "value": "self.scales",
                    "possible_values": []
                }
            },
            "ones_187": {
                "shape": {
                    "value": "(self.batch_size, self.n_centers, self.ndim_y)",
                    "possible_values": []
                }
            },
            "ones_197": {
                "shape": {
                    "value": "(self.batch_size, self.ndim_y, self.n_scales)",
                    "possible_values": []
                }
            },
            "log_213": {
                "x": {
                    "value": "self.std_y_sym",
                    "possible_values": []
                }
            },
            "multiply_220": {
                "x": {
                    "value": "tf.ones((self.ndim_y, self.n_scales))",
                    "possible_values": []
                },
                "y": {
                    "value": "self.scales",
                    "possible_values": []
                }
            },
            "ones_223": {
                "shape": {
                    "value": "(self.ndim_y, self.n_scales)",
                    "possible_values": []
                }
            },
            "ones_220": {
                "shape": {
                    "value": "(self.ndim_y, self.n_scales)",
                    "possible_values": []
                }
            }
        }
    },
    "cde/density_estimator/NKDE.py": {
        "sklearn": {
            "normalize_192": {
                "variable": {
                    "value": "neighbor_weights",
                    "possible_values": []
                },
                "X": {
                    "value": "neighbor_distances.filled(fill_value=0)",
                    "possible_values": []
                },
                "norm": {
                    "value": "l1",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "cde/density_simulation/GMM.py": {
        "sklearn": {}
    },
    "cde/density_simulation/toy_densities.py": {
        "sklearn": {
            "train_test_split_13": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_data",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_data",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "train_test_split_24": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_data",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_data",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_size",
                    "possible_values": [
                        [
                            "0.5",
                            "Constant"
                        ]
                    ]
                },
                "test_size": {
                    "value": "1 - train_size",
                    "possible_values": []
                }
            }
        }
    },
    "cde/evaluation/eurostoxx_eval/empirical_benchmark.py": {
        "sklearn": {}
    },
    "cde/evaluation/eurostoxx_eval/fit_density.py": {
        "sklearn": {
            "PCA_10": {
                "variable": {
                    "value": "pca",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_14": {
                "variable": {
                    "value": "pca",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "cde/utils/center_point_select.py": {
        "sklearn": {
            "cosine_distances_46": {
                "variable": {
                    "value": "dists",
                    "possible_values": []
                },
                "X": {
                    "value": "Y_farthest",
                    "possible_values": [
                        [
                            "Y[np.ix_(fathest_points_idx)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "euclidean_distances_66": {
                "variable": {
                    "value": "dists",
                    "possible_values": []
                },
                "X": {
                    "value": "Y",
                    "possible_values": [
                        [
                            "np.expand_dims(Y, axis=1)",
                            "Call"
                        ],
                        [
                            "np.delete(Y, indices_to_remove, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "KMeans_76": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "possible_values": [
                        [
                            "k - n_edge_points",
                            "BinOp"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "-2",
                            "UnaryOp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "possible_values": [
                        [
                            "np.random.RandomState()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AgglomerativeClustering_82": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "possible_values": [
                        [
                            "k - n_edge_points",
                            "BinOp"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "linkage": {
                    "value": "complete",
                    "possible_values": []
                }
            }
        }
    },
    "cde/density_estimator/MDN.py": {
        "tensorflow": {
            "set_random_seed_54": {
                "seed": {
                    "value": "random_seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "zeros_like_159": {
                "input": {
                    "value": "self.y_input",
                    "possible_values": []
                }
            },
            "reduce_prod_170": {
                "input_tensor": {
                    "value": "self.std_y_sym",
                    "possible_values": []
                }
            },
            "reduce_sum_171": {
                "input_tensor": {
                    "value": "tf.log(self.std_y_sym)",
                    "possible_values": []
                }
            },
            "unstack_158": {
                "value": {
                    "value": "self.scales",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_171": {
                "x": {
                    "value": "self.std_y_sym",
                    "possible_values": []
                }
            }
        }
    },
    "cde/density_estimator/NF.py": {
        "tensorflow": {
            "get_collection_120": {
                "variable": {
                    "value": "var_list",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "set_random_seed_52": {
                "seed": {
                    "value": "random_seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "run_121": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reset_default_graph_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "split_196": {
                "variable": {
                    "value": "flow_params",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "L.get_output(core_network.output_layer)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "param_split_sizes",
                    "possible_values": [
                        [
                            "[flow.get_param_size(self.ndim_y) for flow in flow_classes]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reduce_sum_241": {
                "variable": {
                    "value": "self.reg_loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses(scope=self.name)",
                    "possible_values": []
                }
            },
            "get_default_session_118": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "InteractiveSession_118": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "Normal_205": {
                "variable": {
                    "value": "base_dist",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "squeeze_221": {
                "variable": {
                    "value": "self.pdf_",
                    "possible_values": []
                },
                "input": {
                    "value": "target_dist.prob(self.y_input)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "squeeze_222": {
                "variable": {
                    "value": "self.log_pdf_",
                    "possible_values": []
                },
                "input": {
                    "value": "target_dist.log_prob(self.y_input)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "squeeze_223": {
                "variable": {
                    "value": "self.cdf_",
                    "possible_values": []
                },
                "input": {
                    "value": "target_dist.cdf(self.y_input)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_248": {
                "variable": {
                    "value": "(gradients, _)",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "300000.0",
                    "possible_values": []
                }
            },
            "reduce_prod_240": {
                "input_tensor": {
                    "value": "self.pdf_",
                    "possible_values": []
                }
            },
            "get_regularization_losses_241": {
                "scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "AdamOptimizer_244": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_prod_231": {
                "input_tensor": {
                    "value": "self.std_y_sym",
                    "possible_values": []
                }
            },
            "reduce_sum_232": {
                "input_tensor": {
                    "value": "tf.log(self.std_y_sym)",
                    "possible_values": []
                }
            },
            "reduce_sum_242": {
                "input_tensor": {
                    "value": "self.log_pdf_",
                    "possible_values": []
                }
            },
            "log_232": {
                "x": {
                    "value": "self.std_y_sym",
                    "possible_values": []
                }
            },
            "reduce_prod_235": {
                "input_tensor": {
                    "value": "self.std_y_sym",
                    "possible_values": []
                }
            }
        }
    },
    "cde/density_estimator/normalizing_flows/AffineFlow.py": {
        "tensorflow": {
            "exp_45": {
                "x": {
                    "value": "-self._a",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "input_tensor": {
                    "value": "self._a",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "split_23": {
                "value": {
                    "value": "params",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[n_dims, n_dims]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_39": {
                "x": {
                    "value": "self._a",
                    "possible_values": []
                }
            }
        }
    },
    "cde/density_estimator/normalizing_flows/BaseNormalizingFlow.py": {
        "tensorflow": {
            "cond_48": {
                "pred": {
                    "value": "tf.equal(tf.rank(z), tf.rank([0.0]))",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.expand_dims(z, 1)",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : z",
                    "possible_values": []
                }
            },
            "squeeze_40": {
                "input": {
                    "value": "self._ildj(y)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "equal_48": {
                "x": {
                    "value": "tf.rank(z)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.rank([0.0])",
                    "possible_values": []
                }
            },
            "rank_48": {
                "input": {
                    "value": "[0.0]",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "input": {
                    "value": "z",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "cde/density_estimator/normalizing_flows/IdentityFlow.py": {
        "tensorflow": {
            "zeros_34": {
                "shape": {
                    "value": "(tf.shape(x)[0], 1)",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "shape": {
                    "value": "(tf.shape(y)[0], 1)",
                    "possible_values": []
                }
            },
            "shape_34": {
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "shape_37": {
                "input": {
                    "value": "y",
                    "possible_values": []
                }
            }
        }
    },
    "cde/density_estimator/normalizing_flows/PlanarFlow.py": {
        "tensorflow": {
            "reduce_sum_46": {
                "variable": {
                    "value": "wtu",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w * u",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "variable": {
                    "value": "norm_w_squared",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w ** 2",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "variable": {
                    "value": "uw",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._w * self._u",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "assert_greater_equal_71": {
                "variable": {
                    "value": "invertible",
                    "possible_values": []
                },
                "x": {
                    "value": "uw",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self._w * self._u, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "name": {
                    "value": "Invertibility_Constraint",
                    "possible_values": []
                },
                "data": {
                    "value": "[self._u, self._w, uw]",
                    "possible_values": []
                }
            },
            "log_90": {
                "x": {
                    "value": "tf.abs(det_grad)",
                    "possible_values": []
                }
            },
            "reduce_sum_55": {
                "input_tensor": {
                    "value": "self._w * z",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "control_dependencies_72": {
                "control_inputs": {
                    "value": "[invertible]",
                    "possible_values": []
                }
            },
            "reduce_sum_89": {
                "input_tensor": {
                    "value": "self._u * psi",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "abs_90": {
                "x": {
                    "value": "det_grad",
                    "possible_values": [
                        [
                            "1.0 + tf.reduce_sum(self._u * psi, 1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_25": {
                "value": {
                    "value": "params",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[n_dims, n_dims, 1]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softplus_47": {
                "features": {
                    "value": "wtu",
                    "possible_values": [
                        [
                            "tf.reduce_sum(w * u, 1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_62": {
                "x": {
                    "value": "z",
                    "possible_values": [
                        [
                            "InvertedPlanarFlow._handle_input_dimensionality(z)",
                            "Call"
                        ],
                        [
                            "InvertedPlanarFlow._handle_input_dimensionality(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_73": {
                "x": {
                    "value": "self._wzb(z)",
                    "possible_values": []
                }
            }
        }
    },
    "cde/density_estimator/normalizing_flows/RadialFlow.py": {
        "tensorflow": {
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "tf.abs(z - self._gamma)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "log_74": {
                "x": {
                    "value": "det",
                    "possible_values": [
                        [
                            "(1.0 + ab * h) ** (self.n_dims - 1) * (1.0 + ab * h + ab * der_h * r)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_81": {
                "features": {
                    "value": "alpha",
                    "possible_values": []
                }
            },
            "abs_50": {
                "x": {
                    "value": "z - self._gamma",
                    "possible_values": []
                }
            },
            "gradients_71": {
                "ys": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self._h(r)",
                            "Call"
                        ],
                        [
                            "self._h(r)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[r]",
                    "possible_values": []
                }
            },
            "exp_88": {
                "x": {
                    "value": "beta",
                    "possible_values": []
                }
            },
            "split_34": {
                "value": {
                    "value": "params",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[1, 1, n_dims]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "cde/evaluation/empirical_eval/experiment_util.py": {
        "tensorflow": {
            "ConfigProto_174": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'CPU': 1}",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reset_default_graph_186": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_177": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'CPU': 1}, inter_op_parallelism_threads=1, intra_op_parallelism_threads=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "cde/evaluation/eurostoxx_eval/underest_of_variance.py": {
        "tensorflow": {
            "Session_35": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "cde/model_fitting/ConfigRunner.py": {
        "tensorflow": {
            "Session_445": {
                "graph": {
                    "value": "tf.Graph()",
                    "possible_values": []
                }
            },
            "Session_433": {
                "graph": {
                    "value": "tf.Graph()",
                    "possible_values": []
                }
            },
            "reset_default_graph_237": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_445": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_252": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Graph_433": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_253": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "cde/model_fitting/ConfigRunnerLogProb.py": {
        "tensorflow": {
            "reset_default_graph_230": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_245": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_246": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "cde/model_fitting/plotting.py": {
        "tensorflow": {
            "Session_107": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "possible_values": [
                        [
                            "model.estimator.sess.graph",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Session_18": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_137": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_110": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "cde/utils/tf_utils/adamW.py": {
        "tensorflow": {
            "convert_to_tensor_109": {
                "variable": {
                    "value": "self._weight_decay_tensor",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "possible_values": [
                        [
                            "self._weight_decay",
                            "Attribute"
                        ],
                        [
                            "weight_decay()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight_decay",
                    "possible_values": []
                }
            },
            "no_op_117": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_op_123": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "control_dependencies_128": {
                "control_inputs": {
                    "value": "[self._decay_weights_op(var)]",
                    "possible_values": []
                }
            },
            "control_dependencies_132": {
                "control_inputs": {
                    "value": "[self._decay_weights_op(var)]",
                    "possible_values": []
                }
            },
            "control_dependencies_139": {
                "control_inputs": {
                    "value": "[decay_op]",
                    "possible_values": []
                }
            },
            "control_dependencies_146": {
                "control_inputs": {
                    "value": "[resource_variable_ops.resource_scatter_add(x.handle, i, v)]",
                    "possible_values": []
                }
            },
            "control_dependencies_153": {
                "control_inputs": {
                    "value": "[decay_op]",
                    "possible_values": []
                }
            }
        }
    },
    "cde/utils/tf_utils/layers.py": {
        "tensorflow": {
            "get_variable_37": {
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'%s_%d' % (type(self).__name__, G._n_layers)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "self.get_output_shape_for(self.input_shape)",
                            "Call"
                        ],
                        [
                            "self.get_output_shape_for(self.input_shapes)",
                            "Call"
                        ],
                        [
                            "tuple(shape)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "spec",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "lambda _: tf.constant(0.0)",
                            "Lambda"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "py_func_336": {
                "variable": {
                    "value": "(result,)",
                    "possible_values": []
                },
                "func": {
                    "value": "py_ortho_init(self.scale)",
                    "possible_values": []
                },
                "inp": {
                    "value": "[shape]",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32]",
                    "possible_values": []
                }
            },
            "reshape_405": {
                "variable": {
                    "value": "reshaped_param",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.param",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,) * (ndim - 1) + (self.num_units,)",
                    "possible_values": []
                }
            },
            "concat_406": {
                "variable": {
                    "value": "tile_arg",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(input)[:ndim - 1], [1]]",
                    "possible_values": []
                }
            },
            "tile_407": {
                "variable": {
                    "value": "tiled",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_param",
                    "possible_values": [
                        [
                            "tf.reshape(self.param, (1,) * (ndim - 1) + (self.num_units,))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_arg",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[tf.shape(input)[:ndim - 1], [1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_453": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W",
                    "possible_values": []
                }
            },
            "max_pool_632": {
                "variable": {
                    "value": "pooled",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "(1,) + self.pool_size + (1,)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1,) + self.stride + (1,)",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "possible_values": []
                }
            },
            "linspace_646": {
                "variable": {
                    "value": "lin",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "possible_values": []
                },
                "num": {
                    "value": "dim_val",
                    "possible_values": [
                        [
                            "x.get_shape()[dim + 1].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "expand_dims_647": {
                "variable": {
                    "value": "lin",
                    "possible_values": []
                },
                "input": {
                    "value": "lin",
                    "possible_values": [
                        [
                            "tf.linspace(-1.0, 1.0, dim_val)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lin, 1 - dim)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lin, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lin, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1 - dim",
                    "possible_values": []
                }
            },
            "expand_dims_648": {
                "variable": {
                    "value": "lin",
                    "possible_values": []
                },
                "input": {
                    "value": "lin",
                    "possible_values": [
                        [
                            "tf.linspace(-1.0, 1.0, dim_val)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lin, 1 - dim)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lin, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lin, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "expand_dims_649": {
                "variable": {
                    "value": "lin",
                    "possible_values": []
                },
                "input": {
                    "value": "lin",
                    "possible_values": [
                        [
                            "tf.linspace(-1.0, 1.0, dim_val)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lin, 1 - dim)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lin, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(lin, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "reduce_max_650": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reshape_655": {
                "tensor": {
                    "value": "tf.concat(axis=2, values=vals)",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, x.get_shape()[-1].value * 2]",
                    "possible_values": []
                }
            },
            "reduce_prod_802": {
                "variable": {
                    "value": "to_flatten",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.shape(input)[self.outdim - 1:]",
                    "possible_values": []
                }
            },
            "moments_1010": {
                "variable": {
                    "value": "(mean, var)",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "concat_1062": {
                "variable": {
                    "value": "self.W_x_ruc",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.W_xr, self.W_xu, self.W_xc]",
                    "possible_values": []
                }
            },
            "concat_1063": {
                "variable": {
                    "value": "self.W_h_ruc",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.W_hr, self.W_hu, self.W_hc]",
                    "possible_values": []
                }
            },
            "concat_1064": {
                "variable": {
                    "value": "self.W_x_ru",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.W_xr, self.W_xu]",
                    "possible_values": []
                }
            },
            "concat_1065": {
                "variable": {
                    "value": "self.W_h_ru",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.W_hr, self.W_hu]",
                    "possible_values": []
                }
            },
            "concat_1066": {
                "variable": {
                    "value": "self.b_ruc",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.b_r, self.b_u, self.b_c]",
                    "possible_values": []
                }
            },
            "placeholder_1074": {
                "variable": {
                    "value": "h_dummy",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_units)",
                    "possible_values": []
                },
                "name": {
                    "value": "h_dummy",
                    "possible_values": []
                }
            },
            "placeholder_1075": {
                "variable": {
                    "value": "x_dummy",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, input_dim)",
                    "possible_values": []
                },
                "name": {
                    "value": "x_dummy",
                    "possible_values": []
                }
            },
            "shape_1111": {
                "variable": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1114": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([n_batches, n_steps, -1])",
                    "possible_values": []
                }
            },
            "transpose_1123": {
                "variable": {
                    "value": "shuffled_input",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "scan_1124": {
                "variable": {
                    "value": "hs",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.step",
                    "possible_values": []
                },
                "elems": {
                    "value": "shuffled_input",
                    "possible_values": [
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "h0s",
                    "possible_values": [
                        [
                            "kwargs['recurrent_state'][self]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(tf.reshape(self.h0, (1, self.num_units)), (n_batches, 1))",
                            "Call"
                        ],
                        [
                            "self.nonlinearity(c0s)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(self.h0, (1, self.num_units)), (n_batches, 1))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(self.h0, (1, self.num_units)), (n_batches, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_1129": {
                "variable": {
                    "value": "shuffled_hs",
                    "possible_values": []
                },
                "a": {
                    "value": "hs",
                    "possible_values": [
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=h0s)",
                            "Call"
                        ],
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=state)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "reshape_1150": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([n_batch, -1])",
                    "possible_values": []
                }
            },
            "GRUCell_1164": {
                "variable": {
                    "value": "gru",
                    "possible_values": []
                },
                "num_units": {
                    "value": "num_units",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_nonlinearity",
                    "possible_values": [
                        [
                            "tf.identity",
                            "Attribute"
                        ],
                        [
                            "tf.identity",
                            "Attribute"
                        ],
                        [
                            "tf.identity",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_1171": {
                "variable": {
                    "value": "input_dummy",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, input_dim)",
                    "possible_values": []
                },
                "name": {
                    "value": "input_dummy",
                    "possible_values": []
                }
            },
            "placeholder_1172": {
                "variable": {
                    "value": "hidden_dummy",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_units)",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_dummy",
                    "possible_values": []
                }
            },
            "shape_1192": {
                "variable": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_1194": {
                "variable": {
                    "value": "state",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(self.h0, (1, self.num_units))",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(n_batches, 1)",
                    "possible_values": []
                }
            },
            "concat_1308": {
                "variable": {
                    "value": "self.W_x_ifo",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.W_xi, self.W_xf, self.W_xo]",
                    "possible_values": []
                }
            },
            "concat_1309": {
                "variable": {
                    "value": "self.W_h_ifo",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.W_hi, self.W_hf, self.W_ho]",
                    "possible_values": []
                }
            },
            "concat_1311": {
                "variable": {
                    "value": "self.W_x_if",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.W_xi, self.W_xf]",
                    "possible_values": []
                }
            },
            "concat_1312": {
                "variable": {
                    "value": "self.W_h_if",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.W_hi, self.W_hf]",
                    "possible_values": []
                }
            },
            "shape_1394": {
                "variable": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1397": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([n_batches, n_steps, -1])",
                    "possible_values": []
                }
            },
            "tile_1398": {
                "variable": {
                    "value": "c0s",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(self.c0, (1, self.num_units))",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(n_batches, 1)",
                    "possible_values": []
                }
            },
            "transpose_1404": {
                "variable": {
                    "value": "shuffled_input",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "scan_1405": {
                "variable": {
                    "value": "hcs",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.step",
                    "possible_values": []
                },
                "elems": {
                    "value": "shuffled_input",
                    "possible_values": [
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.concat(axis=1, values=[h0s, c0s])",
                    "possible_values": []
                }
            },
            "transpose_1410": {
                "variable": {
                    "value": "shuffled_hcs",
                    "possible_values": []
                },
                "a": {
                    "value": "hcs",
                    "possible_values": [
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=tf.concat(axis=1, values=[h0s, c0s]))",
                            "Call"
                        ],
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=tf.concat(axis=1, values=[h0s, c0s]))",
                            "Call"
                        ],
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=tf.concat(axis=1, values=[h0s, c0s]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "concat_1487": {
                "variable": {
                    "value": "self.W_x_ifco",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.W_xi, self.W_xf, self.W_xc, self.W_xo]",
                    "possible_values": []
                }
            },
            "concat_1488": {
                "variable": {
                    "value": "self.W_h_ifco",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.W_hi, self.W_hf, self.W_hc, self.W_ho]",
                    "possible_values": []
                }
            },
            "split_1514": {
                "variable": {
                    "value": "(x_i, x_f, x_c, x_o)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "possible_values": []
                },
                "value": {
                    "value": "x_ifco",
                    "possible_values": [
                        [
                            "ln(tf.matmul(x, self.W_x_ifco), 'x_ifco')",
                            "Call"
                        ]
                    ]
                }
            },
            "split_1515": {
                "variable": {
                    "value": "(h_i, h_f, h_c, h_o)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "possible_values": []
                },
                "value": {
                    "value": "h_ifco",
                    "possible_values": [
                        [
                            "ln(tf.matmul(hprev, self.W_h_ifco), 'h_ifco')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1540": {
                "variable": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1543": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([n_batches, n_steps, -1])",
                    "possible_values": []
                }
            },
            "tile_1544": {
                "variable": {
                    "value": "h0s",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(self.h0, (1, self.num_units))",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(n_batches, 1)",
                    "possible_values": []
                }
            },
            "tile_1548": {
                "variable": {
                    "value": "c0s",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(self.c0, (1, self.num_units))",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(n_batches, 1)",
                    "possible_values": []
                }
            },
            "transpose_1553": {
                "variable": {
                    "value": "shuffled_input",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "scan_1554": {
                "variable": {
                    "value": "hcs",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.step",
                    "possible_values": []
                },
                "elems": {
                    "value": "shuffled_input",
                    "possible_values": [
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.concat(axis=1, values=[h0s, c0s])",
                    "possible_values": []
                }
            },
            "transpose_1559": {
                "variable": {
                    "value": "shuffled_hcs",
                    "possible_values": []
                },
                "a": {
                    "value": "hcs",
                    "possible_values": [
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=tf.concat(axis=1, values=[h0s, c0s]))",
                            "Call"
                        ],
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=tf.concat(axis=1, values=[h0s, c0s]))",
                            "Call"
                        ],
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=tf.concat(axis=1, values=[h0s, c0s]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "reshape_1582": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([n_batch, -1])",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_1597": {
                "variable": {
                    "value": "lstm",
                    "possible_values": []
                },
                "num_units": {
                    "value": "num_units",
                    "possible_values": []
                },
                "activation": {
                    "value": "hidden_nonlinearity",
                    "possible_values": [
                        [
                            "tf.identity",
                            "Attribute"
                        ],
                        [
                            "tf.identity",
                            "Attribute"
                        ],
                        [
                            "tf.identity",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ],
                        [
                            "tf.tanh",
                            "MethodArgument"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "possible_values": []
                },
                "forget_bias": {
                    "value": "forget_bias",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_1609": {
                "variable": {
                    "value": "input_dummy",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, input_dim)",
                    "possible_values": []
                },
                "name": {
                    "value": "input_dummy",
                    "possible_values": []
                }
            },
            "placeholder_1610": {
                "variable": {
                    "value": "hidden_dummy",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_units)",
                    "possible_values": []
                },
                "name": {
                    "value": "hidden_dummy",
                    "possible_values": []
                }
            },
            "placeholder_1611": {
                "variable": {
                    "value": "cell_dummy",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, num_units)",
                    "possible_values": []
                },
                "name": {
                    "value": "cell_dummy",
                    "possible_values": []
                }
            },
            "shape_1638": {
                "variable": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_1640": {
                "variable": {
                    "value": "h0s",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(self.h0, (1, self.num_units))",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(n_batches, 1)",
                    "possible_values": []
                }
            },
            "tile_1645": {
                "variable": {
                    "value": "c0s",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(self.c0, (1, self.num_units))",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(n_batches, 1)",
                    "possible_values": []
                }
            },
            "concat_294": {
                "axis": {
                    "value": "self.axis",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "[tf.cast(x, common_dtype) for x in inputs]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_initializer_389": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_initializer_430": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reshape_452": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([tf.shape(input)[0], -1])",
                    "possible_values": []
                }
            },
            "zeros_initializer_462": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_initializer_569": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "concat_655": {
                "axis": {
                    "value": "2",
                    "possible_values": []
                },
                "values": {
                    "value": "vals",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_803": {
                "tensor": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(axis=0, values=[pre_shape, tf.stack([to_flatten])])",
                    "possible_values": []
                }
            },
            "reshape_896": {
                "tensor": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack(output_shape)",
                    "possible_values": []
                }
            },
            "transpose_987": {
                "a": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "self.pattern",
                    "possible_values": []
                }
            },
            "zeros_initializer_1029": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "split_1083": {
                "variable": {
                    "value": "(x_r, x_u)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "value": {
                    "value": "x_ru",
                    "possible_values": [
                        [
                            "ln(tf.matmul(x, self.W_x_ru), 'x_ru')",
                            "Call"
                        ]
                    ]
                }
            },
            "split_1084": {
                "variable": {
                    "value": "(h_r, h_u)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "value": {
                    "value": "h_ru",
                    "possible_values": [
                        [
                            "ln(tf.matmul(hprev, self.W_h_ru), 'h_ru')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1094": {
                "variable": {
                    "value": "h_ruc",
                    "possible_values": []
                },
                "a": {
                    "value": "hprev",
                    "possible_values": [
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_h_ruc",
                    "possible_values": []
                }
            },
            "split_1095": {
                "variable": {
                    "value": "(xb_r, xb_u, xb_c)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "possible_values": []
                },
                "value": {
                    "value": "xb_ruc",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.W_x_ruc) + tf.reshape(self.b_ruc, (1, -1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_1096": {
                "variable": {
                    "value": "(h_r, h_u, h_c)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "possible_values": []
                },
                "value": {
                    "value": "h_ruc",
                    "possible_values": [
                        [
                            "tf.matmul(hprev, self.W_h_ruc)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_1118": {
                "variable": {
                    "value": "h0s",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(self.h0, (1, self.num_units))",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(n_batches, 1)",
                    "possible_values": []
                }
            },
            "concat_1204": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(axis=1, values=outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(axis=1, values=outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1208": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([n_batches, n_steps, -1])",
                    "possible_values": []
                }
            },
            "transpose_1210": {
                "variable": {
                    "value": "shuffled_input",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "scan_1212": {
                "variable": {
                    "value": "hs",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.step",
                    "possible_values": []
                },
                "elems": {
                    "value": "shuffled_input",
                    "possible_values": [
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "state",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(self.h0, (1, self.num_units)), (n_batches, 1))",
                            "Call"
                        ],
                        [
                            "(c0s, h0s)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "transpose_1217": {
                "variable": {
                    "value": "shuffled_hs",
                    "possible_values": []
                },
                "a": {
                    "value": "hs",
                    "possible_values": [
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=h0s)",
                            "Call"
                        ],
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=state)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "zeros_initializer_1260": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_initializer_1261": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "split_1344": {
                "variable": {
                    "value": "(x_i, x_f)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "value": {
                    "value": "x_if",
                    "possible_values": [
                        [
                            "ln(tf.matmul(x, self.W_x_if), 'x_if')",
                            "Call"
                        ]
                    ]
                }
            },
            "split_1345": {
                "variable": {
                    "value": "(h_i, h_f)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "value": {
                    "value": "h_if",
                    "possible_values": [
                        [
                            "ln(tf.matmul(o * hprev, self.W_h_if), 'h_if')",
                            "Call"
                        ]
                    ]
                }
            },
            "split_1371": {
                "variable": {
                    "value": "(x_i, x_f, x_o)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "possible_values": []
                },
                "value": {
                    "value": "x_ifo",
                    "possible_values": [
                        [
                            "ln(tf.matmul(x, self.W_x_ifo), 'x_ifo')",
                            "Call"
                        ]
                    ]
                }
            },
            "split_1372": {
                "variable": {
                    "value": "(h_i, h_f, h_o)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "possible_values": []
                },
                "value": {
                    "value": "h_ifo",
                    "possible_values": [
                        [
                            "ln(tf.matmul(hprev, self.W_h_ifo), 'h_ifo')",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_1431": {
                "stddev": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "zeros_initializer_1432": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_initializer_1433": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "concat_1491": {
                "variable": {
                    "value": "self.w_c_ifo",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.w_ci, self.w_cf, self.w_co]",
                    "possible_values": []
                }
            },
            "concat_1530": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, c]",
                    "possible_values": []
                }
            },
            "concat_1635": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, c]",
                    "possible_values": []
                }
            },
            "concat_1656": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(axis=1, values=outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(axis=1, values=outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1660": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([n_batches, n_steps, -1])",
                    "possible_values": []
                }
            },
            "transpose_1662": {
                "variable": {
                    "value": "shuffled_input",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "scan_1664": {
                "variable": {
                    "value": "hcs",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.step",
                    "possible_values": []
                },
                "elems": {
                    "value": "shuffled_input",
                    "possible_values": [
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "tf.transpose(input, (1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.concat(axis=1, values=[h0s, c0s])",
                    "possible_values": []
                }
            },
            "transpose_1669": {
                "variable": {
                    "value": "shuffled_hcs",
                    "possible_values": []
                },
                "a": {
                    "value": "hcs",
                    "possible_values": [
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=tf.concat(axis=1, values=[h0s, c0s]))",
                            "Call"
                        ],
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=tf.concat(axis=1, values=[h0s, c0s]))",
                            "Call"
                        ],
                        [
                            "tf.scan(self.step, elems=shuffled_input, initializer=tf.concat(axis=1, values=[h0s, c0s]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "zeros_initializer_1745": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_initializer_1745": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_initializer_1746": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "moments_1776": {
                "variable": {
                    "value": "(mean, variance)",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "self.axis",
                    "possible_values": []
                },
                "shift": {
                    "value": "self.moving_mean",
                    "possible_values": []
                }
            },
            "batch_normalization_1788": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "self.moving_mean",
                    "possible_values": []
                },
                "variance": {
                    "value": "self.moving_variance",
                    "possible_values": []
                },
                "offset": {
                    "value": "self.beta",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.gamma",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "self.epsilon",
                    "possible_values": []
                }
            },
            "constant_36": {
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.variable_reuse",
                    "possible_values": []
                }
            },
            "placeholder_212": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "self.get_output_shape_for(self.input_shape)",
                            "Call"
                        ],
                        [
                            "self.get_output_shape_for(self.input_shapes)",
                            "Call"
                        ],
                        [
                            "tuple(shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_309": {
                "minval": {
                    "value": "-init_range",
                    "possible_values": []
                },
                "maxval": {
                    "value": "init_range",
                    "possible_values": [
                        [
                            "math.sqrt(6.0 / (n_inputs + n_outputs))",
                            "Call"
                        ],
                        [
                            "math.sqrt(1.0 / n_inputs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_320": {
                "minval": {
                    "value": "-init_range",
                    "possible_values": []
                },
                "maxval": {
                    "value": "init_range",
                    "possible_values": [
                        [
                            "math.sqrt(6.0 / (n_inputs + n_outputs))",
                            "Call"
                        ],
                        [
                            "math.sqrt(1.0 / n_inputs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_369": {
                "initial_value": {
                    "value": "np.zeros(feature_dim, dtype=np.float32)",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_mean'",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Variable_375": {
                "initial_value": {
                    "value": "np.ones(feature_dim, dtype=np.float32)",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_std'",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "exp_651": {
                "x": {
                    "value": "(x - m) / temp",
                    "possible_values": []
                }
            },
            "reduce_sum_652": {
                "input_tensor": {
                    "value": "e",
                    "possible_values": [
                        [
                            "tf.exp((x - m) / temp) + 1e-05",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "possible_values": []
                }
            },
            "expand_dims_653": {
                "input": {
                    "value": "val",
                    "possible_values": [
                        [
                            "tf.reduce_sum(e * lin, [1, 2]) / tf.reduce_sum(e, [1, 2])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "dropout_736": {
                "x": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "retain_prob",
                    "possible_values": [
                        [
                            "1.0 - self.p",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_746": {
                "initial_value": {
                    "value": "noise_std",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "'noise_std_' + name",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "cond_757": {
                "pred": {
                    "value": "self.noise_on_ph",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : noised_input",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : input",
                    "possible_values": []
                }
            },
            "shape_801": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_803": {
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "values": {
                    "value": "[pre_shape, tf.stack([to_flatten])]",
                    "possible_values": []
                }
            },
            "stack_896": {
                "values": {
                    "value": "output_shape",
                    "possible_values": [
                        [
                            "[next((s for s in sizes if s is not None), None) for sizes in zip(*input_shapes)]",
                            "ListComp"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "list(self.shape)",
                            "Call"
                        ],
                        [
                            "list(self.shape)",
                            "Call"
                        ],
                        [
                            "list(input_shape)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sqrt_1011": {
                "x": {
                    "value": "var + EPS",
                    "possible_values": []
                }
            },
            "stack_1114": {
                "values": {
                    "value": "[n_batches, n_steps, -1]",
                    "possible_values": []
                }
            },
            "shape_1149": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1150": {
                "values": {
                    "value": "[n_batch, -1]",
                    "possible_values": []
                }
            },
            "variable_scope_1174": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "zeros_initializer_1185": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reshape_1195": {
                "tensor": {
                    "value": "self.h0",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.num_units)",
                    "possible_values": []
                }
            },
            "concat_1356": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, c]",
                    "possible_values": []
                }
            },
            "concat_1384": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, c]",
                    "possible_values": []
                }
            },
            "stack_1397": {
                "values": {
                    "value": "[n_batches, n_steps, -1]",
                    "possible_values": []
                }
            },
            "reshape_1399": {
                "tensor": {
                    "value": "self.c0",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.num_units)",
                    "possible_values": []
                }
            },
            "matmul_1512": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_x_ifco",
                    "possible_values": []
                }
            },
            "matmul_1513": {
                "a": {
                    "value": "hprev",
                    "possible_values": [
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_h_ifco",
                    "possible_values": []
                }
            },
            "stack_1543": {
                "values": {
                    "value": "[n_batches, n_steps, -1]",
                    "possible_values": []
                }
            },
            "reshape_1545": {
                "tensor": {
                    "value": "self.h0",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.num_units)",
                    "possible_values": []
                }
            },
            "reshape_1549": {
                "tensor": {
                    "value": "self.c0",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.num_units)",
                    "possible_values": []
                }
            },
            "shape_1581": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1582": {
                "values": {
                    "value": "[n_batch, -1]",
                    "possible_values": []
                }
            },
            "variable_scope_1613": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "zeros_initializer_1625": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_initializer_1627": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reshape_1641": {
                "tensor": {
                    "value": "self.h0",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.num_units)",
                    "possible_values": []
                }
            },
            "reshape_1646": {
                "tensor": {
                    "value": "self.c0",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.num_units)",
                    "possible_values": []
                }
            },
            "batch_normalization_1785": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "possible_values": []
                },
                "variance": {
                    "value": "variance",
                    "possible_values": []
                },
                "offset": {
                    "value": "self.beta",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.gamma",
                    "possible_values": []
                },
                "variance_epsilon": {
                    "value": "self.epsilon",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1850": {
                "variable": {
                    "value": "all_outputs[input_layer]",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "[tf.cast(x, common_dtype) for x in inputs]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_210": {
                "variable": {
                    "value": "input_var",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "possible_values": [
                        [
                            "self.get_output_shape_for(self.input_shape)",
                            "Call"
                        ],
                        [
                            "self.get_output_shape_for(self.input_shapes)",
                            "Call"
                        ],
                        [
                            "tuple(shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "cast_293": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "common_dtype",
                    "possible_values": [
                        [
                            "np.core.numerictypes.find_common_type([], dtypes)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_452": {
                "values": {
                    "value": "[tf.shape(input)[0], -1]",
                    "possible_values": []
                }
            },
            "expand_dims_455": {
                "input": {
                    "value": "self.b",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "shape_802": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reverse_925": {
                "tensor": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[self.axis + 1]",
                    "possible_values": []
                }
            },
            "zeros_initializer_1003": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_initializer_1006": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "matmul_1081": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_x_ru",
                    "possible_values": []
                }
            },
            "matmul_1082": {
                "a": {
                    "value": "hprev",
                    "possible_values": [
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_h_ru",
                    "possible_values": []
                }
            },
            "matmul_1085": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_xc",
                    "possible_values": []
                }
            },
            "matmul_1086": {
                "a": {
                    "value": "hprev",
                    "possible_values": [
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_hc",
                    "possible_values": []
                }
            },
            "matmul_1093": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_x_ruc",
                    "possible_values": []
                }
            },
            "reshape_1093": {
                "tensor": {
                    "value": "self.b_ruc",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "possible_values": []
                }
            },
            "reshape_1119": {
                "tensor": {
                    "value": "self.h0",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, self.num_units)",
                    "possible_values": []
                }
            },
            "stack_1208": {
                "values": {
                    "value": "[n_batches, n_steps, -1]",
                    "possible_values": []
                }
            },
            "matmul_1341": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_x_if",
                    "possible_values": []
                }
            },
            "matmul_1342": {
                "a": {
                    "value": "o * hprev",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_h_if",
                    "possible_values": []
                }
            },
            "matmul_1368": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_x_ifo",
                    "possible_values": []
                }
            },
            "matmul_1369": {
                "a": {
                    "value": "hprev",
                    "possible_values": [
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_h_ifo",
                    "possible_values": []
                }
            },
            "concat_1408": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[h0s, c0s]",
                    "possible_values": []
                }
            },
            "concat_1557": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[h0s, c0s]",
                    "possible_values": []
                }
            },
            "stack_1660": {
                "values": {
                    "value": "[n_batches, n_steps, -1]",
                    "possible_values": []
                }
            },
            "control_dependencies_1783": {
                "control_inputs": {
                    "value": "[update_moving_mean, update_moving_variance]",
                    "possible_values": []
                }
            },
            "ones_initializer_174": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "expand_dims_539": {
                "input": {
                    "value": "self.b",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "reshape_541": {
                "tensor": {
                    "value": "self.b",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, 1, self.num_filters)",
                    "possible_values": []
                }
            },
            "shape_756": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_759": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_894": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_1178": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "trainable_variables_1179": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "expand_dims_1203": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(input, self.moving_mean, self.moving_variance, self.beta, self.gamma, self.epsilon)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, variance, self.beta, self.gamma, self.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "global_variables_1617": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "trainable_variables_1618": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "expand_dims_1655": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "tf.nn.batch_normalization(input, self.moving_mean, self.moving_variance, self.beta, self.gamma, self.epsilon)",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(input, mean, variance, self.beta, self.gamma, self.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_1667": {
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "values": {
                    "value": "[h0s, c0s]",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1841": {
                "value": {
                    "value": "expr",
                    "possible_values": []
                }
            },
            "reshape_175": {
                "tensor": {
                    "value": "g",
                    "possible_values": [
                        [
                            "self.add_param_plain(tf.ones_initializer(), (shape[1],), name=name + '_wn/g')",
                            "Call"
                        ],
                        [
                            "self.add_param_plain(tf.ones_initializer(), (shape[3],), name=name + '_wn/g')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "possible_values": []
                }
            },
            "sqrt_175": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(v), 0, keep_dims=True)",
                    "possible_values": []
                }
            },
            "ones_initializer_178": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "shape_406": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_803": {
                "values": {
                    "value": "[to_flatten]",
                    "possible_values": []
                }
            },
            "reduce_sum_175": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "tensor": {
                    "value": "g",
                    "possible_values": [
                        [
                            "self.add_param_plain(tf.ones_initializer(), (shape[1],), name=name + '_wn/g')",
                            "Call"
                        ],
                        [
                            "self.add_param_plain(tf.ones_initializer(), (shape[3],), name=name + '_wn/g')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 1, 1, -1)",
                    "possible_values": []
                }
            },
            "sqrt_179": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(v), [0, 1, 2], keep_dims=True)",
                    "possible_values": []
                }
            },
            "shape_452": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "tf.reshape(input, tf.stack([tf.shape(input)[0], -1]))",
                            "Call"
                        ],
                        [
                            "input / retain_prob",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.stack([n_batches, n_steps, -1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1337": {
                "a": {
                    "value": "hprev",
                    "possible_values": [
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ],
                        [
                            "hcprev[:, :self.num_units]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_ho",
                    "possible_values": []
                }
            },
            "matmul_1338": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_xo",
                    "possible_values": []
                }
            },
            "matmul_1350": {
                "a": {
                    "value": "o * hprev",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_hc",
                    "possible_values": []
                }
            },
            "matmul_1351": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_xc",
                    "possible_values": []
                }
            },
            "matmul_1378": {
                "a": {
                    "value": "o * hprev",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_hc",
                    "possible_values": []
                }
            },
            "matmul_1379": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.stack([n_batch, -1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_xc",
                    "possible_values": []
                }
            },
            "square_175": {
                "x": {
                    "value": "v",
                    "possible_values": [
                        [
                            "param",
                            "Name"
                        ],
                        [
                            "param",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_sum_179": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "square_179": {
                "x": {
                    "value": "v",
                    "possible_values": [
                        [
                            "param",
                            "Name"
                        ],
                        [
                            "param",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "cde/utils/tf_utils/map_inference.py": {
        "tensorflow": {
            "get_default_graph_21": {
                "variable": {
                    "value": "scope",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_sum_46": {
                "variable": {
                    "value": "reg_penalty",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses(scope=self.scope)",
                    "possible_values": []
                }
            },
            "gradients_49": {
                "variable": {
                    "value": "grads",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "-p_log_prob + reg_penalty",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "self.scale.get(z, 1.0) * z_copy.log_prob(dict_swap[z])",
                    "possible_values": []
                }
            },
            "get_regularization_losses_46": {
                "scope": {
                    "value": "self.scope",
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "input_tensor": {
                    "value": "self.scale.get(x, 1.0) * x_copy.log_prob(dict_swap[x])",
                    "possible_values": []
                }
            }
        }
    },
    "cde/utils/tf_utils/network.py": {
        "tensorflow": {
            "zeros_initializer_16": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_initializer_17": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "concat_317": {
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "values": {
                    "value": "[self._hid_init_param, self._cell_init_param]",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "name",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "tensor": {
                    "value": "flat_output",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack((tf.shape(l_input)[0], tf.shape(l_input)[1], -1))",
                    "possible_values": []
                }
            },
            "reshape_232": {
                "tensor": {
                    "value": "flat_output",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.stack((tf.shape(l_input)[0], tf.shape(l_input)[1], -1))",
                    "possible_values": []
                }
            },
            "stack_120": {
                "values": {
                    "value": "(tf.shape(l_input)[0], tf.shape(l_input)[1], -1)",
                    "possible_values": []
                }
            },
            "stack_232": {
                "values": {
                    "value": "(tf.shape(l_input)[0], tf.shape(l_input)[1], -1)",
                    "possible_values": []
                }
            },
            "shape_120": {
                "input": {
                    "value": "l_input",
                    "possible_values": []
                }
            },
            "shape_232": {
                "input": {
                    "value": "l_input",
                    "possible_values": []
                }
            }
        }
    },
    "cde/utils/tf_utils/parameterized.py": {
        "tensorflow": {
            "get_default_session_60": {
                "variable": {
                    "value": "param_values",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "run_60": {
                "variable": {
                    "value": "param_values",
                    "possible_values": []
                },
                "main": {
                    "value": "params",
                    "possible_values": [
                        [
                            "self._get_params(**tags)",
                            "Call"
                        ],
                        [
                            "self._get_params(**tags)",
                            "Call"
                        ],
                        [
                            "self._get_params(**tags)",
                            "Call"
                        ],
                        [
                            "[param for comp in self.components for param in comp.get_params_internal(**tags)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_default_session_46": {
                "variable": {
                    "value": "param_values",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "run_46": {
                "variable": {
                    "value": "param_values",
                    "possible_values": []
                },
                "main": {
                    "value": "params",
                    "possible_values": [
                        [
                            "self._get_params(**tags)",
                            "Call"
                        ],
                        [
                            "self._get_params(**tags)",
                            "Call"
                        ],
                        [
                            "self._get_params(**tags)",
                            "Call"
                        ],
                        [
                            "[param for comp in self.components for param in comp.get_params_internal(**tags)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_default_session_54": {
                "variable": {
                    "value": "param_values",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "run_54": {
                "variable": {
                    "value": "param_values",
                    "possible_values": []
                },
                "main": {
                    "value": "params",
                    "possible_values": [
                        [
                            "self._get_params(**tags)",
                            "Call"
                        ],
                        [
                            "self._get_params(**tags)",
                            "Call"
                        ],
                        [
                            "self._get_params(**tags)",
                            "Call"
                        ],
                        [
                            "[param for comp in self.components for param in comp.get_params_internal(**tags)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_default_session_82": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "run_82": {
                "main": {
                    "value": "ops",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "feed_dict": {
                    "value": "feed_dict",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "assign_placeholder",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype.base_dtype",
                    "possible_values": []
                }
            },
            "assign_75": {
                "variable": {
                    "value": "assign_op",
                    "possible_values": []
                },
                "ref": {
                    "value": "param",
                    "possible_values": []
                },
                "value": {
                    "value": "assign_placeholder",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=param.dtype.base_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_session_98": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "run_98": {
                "main": {
                    "value": "tf.variables_initializer(self._get_params())",
                    "possible_values": []
                }
            },
            "variables_initializer_98": {
                "var_list": {
                    "value": "self._get_params()",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unittests_configrunner.py": {
        "tensorflow": {
            "Session_58": {
                "graph": {
                    "value": "tf.Graph()",
                    "possible_values": []
                }
            },
            "Graph_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unittests_estimators.py": {
        "tensorflow": {
            "reset_default_graph_312": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reset_default_graph_329": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_305": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_313": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_322": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_330": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_349": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_372": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_389": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_412": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_428": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_449": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_474": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_153": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_175": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_620": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_634": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unittests_evaluations.py": {
        "tensorflow": {
            "set_random_seed_115": {
                "seed": {
                    "value": "24",
                    "possible_values": []
                }
            },
            "set_random_seed_186": {
                "seed": {
                    "value": "24",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unittests_normalizing_flows.py": {
        "tensorflow": {
            "constant_19": {
                "variable": {
                    "value": "u",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-2.0], [1.0], [10.0], [2.0]]",
                    "possible_values": []
                }
            },
            "constant_20": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "value": {
                    "value": "[[80.0], [-1.0], [1.0], [1.0]]",
                    "possible_values": []
                }
            },
            "Normal_28": {
                "variable": {
                    "value": "base_dist",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "Normal_30": {
                "variable": {
                    "value": "transf_dist",
                    "possible_values": []
                },
                "loc": {
                    "value": "3.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "pdf_estimate",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_dist.prob(samples)",
                    "possible_values": []
                }
            },
            "Normal_314": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "Normal_335": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "reset_default_graph_495": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_18": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_89": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_108": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_120": {
                "variable": {
                    "value": "params",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, flow_class.get_param_size(event_dims))",
                    "possible_values": []
                }
            },
            "Session_307": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_328": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_349": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_375": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_396": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_411": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_432": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_452": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_489": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_496": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "constant_32": {
                "value": {
                    "value": "[[0.0, 3.0]]",
                    "possible_values": []
                }
            },
            "Normal_116": {
                "variable": {
                    "value": "base_dist",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "Categorical_309": {
                "probs": {
                    "value": "[0.5, 0.5]",
                    "possible_values": []
                }
            },
            "Categorical_330": {
                "probs": {
                    "value": "[0.5, 0.5]",
                    "possible_values": []
                }
            },
            "Categorical_351": {
                "probs": {
                    "value": "[0.3, 0.4, 0.3]",
                    "possible_values": []
                }
            },
            "Categorical_413": {
                "probs": {
                    "value": "[0.5, 0.5]",
                    "possible_values": []
                }
            },
            "Categorical_434": {
                "probs": {
                    "value": "[0.5, 0.5]",
                    "possible_values": []
                }
            },
            "Categorical_454": {
                "probs": {
                    "value": "[0.5, 0.5]",
                    "possible_values": []
                }
            },
            "Normal_311": {
                "loc": {
                    "value": "-0.4",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.4",
                    "possible_values": []
                }
            },
            "Normal_312": {
                "loc": {
                    "value": "+0.4",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.4",
                    "possible_values": []
                }
            },
            "Normal_332": {
                "loc": {
                    "value": "-0.5",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.4",
                    "possible_values": []
                }
            },
            "Normal_333": {
                "loc": {
                    "value": "+0.5",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.4",
                    "possible_values": []
                }
            },
            "Normal_353": {
                "loc": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.4",
                    "possible_values": []
                }
            },
            "Normal_354": {
                "loc": {
                    "value": "0.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.4",
                    "possible_values": []
                }
            },
            "Normal_355": {
                "loc": {
                    "value": "+1.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.4",
                    "possible_values": []
                }
            },
            "Normal_415": {
                "loc": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Normal_416": {
                "loc": {
                    "value": "+1.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Normal_436": {
                "loc": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Normal_437": {
                "loc": {
                    "value": "+1.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Normal_456": {
                "loc": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "Normal_457": {
                "loc": {
                    "value": "+1.0",
                    "possible_values": []
                },
                "scale": {
                    "value": "0.5",
                    "possible_values": []
                }
            }
        }
    },
    "tests/unittests_utils.py": {
        "tensorflow": {}
    }
}