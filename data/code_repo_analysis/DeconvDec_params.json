{
    "deconvolution/lr_scheduler.py": {
        "torch": {}
    },
    "deconvolution/models/attention.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_15": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_22": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gamma_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_in(h).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "self.linear_in(x).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_22": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_24": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.linear_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.linear_in_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.linear_out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_41": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.linear_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.linear_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.linear_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_82": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_83": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_93": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_feature * pool_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_51": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gamma_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convs",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gamma_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_in(h).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "self.linear_in(x).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_53": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gamma_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convs",
                            "variable"
                        ]
                    ]
                }
            },
            "bmm_59": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "gamma_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_in(h).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "h",
                            "variable"
                        ],
                        [
                            "self.linear_in(x).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_59": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_61": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_64": {
                "variable": {
                    "value": "weights_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convs",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gamma_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_in_conv(x).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "weights_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_66": {
                "variable": {
                    "value": "c_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights_conv.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_66": {
                "variable": {
                    "value": "c_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "[c_t, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SELU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SELU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_37": {
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_38": {
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SELU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "3 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SELU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "p": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "[c_t, h, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SELU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_14": {
                "p": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "[gamma_h.transpose(1, 2), c_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "[c_t, h, c_conv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deconvolution/models/beam.py": {
        "torch": {
            "stack_163": {
                "tensors": {
                    "value": "attn[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "deconvolution/models/optims.py": {
        "torch": {
            "SGD_10": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_12": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__34": {
                "parameters": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_14": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_16": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deconvolution/models/rnn.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.a_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.b_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_31": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "config.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.tgt_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_170": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.deconv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose1d(config.hidden_size, config.hidden_size, kernel_size=2, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.deconv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose1d(config.hidden_size, config.hidden_size, kernel_size=3, stride=2, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.deconv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose1d(config.hidden_size, config.hidden_size, kernel_size=4, stride=3, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_216": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_218": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_239": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_240": {
                "variable": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(c_1)",
                            "Call"
                        ],
                        [
                            "c_1 + [c_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_250": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_267": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_63": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "config.enc_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "config.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_69": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "config.enc_num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "config.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_15": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_51": {
                "num_embeddings": {
                    "value": "config.src_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_107": {
                "num_embeddings": {
                    "value": "config.tgt_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_158": {
                "num_embeddings": {
                    "value": "config.tgt_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_174": {
                "in_channels": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_175": {
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_176": {
                "in_channels": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_177": {
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_178": {
                "in_channels": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_179": {
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.tensor(self.embedding.weight.t(), requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "data": {
                    "value": "self.embedding.weight.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_222": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.emb_size",
                            "Attribute"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_254": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.emb_size",
                            "Attribute"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "deconvolution/models/seq2seq.py": {
        "torch": {
            "LogSoftmax_24": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_27": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "utils.PAD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_31": {
                "variable": {
                    "value": "self.l1loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "tar_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tar_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.embedding(tar)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tar_emb, requires_grad=False).detach()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_83": {
                "variable": {
                    "value": "(lengths, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_len",
                            "Method Argument"
                        ],
                        [
                            "src_len",
                            "Method Argument"
                        ],
                        [
                            "src_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_84": {
                "variable": {
                    "value": "(_, reverse_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(src_len, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(src_len, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_85": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(src, dim=0, index=indices)",
                            "Call"
                        ],
                        [
                            "src.t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(src, dim=0, index=indices)",
                            "Call"
                        ],
                        [
                            "src.t()",
                            "Call"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(src_len, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(src_len, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_87": {
                "variable": {
                    "value": "bos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [predicted]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_110": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [predicted]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "reverse_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_110": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_126": {
                "variable": {
                    "value": "(lengths, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src_len",
                            "Method Argument"
                        ],
                        [
                            "src_len",
                            "Method Argument"
                        ],
                        [
                            "src_len",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_127": {
                "variable": {
                    "value": "(_, ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(src_len, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(src_len, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_128": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(src, dim=0, index=indices)",
                            "Call"
                        ],
                        [
                            "src.t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(src, dim=0, index=indices)",
                            "Call"
                        ],
                        [
                            "src.t()",
                            "Call"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(src_len, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(src_len, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_58": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [predicted]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_69": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [predicted]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_113": {
                "variable": {
                    "value": "attn_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attn_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "attn_matrix + [attn_weights]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(attn_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_116": {
                "variable": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attn_matrix.max(2)[1]",
                            "Subscript"
                        ],
                        [
                            "torch.index_select(alignments, dim=1, index=reverse_indices).t()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "reverse_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_116": {
                "variable": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_180": {
                "tensors": {
                    "value": "[b.getCurrentState() for b in beam]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deconvolution/optims.py": {
        "torch": {
            "SGD_11": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_13": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_15": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_17": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deconvolution/train.py": {
        "torch": {
            "manual_seed_29": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.BiDataset(data['train'], char=config.char)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "validloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.BiDataset(data['test'], char=config.char)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "valid_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.valid_batch_size",
                            "Attribute"
                        ],
                        [
                            "config.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_36": {
                "device": {
                    "value": "opt.gpus[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_132": {
                "variable": {
                    "value": "(lengths, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainloader",
                            "variable"
                        ],
                        [
                            "src_len.cuda()",
                            "Call"
                        ],
                        [
                            "validloader",
                            "variable"
                        ],
                        [
                            "src_len.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_133": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainloader",
                            "variable"
                        ],
                        [
                            "src.cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(src, dim=0, index=indices)",
                            "Call"
                        ],
                        [
                            "validloader",
                            "variable"
                        ],
                        [
                            "src.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(src_len, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_134": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainloader",
                            "variable"
                        ],
                        [
                            "tgt.cuda()",
                            "Call"
                        ],
                        [
                            "torch.index_select(tgt, dim=0, index=indices)",
                            "Call"
                        ],
                        [
                            "validloader",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(src_len, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_264": {
                "obj": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'config': config, 'optim': optim, 'updates': updates}",
                            "Dict"
                        ],
                        [
                            "torch.load(opt.restore)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "checkpoints",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ],
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_301": {
                "variable": {
                    "value": "checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.restore",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_86": {
                "f": {
                    "value": "opt.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_154": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(src, lengths, dec, targets)",
                            "Call"
                        ],
                        [
                            "model(src, lengths, dec, targets, teacher_ratio=0.9 ** e)",
                            "Call"
                        ],
                        [
                            "model(src, lengths, dec, targets)",
                            "Call"
                        ],
                        [
                            "torch.sum(loss) / num_total",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deconvolution/utils/data_helper.py": {
        "torch": {
            "zeros_84": {
                "variable": {
                    "value": "src_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(src)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(src_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "variable": {
                    "value": "tgt_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tgt)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(tgt_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "src_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(src)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(src_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "tgt_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tgt)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(tgt_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "ae_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(src)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(ae_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "src_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(split_src)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(src_len)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "tgt_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(split_tgt)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(tgt_len)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "deconvolution/utils/dict_helper.py": {
        "torch": {
            "tensor_105": {
                "variable": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.frequencies[i] for i in range(len(self.frequencies))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sort_107": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([self.frequencies[i] for i in range(len(self.frequencies))])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}