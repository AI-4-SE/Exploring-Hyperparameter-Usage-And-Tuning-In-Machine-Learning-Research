{
    "deepctr_torch/models/basemodel.py": {
        "sklearn": {},
        "torch": {
            "ModuleDict_82": {
                "variable": {
                    "value": "embedding_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "{feat.embedding_name: nn.Embedding(feat.dimension, embedding_size, sparse=sparse) for feat in sparse_feature_columns}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "TensorDataset_182": {
                "variable": {
                    "value": "train_tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(np.concatenate(x, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_188": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_tensor_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(torch.from_numpy(np.concatenate(x, axis=-1)), torch.from_numpy(y))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorDataset_295": {
                "variable": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(np.concatenate(x, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_297": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tensor_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Data.TensorDataset(torch.from_numpy(np.concatenate(x, axis=-1)))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleDict_346": {
                "variable": {
                    "value": "embedding_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "{feat.embedding_name: nn.Embedding(feat.dimension, embedding_size, sparse=sparse) for feat in sparse_feature_columns}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(sum((fc.dimension for fc in self.dense_feature_columns)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "linear_sparse_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sparse_embedding_list, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "linear_dense_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dense_value_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[X[:, self.feature_index[feat.name][0]:self.feature_index[feat.name][1]] for feat in self.dense_feature_columns]",
                            "ListComp"
                        ],
                        [
                            "[X[:, self.feature_index[feat.name][0]:self.feature_index[feat.name][1]] for feat in dense_feature_columns]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "linear_dense_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EmbeddingBag_352": {
                "variable": {
                    "value": "embedding_dict[feat.embedding_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "feat.dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "feat.combiner",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "linear_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sparse_embedding_list, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "ndarray": {
                    "value": "np.concatenate(x, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_train.to(self.device).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_296": {
                "ndarray": {
                    "value": "np.concatenate(x, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_398": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "sparse_embedding_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.embedding_dict[feat.embedding_name](X[:, self.feature_index[feat.name][0]:self.feature_index[feat.name][1]].long()) for feat in self.sparse_feature_columns]",
                            "ListComp"
                        ],
                        [
                            "[embedding_dict[feat.embedding_name](X[:, self.feature_index[feat.name][0]:self.feature_index[feat.name][1]].long()) for feat in sparse_feature_columns]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "linear_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dense_value_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[X[:, self.feature_index[feat.name][0]:self.feature_index[feat.name][1]] for feat in self.dense_feature_columns]",
                            "ListComp"
                        ],
                        [
                            "[X[:, self.feature_index[feat.name][0]:self.feature_index[feat.name][1]] for feat in dense_feature_columns]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "variable": {
                    "value": "linear_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "linear_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[X.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_83": {
                "num_embeddings": {
                    "value": "feat.dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_347": {
                "num_embeddings": {
                    "value": "feat.dimension",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "sparse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_400": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "sparse_embedding_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.embedding_dict[feat.embedding_name](X[:, self.feature_index[feat.name][0]:self.feature_index[feat.name][1]].long()) for feat in self.sparse_feature_columns]",
                            "ListComp"
                        ],
                        [
                            "[embedding_dict[feat.embedding_name](X[:, self.feature_index[feat.name][0]:self.feature_index[feat.name][1]].long()) for feat in sparse_feature_columns]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adagrad_402": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RMSprop_404": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/run_classification_criteo.py": {
        "sklearn": {
            "MinMaxScaler_25": {
                "variable": {
                    "value": "mms",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "train_test_split_43": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2020",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LabelEncoder_23": {
                "variable": {
                    "value": "lbe",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_loss_67": {
                "y_true": {
                    "value": "test[target].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_ans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict(test_model_input, 256)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_68": {
                "y_true": {
                    "value": "test[target].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred_ans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict(test_model_input, 256)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/run_multivalue_movielens.py": {
        "sklearn": {
            "LabelEncoder_28": {
                "variable": {
                    "value": "lbe",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "pad_sequences_37": {
                "variable": {
                    "value": "genres_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "genres_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(map(split, data['genres'].values))",
                            "Call"
                        ],
                        [
                            "pad_sequences(genres_list, maxlen=max_len, padding='post')",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max(genres_length)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/run_regression_movielens.py": {
        "sklearn": {
            "train_test_split_29": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LabelEncoder_19": {
                "variable": {
                    "value": "lbe",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_squared_error_46": {
                "y_true": {
                    "value": "test[target].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_ans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.predict(test_model_input, batch_size=256)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/callbacks.py": {
        "tensorflow": {},
        "torch": {
            "save_71": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filepath.format(epoch=epoch + 1, **logs)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_73": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filepath.format(epoch=epoch + 1, **logs)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_59": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filepath.format(epoch=epoch + 1, **logs)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_61": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filepath.format(epoch=epoch + 1, **logs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "deepctr_torch/inputs.py": {
        "torch": {
            "flatten_85": {
                "variable": {
                    "value": "sparse_dnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sparse_embedding_list, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_87": {
                "variable": {
                    "value": "dense_dnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(dense_value_list, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "tensors": {
                    "value": "sparse_embedding_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "dense_value_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_91": {
                "input": {
                    "value": "torch.cat(sparse_embedding_list, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "sparse_embedding_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_93": {
                "input": {
                    "value": "torch.cat(dense_value_list, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_93": {
                "tensors": {
                    "value": "dense_value_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/layers/activation.py": {
        "torch": {
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_25": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((emb_size,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((emb_size, 1)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.transpose(x, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.alpha * (1 - x_p) * x + x_p * x",
                            "BinOp"
                        ],
                        [
                            "self.alpha * (1 - x_p) * x + x_p * x",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(out, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_70": {
                "variable": {
                    "value": "act_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "(emb_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "(emb_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "act_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_79": {
                "variable": {
                    "value": "act_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/layers/core.py": {
        "torch": {
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(hidden_units[i], hidden_units[i + 1]) for i in range(len(hidden_units) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "conv2d_121": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm1d(hidden_units[i + 1]) for i in range(len(hidden_units) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((1,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_97": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X",
                            "Name"
                        ],
                        [
                            "output + self.bias",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_120": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "hidden_units[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_units[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm1d_51": {
                "num_features": {
                    "value": "hidden_units[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/layers/interaction.py": {
        "torch": {
            "pow_29": {
                "variable": {
                    "value": "square_of_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(fm_input, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_30": {
                "variable": {
                    "value": "sum_of_square",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fm_input * fm_input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_56": {
                "variable": {
                    "value": "square_of_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(concated_embeds_value, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "sum_of_square",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concated_embeds_value * concated_embeds_value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.excitation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.filed_size, self.reduction_size, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.split(inputs, 1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "mul_99": {
                "variable": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.split(inputs, 1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(A, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_143": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.split(inputs, 1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_188": {
                "variable": {
                    "value": "self.conv1ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_245": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(final_result, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(result, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.normalized_att_scores, values)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(result, 1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(result, dim=0)",
                            "Call"
                        ],
                        [
                            "result + torch.tensordot(inputs, self.W_Res, dims=([-1], [0]))",
                            "BinOp"
                        ],
                        [
                            "F.relu(result)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_278": {
                "variable": {
                    "value": "self.attention_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, self.attention_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_281": {
                "variable": {
                    "value": "self.attention_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.attention_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_283": {
                "variable": {
                    "value": "self.projection_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.attention_factor, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_286": {
                "variable": {
                    "value": "self.projection_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_294": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_307": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "row",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "col",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_312": {
                "variable": {
                    "value": "attention_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensordot(bi_interaction, self.attention_W, dims=([-1], [0])) + self.attention_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_315": {
                "variable": {
                    "value": "self.normalized_att_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensordot(attention_temp, self.projection_h, dims=([-1], [0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_317": {
                "variable": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.normalized_att_score * bi_interaction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_322": {
                "variable": {
                    "value": "afm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.normalized_att_score * bi_interaction, dim=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_output)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.projection_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_354": {
                "variable": {
                    "value": "self.W_Query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, self.att_embedding_size * self.head_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_357": {
                "variable": {
                    "value": "self.W_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, self.att_embedding_size * self.head_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_360": {
                "variable": {
                    "value": "self.W_Value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, self.att_embedding_size * self.head_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensordot_377": {
                "variable": {
                    "value": "querys",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.split(inputs, 1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_Query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_379": {
                "variable": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.split(inputs, 1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_380": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.split(inputs, 1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_Value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_384": {
                "variable": {
                    "value": "querys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(querys, self.att_embedding_size, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_386": {
                "variable": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(keys, self.att_embedding_size, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_387": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(values, self.att_embedding_size, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_389": {
                "variable": {
                    "value": "inner_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnik,bnjk->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "querys",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensordot(inputs, self.W_Query, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(querys, self.att_embedding_size, dim=2))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_392": {
                "variable": {
                    "value": "self.normalized_att_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "inner_product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p * q",
                            "BinOp"
                        ],
                        [
                            "torch.einsum('bnik,bnjk->bnij', querys, keys)",
                            "Call"
                        ],
                        [
                            "p * q",
                            "BinOp"
                        ],
                        [
                            "torch.sum(inner_product, dim=2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_394": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.normalized_att_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensordot(inputs, self.W_Value, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(values, self.att_embedding_size, dim=2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_397": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(result, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_398": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(final_result, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(result, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.normalized_att_scores, values)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(result, 1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(result, dim=0)",
                            "Call"
                        ],
                        [
                            "result + torch.tensordot(inputs, self.W_Res, dims=([-1], [0]))",
                            "BinOp"
                        ],
                        [
                            "F.relu(result)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_401": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(final_result, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(result, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.normalized_att_scores, values)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(result, 1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(result, dim=0)",
                            "Call"
                        ],
                        [
                            "result + torch.tensordot(inputs, self.W_Res, dims=([-1], [0]))",
                            "BinOp"
                        ],
                        [
                            "F.relu(result)",
                            "Call"
                        ]
                    ]
                }
            },
            "ParameterList_440": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(nn.init.zeros_(torch.empty(in_features, 1))) for i in range(self.layer_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "squeeze_460": {
                "variable": {
                    "value": "x_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_0",
                            "Name"
                        ],
                        [
                            "torch.squeeze(x_l, dim=2)",
                            "Call"
                        ],
                        [
                            "dot_ + self.bias[i]",
                            "BinOp"
                        ],
                        [
                            "dot_ + x_l",
                            "BinOp"
                        ],
                        [
                            "x_0",
                            "Name"
                        ],
                        [
                            "x_l.squeeze()",
                            "Call"
                        ],
                        [
                            "moe_out + x_l",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ParameterList_488": {
                "variable": {
                    "value": "self.U_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(nn.init.xavier_normal_(torch.empty(num_experts, in_features, low_rank))) for i in range(self.layer_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_491": {
                "variable": {
                    "value": "self.V_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(nn.init.xavier_normal_(torch.empty(num_experts, in_features, low_rank))) for i in range(self.layer_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_494": {
                "variable": {
                    "value": "self.C_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(nn.init.xavier_normal_(torch.empty(num_experts, low_rank, low_rank))) for i in range(self.layer_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_496": {
                "variable": {
                    "value": "self.gating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_features, 1, bias=False) for i in range(self.num_experts)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_498": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(nn.init.zeros_(torch.empty(in_features, 1))) for i in range(self.layer_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_571": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_list[idx] for idx in row]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_573": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_list[idx] for idx in col]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_628": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_list[idx] for idx in row]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_630": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed_list[idx] for idx in col]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_715": {
                "variable": {
                    "value": "self.conv_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Name"
                        ],
                        [
                            "in_features",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Name"
                        ],
                        [
                            "in_features",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.mul(self.bilinear(v_i), v_j) for (v_i, v_j) in itertools.combinations(inputs, 2)]",
                            "ListComp"
                        ],
                        [
                            "[torch.mul(self.bilinear[i](inputs[i]), inputs[j]) for (i, j) in itertools.combinations(range(len(inputs)), 2)]",
                            "ListComp"
                        ],
                        [
                            "[torch.mul(bilinear(v[0]), v[1]) for (v, bilinear) in zip(itertools.combinations(inputs, 2), self.bilinear)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(row, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([embed_list[idx] for idx in row], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([embed_list[idx] for idx in row], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_217": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhd,bmd->bhmd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_nn_layers[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_364": {
                "variable": {
                    "value": "self.W_Res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embedding_size, self.att_embedding_size * self.head_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ParameterList_431": {
                "variable": {
                    "value": "self.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(nn.init.xavier_normal_(torch.empty(in_features, 1))) for i in range(self.layer_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_531": {
                "variable": {
                    "value": "output_of_experts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_of_experts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output_of_experts, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_532": {
                "variable": {
                    "value": "gating_score_of_experts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gating_score_of_experts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(gating_score_of_experts, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_533": {
                "variable": {
                    "value": "moe_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_of_experts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output_of_experts, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "gating_score_of_experts.softmax(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_578": {
                "variable": {
                    "value": "inner_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inner_product",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p * q",
                            "BinOp"
                        ],
                        [
                            "torch.einsum('bnik,bnjk->bnij', querys, keys)",
                            "Call"
                        ],
                        [
                            "p * q",
                            "BinOp"
                        ],
                        [
                            "torch.sum(inner_product, dim=2, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_607": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_size, num_pairs, embed_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_637": {
                "variable": {
                    "value": "kp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(torch.transpose(torch.sum(torch.mul(p, self.kernel), dim=-1), 2, 1), q)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_667": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_671": {
                "variable": {
                    "value": "kp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p * q * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "fm_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_32": {
                "input": {
                    "value": "cross_term",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "square_of_sum - sum_of_square",
                            "BinOp"
                        ],
                        [
                            "0.5 * torch.sum(cross_term, dim=2, keepdim=False)",
                            "BinOp"
                        ],
                        [
                            "0.5 * (square_of_sum - sum_of_square)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "concated_embeds_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "self.filed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.reduction_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "self.reduction_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.filed_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_99": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.excitation(Z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_315": {
                "a": {
                    "value": "attention_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(torch.tensordot(bi_interaction, self.attention_W, dims=([-1], [0])) + self.attention_b)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.projection_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_384": {
                "tensor": {
                    "value": "querys",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensordot(inputs, self.W_Query, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(querys, self.att_embedding_size, dim=2))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.att_embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_386": {
                "tensor": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensordot(inputs, self.W_key, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(keys, self.att_embedding_size, dim=2))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.att_embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_387": {
                "tensor": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensordot(inputs, self.W_Value, dims=([-1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.stack(torch.split(values, self.att_embedding_size, dim=2))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.att_embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_397": {
                "tensor": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(final_result, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(result, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.normalized_att_scores, values)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(result, 1), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(result, dim=0)",
                            "Call"
                        ],
                        [
                            "result + torch.tensordot(inputs, self.W_Res, dims=([-1], [0]))",
                            "BinOp"
                        ],
                        [
                            "F.relu(result)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_400": {
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.split(inputs, 1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_Res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ParameterList_435": {
                "variable": {
                    "value": "self.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(nn.init.xavier_normal_(torch.empty(in_features, in_features))) for i in range(self.layer_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensordot_449": {
                "variable": {
                    "value": "xl_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_0",
                            "Name"
                        ],
                        [
                            "torch.squeeze(x_l, dim=2)",
                            "Call"
                        ],
                        [
                            "dot_ + self.bias[i]",
                            "BinOp"
                        ],
                        [
                            "dot_ + x_l",
                            "BinOp"
                        ],
                        [
                            "x_0",
                            "Name"
                        ],
                        [
                            "x_l.squeeze()",
                            "Call"
                        ],
                        [
                            "moe_out + x_l",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "([1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_450": {
                "variable": {
                    "value": "dot_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "inputs.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "xl_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensordot(x_l, self.kernels[i], dims=([1], [0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_515": {
                "variable": {
                    "value": "v_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.V_list[i][expert_id].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_0",
                            "Name"
                        ],
                        [
                            "torch.squeeze(x_l, dim=2)",
                            "Call"
                        ],
                        [
                            "dot_ + self.bias[i]",
                            "BinOp"
                        ],
                        [
                            "dot_ + x_l",
                            "BinOp"
                        ],
                        [
                            "x_0",
                            "Name"
                        ],
                        [
                            "x_l.squeeze()",
                            "Call"
                        ],
                        [
                            "moe_out + x_l",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_518": {
                "variable": {
                    "value": "v_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.V_list[i][expert_id].t(), x_l)",
                            "Call"
                        ],
                        [
                            "torch.tanh(v_x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.C_list[i][expert_id], v_x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(v_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_519": {
                "variable": {
                    "value": "v_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.C_list[i][expert_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "v_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.V_list[i][expert_id].t(), x_l)",
                            "Call"
                        ],
                        [
                            "torch.tanh(v_x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.C_list[i][expert_id], v_x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(v_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_520": {
                "variable": {
                    "value": "v_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.V_list[i][expert_id].t(), x_l)",
                            "Call"
                        ],
                        [
                            "torch.tanh(v_x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.C_list[i][expert_id], v_x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(v_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_523": {
                "variable": {
                    "value": "uv_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.U_list[i][expert_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "v_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.V_list[i][expert_id].t(), x_l)",
                            "Call"
                        ],
                        [
                            "torch.tanh(v_x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.C_list[i][expert_id], v_x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(v_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_611": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_pairs, embed_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_145": {
                "input": {
                    "value": "self.bilinear(v_i)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "v_j",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_191": {
                "in_channels": {
                    "value": "self.field_nums[-1] * self.field_nums[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_232": {
                "variable": {
                    "value": "(next_hidden, direct_connect)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "curr_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "2 * [size // 2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_312": {
                "a": {
                    "value": "bi_interaction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inner_product",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "self.attention_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "([-1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_441": {
                "data": {
                    "value": "nn.init.zeros_(torch.empty(in_features, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_453": {
                "variable": {
                    "value": "dot_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kernels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x_l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_0",
                            "Name"
                        ],
                        [
                            "torch.squeeze(x_l, dim=2)",
                            "Call"
                        ],
                        [
                            "dot_ + self.bias[i]",
                            "BinOp"
                        ],
                        [
                            "dot_ + x_l",
                            "BinOp"
                        ],
                        [
                            "x_0",
                            "Name"
                        ],
                        [
                            "x_l.squeeze()",
                            "Call"
                        ],
                        [
                            "moe_out + x_l",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_488": {
                "data": {
                    "value": "nn.init.xavier_normal_(torch.empty(num_experts, in_features, low_rank))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_491": {
                "data": {
                    "value": "nn.init.xavier_normal_(torch.empty(num_experts, in_features, low_rank))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_494": {
                "data": {
                    "value": "nn.init.xavier_normal_(torch.empty(num_experts, low_rank, low_rank))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_496": {
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_498": {
                "data": {
                    "value": "nn.init.zeros_(torch.empty(in_features, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_614": {
                "variable": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_pairs, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_641": {
                "input": {
                    "value": "torch.transpose(torch.sum(torch.mul(p, self.kernel), dim=-1), 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(col, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([embed_list[idx] for idx in col], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([embed_list[idx] for idx in col], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_710": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_148": {
                "input": {
                    "value": "self.bilinear[i](inputs[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "inputs[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_432": {
                "data": {
                    "value": "nn.init.xavier_normal_(torch.empty(in_features, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_645": {
                "input": {
                    "value": "torch.sum(torch.mul(p, self.kernel), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Name"
                        ],
                        [
                            "in_features",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Name"
                        ],
                        [
                            "in_features",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_151": {
                "input": {
                    "value": "bilinear(v[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "v[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_435": {
                "data": {
                    "value": "nn.init.xavier_normal_(torch.empty(in_features, in_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_441": {
                "*size": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_489": {
                "*size": {
                    "value": "num_experts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "low_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_492": {
                "*size": {
                    "value": "num_experts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "low_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_495": {
                "*size": {
                    "value": "num_experts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "low_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "low_rank",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_499": {
                "*size": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_649": {
                "input": {
                    "value": "torch.mul(p, self.kernel)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "in_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Name"
                        ],
                        [
                            "in_features",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Name"
                        ],
                        [
                            "in_features",
                            "Name"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_432": {
                "*size": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_653": {
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.mul(self.bilinear(v_i), v_j) for (v_i, v_j) in itertools.combinations(inputs, 2)]",
                            "ListComp"
                        ],
                        [
                            "[torch.mul(self.bilinear[i](inputs[i]), inputs[j]) for (i, j) in itertools.combinations(range(len(inputs)), 2)]",
                            "ListComp"
                        ],
                        [
                            "[torch.mul(bilinear(v[0]), v[1]) for (v, bilinear) in zip(itertools.combinations(inputs, 2), self.bilinear)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(row, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([embed_list[idx] for idx in row], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([embed_list[idx] for idx in row], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_436": {
                "*size": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/layers/sequence.py": {
        "torch": {
            "topk_36": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.axis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/layers/utils.py": {
        "torch": {
            "cat_16": {
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "deepctr_torch/models/afm.py": {
        "torch": {
            "cat_61": {
                "tensors": {
                    "value": "sparse_embedding_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/models/autoint.py": {
        "torch": {
            "Linear_64": {
                "variable": {
                    "value": "self.dnn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dnn_linear_in_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dnn_hidden_units[-1] + field_num * att_embedding_size * att_head_num",
                            "BinOp"
                        ],
                        [
                            "dnn_hidden_units[-1]",
                            "Subscript"
                        ],
                        [
                            "field_num * att_embedding_size * att_head_num",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.int_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[InteractingLayer(self.embedding_size if i == 0 else att_embedding_size * att_head_num, att_embedding_size, att_head_num, att_res, device=device) for i in range(att_layer_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "flatten_90": {
                "variable": {
                    "value": "att_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "concat_fun(sparse_embedding_list, axis=1)",
                            "Call"
                        ],
                        [
                            "layer(att_input)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/models/ccpm.py": {
        "torch": {
            "Linear_61": {
                "variable": {
                    "value": "self.dnn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dnn_hidden_units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "conv_input_concact",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "concat_fun(sparse_embedding_list, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/models/dcn.py": {
        "torch": {
            "Linear_63": {
                "variable": {
                    "value": "self.dnn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dnn_linear_in_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_input_dim(dnn_feature_columns) + dnn_hidden_units[-1]",
                            "BinOp"
                        ],
                        [
                            "dnn_hidden_units[-1]",
                            "Subscript"
                        ],
                        [
                            "self.compute_input_dim(dnn_feature_columns)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "stack_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cross_out, deep_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/models/dcnmix.py": {
        "torch": {
            "Linear_65": {
                "variable": {
                    "value": "self.dnn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dnn_linear_in_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_input_dim(dnn_feature_columns) + dnn_hidden_units[-1]",
                            "BinOp"
                        ],
                        [
                            "dnn_hidden_units[-1]",
                            "Subscript"
                        ],
                        [
                            "self.compute_input_dim(dnn_feature_columns)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "stack_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cross_out, deep_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/models/deepfm.py": {
        "torch": {
            "Linear_58": {
                "variable": {
                    "value": "self.dnn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dnn_hidden_units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "fm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sparse_embedding_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/models/dien.py": {
        "torch": {
            "pack_padded_sequence_218": {
                "variable": {
                    "value": "packed_keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_keys",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.masked_select(keys, mask.view(-1, 1, 1)).view(-1, max_length, dim)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "masked_keys_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keys_length[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_221": {
                "variable": {
                    "value": "(interests, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_interests",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pack_padded_sequence(interests, lengths=keys_length, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(keys, lengths=keys_length, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "total_length": {
                    "value": "max_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keys.size()[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_354": {
                "variable": {
                    "value": "packed_keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "keys_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(maxlen_lookup(X, features, keys_length_feature_name), 1)",
                            "Call"
                        ],
                        [
                            "keys_length[mask_shape]",
                            "Subscript"
                        ],
                        [
                            "keys_length[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_356": {
                "variable": {
                    "value": "(interests, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_interests",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pack_padded_sequence(interests, lengths=keys_length, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(keys, lengths=keys_length, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "total_length": {
                    "value": "max_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keys.size()[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_363": {
                "variable": {
                    "value": "packed_interests",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interests",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keys * att_scores.transpose(1, 2)",
                            "BinOp"
                        ]
                    ]
                },
                "lengths": {
                    "value": "keys_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(maxlen_lookup(X, features, keys_length_feature_name), 1)",
                            "Call"
                        ],
                        [
                            "keys_length[mask_shape]",
                            "Subscript"
                        ],
                        [
                            "keys_length[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_369": {
                "variable": {
                    "value": "packed_interests",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "keys_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(maxlen_lookup(X, features, keys_length_feature_name), 1)",
                            "Call"
                        ],
                        [
                            "keys_length[mask_shape]",
                            "Subscript"
                        ],
                        [
                            "keys_length[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_371": {
                "variable": {
                    "value": "packed_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attention(query, keys, keys_length.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "self.attention(query, keys, keys_length.unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "keys_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.squeeze(maxlen_lookup(X, features, keys_length_feature_name), 1)",
                            "Call"
                        ],
                        [
                            "keys_length[mask_shape]",
                            "Subscript"
                        ],
                        [
                            "keys_length[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_374": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attention(query, interests, keys_length.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(1)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.interest_evolution(packed_interests, packed_scores)",
                            "Call"
                        ],
                        [
                            "InterestEvolving._get_last_state(outputs, keys_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "total_length": {
                    "value": "max_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keys.size()[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "deepctr_torch/models/fibinet.py": {
        "torch": {
            "Linear_53": {
                "variable": {
                    "value": "self.dnn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dnn_hidden_units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "sparse_embedding_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sparse_embedding_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_85": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.cat((senet_bilinear_out, bilinear_out), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "(senet_bilinear_out, bilinear_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/models/mlr.py": {
        "torch": {
            "ModuleList_60": {
                "variable": {
                    "value": "self.region_linear_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Linear(self.region_feature_columns, self.feature_index, self.init_std, self.device) for i in range(self.region_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.base_linear_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Linear(self.base_feature_columns, self.feature_index, self.init_std, self.device) for i in range(self.region_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "region_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.region_linear_model[i](inputs) for i in range(region_number)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "final_logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "region_score * learner_score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.bias_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(self.bias_feature_columns, self.feature_index, self.init_std, self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_80": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "[self.region_linear_model[i](inputs) for i in range(region_number)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/models/nfm.py": {
        "torch": {
            "Linear_48": {
                "variable": {
                    "value": "self.dnn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dnn_hidden_units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "fm_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sparse_embedding_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "bi_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "deepctr_torch/models/pnn.py": {
        "torch": {
            "Linear_69": {
                "variable": {
                    "value": "self.dnn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dnn_hidden_units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_81": {
                "variable": {
                    "value": "linear_signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat_fun(sparse_embedding_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_85": {
                "variable": {
                    "value": "inner_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.innerproduct(sparse_embedding_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "product_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[linear_signal, inner_product, outer_product]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "product_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[linear_signal, outer_product]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "product_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[linear_signal, inner_product]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/models/wdl.py": {
        "torch": {
            "Linear_52": {
                "variable": {
                    "value": "self.dnn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dnn_hidden_units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/models/xcrossnet.py": {
        "torch": {
            "ParameterList_76": {
                "variable": {
                    "value": "self.kernels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(nn.init.xavier_normal_(torch.empty(self.dense_features, 1)), requires_grad=True) for i in range(self.cross_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_79": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(nn.init.zeros_(torch.empty(self.dense_features, 1)), requires_grad=True) for i in range(self.cross_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.dnn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dnn_hidden_units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_103": {
                "variable": {
                    "value": "linear_signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concat_fun(sparse_embedding_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.dnn_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.xavier_normal_(torch.empty(dnn_input_features, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "self.dnn_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.zeros_(torch.empty(dnn_input_features, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "flatten_107": {
                "variable": {
                    "value": "inner_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.innerproduct(sparse_embedding_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "product_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[linear_signal, inner_product, outer_product]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "dnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cross_output, dnn_input]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensordot_141": {
                "variable": {
                    "value": "x_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cross_input.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "dnn_input.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.dnn_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "([1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_142": {
                "variable": {
                    "value": "x_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cross_input.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "dnn_input.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_0",
                            "Name"
                        ],
                        [
                            "torch.tensordot(x_0, self.dnn_kernel, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(x_0, x_1)",
                            "Call"
                        ],
                        [
                            "x_1 + self.dnn_bias",
                            "BinOp"
                        ],
                        [
                            "x_2",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_144": {
                "variable": {
                    "value": "dnn_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_1.squeeze(2), dnn_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "product_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[linear_signal, outer_product]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_132": {
                "variable": {
                    "value": "x_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_0",
                            "Name"
                        ],
                        [
                            "torch.tensordot(x_0, self.dnn_kernel, dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(x_0, x_1)",
                            "Call"
                        ],
                        [
                            "x_1 + self.dnn_bias",
                            "BinOp"
                        ],
                        [
                            "x_2",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "self.kernels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "([1], [0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "variable": {
                    "value": "x_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cross_input.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "dnn_input.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensordot(x_1, self.kernels[i], dims=([1], [0]))",
                            "Call"
                        ],
                        [
                            "torch.matmul(x_0, x_2)",
                            "Call"
                        ],
                        [
                            "x_2 + self.bias[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_135": {
                "variable": {
                    "value": "cross_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_2.squeeze(2), cross_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "data": {
                    "value": "nn.init.xavier_normal_(torch.empty(self.dense_features, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "data": {
                    "value": "nn.init.zeros_(torch.empty(self.dense_features, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "product_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[linear_signal, inner_product]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_86": {
                "*size": {
                    "value": "dnn_input_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "product_out_dim + self.compute_input_dim(dnn_feature_columns, embedding_size) + self.dense_features * self.cross_num",
                            "BinOp"
                        ],
                        [
                            "dnn_input_features * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_88": {
                "*size": {
                    "value": "dnn_input_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "product_out_dim + self.compute_input_dim(dnn_feature_columns, embedding_size) + self.dense_features * self.cross_num",
                            "BinOp"
                        ],
                        [
                            "dnn_input_features * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_77": {
                "*size": {
                    "value": "self.dense_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_80": {
                "*size": {
                    "value": "self.dense_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "deepctr_torch/models/xdeepfm.py": {
        "torch": {
            "Linear_55": {
                "variable": {
                    "value": "self.dnn_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dnn_hidden_units[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.cin_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.featuremap_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "cin_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sparse_embedding_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/run_dien.py": {
        "torch": {
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/run_din.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/models/DIEN_test.py": {
        "torch": {
            "tensor_20": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 1], [0.1, 0.2, 0.3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "variable": {
                    "value": "keys",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[0.1, 0.2, 0.3], [1, 2, 3], [0.4, 0.2, 1], [0.0, 0.0, 0.0]], [[0.1, 0.2, 0.3], [1, 2, 3], [0.4, 0.2, 1], [0.5, 0.5, 0.5]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "keys_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/utils.py": {
        "torch": {
            "tensor_115": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_data.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "rand_input",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_157": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name + '_weights.h5'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_163": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_name + '.h5'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_158": {
                "f": {
                    "value": "model_name + '_weights.h5'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(model_name + '.h5')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_name + '.h5'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}