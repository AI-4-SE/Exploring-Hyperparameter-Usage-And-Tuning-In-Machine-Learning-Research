{
    "Utils/data_loader.py": {
        "sklearn": {
            "train_test_split_109": {
                "variable": {
                    "value": "eight_vector_list",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "power_vec1",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "power_vec2",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "voltage_vec1",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "voltage_vec2",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_fraction",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Utils/data_transformation.py": {
        "sklearn": {
            "StandardScaler_89": {
                "variable": {
                    "value": "self._scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "copy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MinMaxScaler_134": {
                "variable": {
                    "value": "self._scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "feature_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                },
                "copy": {
                    "value": "copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "shape_187": {
                "variable": {
                    "value": "orig_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "flat_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[orig_shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_190": {
                "variable": {
                    "value": "scale_t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scikitlearnScaler.scale_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_191": {
                "variable": {
                    "value": "min_t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scikitlearnScaler.min_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "divide_192": {
                "variable": {
                    "value": "flat_tensor_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(tensor, min_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_216": {
                "variable": {
                    "value": "scale_t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scikitlearnScaler.scale_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_217": {
                "variable": {
                    "value": "min_t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scikitlearnScaler.min_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_193": {
                "tensor": {
                    "value": "flat_tensor_scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.subtract(tensor, min_t), scale_t)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(flat_tensor, scale_t), mean_t)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_195": {
                "variable": {
                    "value": "scale_t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scikitlearnScaler.scale_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_196": {
                "variable": {
                    "value": "mean_t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scikitlearnScaler.mean_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_197": {
                "variable": {
                    "value": "flat_tensor_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(flat_tensor, scale_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mean_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(scikitlearnScaler.mean_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.mean_, dtype=tf_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_218": {
                "x": {
                    "value": "tf.multiply(tensor, scale_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "min_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(scikitlearnScaler.min_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.min_, dtype=tf_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_220": {
                "variable": {
                    "value": "scale_t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scikitlearnScaler.scale_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_221": {
                "variable": {
                    "value": "mean_t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scikitlearnScaler.mean_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_192": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "min_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(scikitlearnScaler.min_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.min_, dtype=tf_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_198": {
                "tensor": {
                    "value": "flat_tensor_scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.subtract(tensor, min_t), scale_t)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(flat_tensor, scale_t), mean_t)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_218": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "scale_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_222": {
                "x": {
                    "value": "tf.subtract(tensor, mean_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "scale_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_197": {
                "x": {
                    "value": "flat_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [orig_shape[0], -1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "scale_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.scale_, dtype=tf_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_222": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "mean_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(scikitlearnScaler.mean_, dtype=tf_dtype)",
                            "Call"
                        ],
                        [
                            "tf.constant(scikitlearnScaler.mean_, dtype=tf_dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dsse.py": {
        "sklearn": {
            "train_test_split_248": {
                "variable": {
                    "value": "(X1_train, X1_validation, X2_train, X2_validation, X2hidden_train, X2hidden_validation, y_train, y_validation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X1_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X2_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "X2hidden_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "pop.validation_fraction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MinMaxScaler_259": {
                "feature_range": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_260": {
                "feature_range": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_261": {
                "feature_range": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shuffle_630": {
                "variable": {
                    "value": "(X1_train, X2_train, X2hidden_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X1_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X2_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "X2hidden_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "StandardScaler_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "series_voltage.py": {
        "sklearn": {
            "train_test_split_238": {
                "variable": {
                    "value": "(X1_train, X1_validation, X2_train, X2_validation, X2hidden_train, X2hidden_validation, y_train, y_validation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X1_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X2_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "X2hidden_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "validation_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MinMaxScaler_245": {
                "feature_range": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shuffle_502": {
                "variable": {
                    "value": "(X1_train, X2_train, X2hidden_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X1_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "X2_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "X2hidden_train",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_3": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "StandardScaler_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "ConfigProto_150": {
                "variable": {
                    "value": "tfcfg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_272": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_440": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(tensorboardDir, model_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_699": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_274": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_280": {
                "variable": {
                    "value": "input_data_X1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_real_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32 if args.revert_to_single_precision else tf.float64",
                            "IfExp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, args.T - 1, num_all_measurements)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_281": {
                "variable": {
                    "value": "input_data_X2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_real_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32 if args.revert_to_single_precision else tf.float64",
                            "IfExp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, num_remaining_measurements)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_282": {
                "variable": {
                    "value": "input_data_X2hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_real_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32 if args.revert_to_single_precision else tf.float64",
                            "IfExp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, num_hidden_measurements)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_283": {
                "variable": {
                    "value": "input_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_real_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32 if args.revert_to_single_precision else tf.float64",
                            "IfExp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(None, num_target_measurements)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_284": {
                "variable": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_real_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32 if args.revert_to_single_precision else tf.float64",
                            "IfExp"
                        ]
                    ]
                }
            },
            "placeholder_285": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_real_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32 if args.revert_to_single_precision else tf.float64",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_290": {
                "variable": {
                    "value": "intermediate_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[lstm_outputs[:, -1], auxiliary_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_322": {
                "variable": {
                    "value": "s_real_imag_interleaved",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[denormalized_input_data_X2hidden, denormalized_input_data_X2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_323": {
                "variable": {
                    "value": "s_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "s_real_imag_interleaved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([denormalized_input_data_X2hidden, denormalized_input_data_X2], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "real_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(range(0, num_target_measurements - 1, 2))",
                            "Call"
                        ],
                        [
                            "np.array(range(0, num_target_measurements - 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_324": {
                "variable": {
                    "value": "s_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "s_real_imag_interleaved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([denormalized_input_data_X2hidden, denormalized_input_data_X2], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "imag_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(range(1, num_target_measurements, 2))",
                            "Call"
                        ],
                        [
                            "np.array(range(1, num_target_measurements, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_326": {
                "variable": {
                    "value": "v_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "denormalized_input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_inverse_transform(y_transformer, input_labels, tf_real_dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "real_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(range(0, num_target_measurements - 1, 2))",
                            "Call"
                        ],
                        [
                            "np.array(range(0, num_target_measurements - 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_327": {
                "variable": {
                    "value": "v_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "denormalized_input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_inverse_transform(y_transformer, input_labels, tf_real_dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "imag_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(range(1, num_target_measurements, 2))",
                            "Call"
                        ],
                        [
                            "np.array(range(1, num_target_measurements, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_329": {
                "variable": {
                    "value": "v_est_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "denormalized_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_inverse_transform(y_transformer, logits, tf_real_dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "real_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(range(0, num_target_measurements - 1, 2))",
                            "Call"
                        ],
                        [
                            "np.array(range(0, num_target_measurements - 1, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_330": {
                "variable": {
                    "value": "v_est_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "denormalized_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_inverse_transform(y_transformer, logits, tf_real_dtype)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "imag_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(range(1, num_target_measurements, 2))",
                            "Call"
                        ],
                        [
                            "np.array(range(1, num_target_measurements, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_331": {
                "variable": {
                    "value": "Y_real",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y_real_np",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_real_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32 if args.revert_to_single_precision else tf.float64",
                            "IfExp"
                        ]
                    ]
                }
            },
            "constant_332": {
                "variable": {
                    "value": "Y_imag",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y_imag_np",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_real_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32 if args.revert_to_single_precision else tf.float64",
                            "IfExp"
                        ]
                    ]
                }
            },
            "reduce_mean_343": {
                "variable": {
                    "value": "per_node_denormalized_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.subtract(denormalized_input_labels, denormalized_logits))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_344": {
                "variable": {
                    "value": "per_node_denormalized_mae",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.abs(tf.subtract(denormalized_input_labels, denormalized_logits))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_353": {
                "variable": {
                    "value": "per_node_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.subtract(input_labels, logits))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_354": {
                "variable": {
                    "value": "per_node_mae",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.abs(tf.subtract(input_labels, logits))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_356": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_node_mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(tf.subtract(input_labels, logits)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_357": {
                "variable": {
                    "value": "mae",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "per_node_mae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.math.abs(tf.subtract(input_labels, logits)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_362": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_371": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_437": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_452": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_696": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "tfcfg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_276": {
                "device_name": {
                    "value": "deviceStr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/cpu:0' if gpuid == -1 else '/gpu:{gpuid}'.format(gpuid=gpuid)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "complex_334": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "s_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(s_real_imag_interleaved, real_indices, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "s_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(s_real_imag_interleaved, imag_indices, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "complex_335": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "v_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(denormalized_input_labels, real_indices, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "v_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(denormalized_input_labels, imag_indices, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "complex_336": {
                "variable": {
                    "value": "v_est",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "v_est_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(denormalized_logits, real_indices, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "v_est_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(denormalized_logits, imag_indices, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "complex_337": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "Y_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(Y_real_np, dtype=tf_real_dtype)",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "Y_imag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(Y_imag_np, dtype=tf_real_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_445": {
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "tfcfg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_295": {
                "x": {
                    "value": "tf.math.multiply(unscaled_logits, multiplicative_scaler_vector)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "additive_scaler_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_model(intermediate_features, lstm_output_dim + num_remaining_measurements, num_target_measurements, 1, activation=tf.nn.leaky_relu, dtype=tf_real_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_310": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.complex(v_real, v_imag)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_343": {
                "x": {
                    "value": "tf.subtract(denormalized_input_labels, denormalized_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_344": {
                "x": {
                    "value": "tf.subtract(denormalized_input_labels, denormalized_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_353": {
                "x": {
                    "value": "tf.subtract(input_labels, logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_354": {
                "x": {
                    "value": "tf.subtract(input_labels, logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_375": {
                "name": {
                    "value": "train_curves",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_376": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mse + regularizing_term",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_377": {
                "name": {
                    "value": "MSE",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(per_node_mse)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_378": {
                "name": {
                    "value": "MAE",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(per_node_mae)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_379": {
                "name": {
                    "value": "PFE_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pfe_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_380": {
                "name": {
                    "value": "PFE_numeric_MSE",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pfe_numeric_mse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_381": {
                "name": {
                    "value": "PFE_numeric_MAE",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "pfe_numeric_mae",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_383": {
                "name": {
                    "value": "Nodewise_MSE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_387": {
                "name": {
                    "value": "Nodewise_MAE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_391": {
                "name": {
                    "value": "Nodewise_Denormalized_MSE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_395": {
                "name": {
                    "value": "Nodewise_Denormalized_MAE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_400": {
                "name": {
                    "value": "gradient_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_415": {
                "name": {
                    "value": "weights_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_432": {
                "name": {
                    "value": "test_curves",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_433": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mse + regularizing_term",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_434": {
                "name": {
                    "value": "MSE",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(per_node_mse)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_295": {
                "x": {
                    "value": "unscaled_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_model(intermediate_features, lstm_output_dim + num_remaining_measurements, num_target_measurements, n_layers_fc, dtype=tf_real_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "multiplicative_scaler_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_model(intermediate_features, lstm_output_dim + num_remaining_measurements, num_target_measurements, 1, activation=tf.nn.leaky_relu, dtype=tf_real_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "subtract_343": {
                "x": {
                    "value": "denormalized_input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_inverse_transform(y_transformer, input_labels, tf_real_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "denormalized_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_inverse_transform(y_transformer, logits, tf_real_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_344": {
                "x": {
                    "value": "denormalized_input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_inverse_transform(y_transformer, input_labels, tf_real_dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "denormalized_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_inverse_transform(y_transformer, logits, tf_real_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_347": {
                "inputs": {
                    "value": "L2_norms_of_all_weights_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.nn.l2_loss(v) for v in tf.trainable_variables()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "subtract_353": {
                "x": {
                    "value": "input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf_real_dtype, shape=(None, num_target_measurements))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scaled_logits",
                            "Name"
                        ],
                        [
                            "input_data_X1[:, -1, number_of_nodes_to_estimate * 2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "subtract_354": {
                "x": {
                    "value": "input_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf_real_dtype, shape=(None, num_target_measurements))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scaled_logits",
                            "Name"
                        ],
                        [
                            "input_data_X1[:, -1, number_of_nodes_to_estimate * 2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_by_value_366": {
                "t": {
                    "value": "gv[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_385": {
                "name": {
                    "value": "'ReV{}'.format(nnode + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "per_node_mse[2 * nnode]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_386": {
                "name": {
                    "value": "'ImV{}'.format(nnode + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "per_node_mse[2 * nnode + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_389": {
                "name": {
                    "value": "'ReV{}'.format(nnode + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "per_node_mae[2 * nnode]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_390": {
                "name": {
                    "value": "'ImV{}'.format(nnode + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "per_node_mae[2 * nnode + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_393": {
                "name": {
                    "value": "'ReV{}'.format(nnode + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "per_node_denormalized_mse[2 * nnode]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_394": {
                "name": {
                    "value": "'ImV{}'.format(nnode + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "per_node_denormalized_mse[2 * nnode + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_397": {
                "name": {
                    "value": "'ReV{}'.format(nnode + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "per_node_denormalized_mae[2 * nnode]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_398": {
                "name": {
                    "value": "'ImV{}'.format(nnode + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "per_node_denormalized_mae[2 * nnode + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_406": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_420": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "var_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_404": {
                "name": {
                    "value": "gradName",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var.name.replace(':', '_')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_405": {
                "name": {
                    "value": "sparsity",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_407": {
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(grad)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(var_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_409": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(grad - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_410": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(grad - mean)))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(var_i - mean)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_411": {
                "name": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_412": {
                "name": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_413": {
                "name": {
                    "value": "histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_419": {
                "name": {
                    "value": "varName",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_i.name",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_421": {
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(grad)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(var_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_423": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(var_i - mean))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_424": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(grad - mean)))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(var_i - mean)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_425": {
                "name": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(var_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_426": {
                "name": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(var_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_427": {
                "name": {
                    "value": "histogram",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "var_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "zero_fraction_405": {
                "value": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_408": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_411": {
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_min_412": {
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_422": {
                "name": {
                    "value": "stddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_425": {
                "input_tensor": {
                    "value": "var_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_426": {
                "input_tensor": {
                    "value": "var_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_409": {
                "input_tensor": {
                    "value": "tf.square(grad - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_423": {
                "input_tensor": {
                    "value": "tf.square(var_i - mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_409": {
                "x": {
                    "value": "grad - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_423": {
                "x": {
                    "value": "var_i - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Utils/complex_numbers.py": {
        "tensorflow": {
            "subtract_56": {
                "variable": {
                    "value": "Preal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(Areal, Breal)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.matmul(Aimag, Bimag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_57": {
                "variable": {
                    "value": "Pimag",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(Areal, Bimag)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.matmul(Aimag, Breal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_49": {
                "variable": {
                    "value": "Areal",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Areal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Areal)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_50": {
                "variable": {
                    "value": "Aimag",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.negative(Aimag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "Breal",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Breal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Breal)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_54": {
                "variable": {
                    "value": "Bimag",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.negative(Bimag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "a": {
                    "value": "Aimag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.negative(Aimag))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Bimag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.negative(Bimag))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_57": {
                "a": {
                    "value": "Aimag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.negative(Aimag))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Breal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Breal)",
                            "Call"
                        ]
                    ]
                }
            },
            "negative_50": {
                "x": {
                    "value": "Aimag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.negative(Aimag))",
                            "Call"
                        ]
                    ]
                }
            },
            "negative_54": {
                "x": {
                    "value": "Bimag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.negative(Bimag))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Utils/loss.py": {
        "tensorflow": {
            "map_fn_50": {
                "variable": {
                    "value": "(diagVconjY_real, diagVconjY_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "complex_matmul_using_real_ops_diaga_adjY",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(vreal, vimag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(dtype, dtype)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_fn_52": {
                "variable": {
                    "value": "(diagVconjYconjV_real, diagVconjYconjV_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "complex_matmul_using_real_ops_adjb_squeeze",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(diagVconjY_real, diagVconjY_imag, vreal, vimag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(dtype, dtype)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_54": {
                "variable": {
                    "value": "msett",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(diff_tensor_real) + tf.square(diff_tensor_imag)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_55": {
                "variable": {
                    "value": "maett",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(diff_tensor_real) + tf.abs(diff_tensor_imag)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "mse_cumulative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "mae_cumulative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "diag_41": {
                "variable": {
                    "value": "Areal",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "Areal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.diag(Areal)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_42": {
                "variable": {
                    "value": "Aimag",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "Aimag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.diag(Aimag)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "diagVconjY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.diag(v[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "diagv_est_x_conjY",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "diagVconjYconjV",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(diagVconjY, tf.expand_dims(v[i], 0), adjoint_b=True, name='diagv_est_x_conjY_x_conjv_est')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "input": {
                    "value": "vimag",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_48": {
                "input": {
                    "value": "Pimag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_54": {
                "x": {
                    "value": "diff_tensor_imag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_55": {
                "x": {
                    "value": "diff_tensor_imag",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_80": {
                "diagonal": {
                    "value": "v[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "a": {
                    "value": "diagVconjY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.diag(v[i]), Y, adjoint_b=True, name='diagv_est_x_conjY')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(v[i], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "diagv_est_x_conjY_x_conjv_est",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_83": {
                "x": {
                    "value": "tf.imag(diff_one_example)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_84": {
                "x": {
                    "value": "tf.imag(diff_one_example)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "input_tensor": {
                    "value": "mae_cumulative",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(s[0], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "mae_cumulative + mae_one_example",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_81": {
                "input": {
                    "value": "v[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "real_83": {
                "input": {
                    "value": "diff_one_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[i] - diagVconjYconjV",
                            "BinOp"
                        ]
                    ]
                }
            },
            "imag_83": {
                "input": {
                    "value": "diff_one_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[i] - diagVconjYconjV",
                            "BinOp"
                        ]
                    ]
                }
            },
            "real_84": {
                "input": {
                    "value": "diff_one_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[i] - diagVconjYconjV",
                            "BinOp"
                        ]
                    ]
                }
            },
            "imag_84": {
                "input": {
                    "value": "diff_one_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s[i] - diagVconjYconjV",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Utils/nn.py": {
        "tensorflow": {
            "pad_56": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "avgpool2d(input, k=downsample_factor, strides=downsample_factor)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, x.shape[-1]]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "tf.cond(tf.equal(dropout_prob, tf.constant(1.0)), lambda : input_data, lambda : tf.nn.dropout(input_data, dropout_prob + 0.3))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "avgpool2d(input, k=downsample_factor, strides=downsample_factor)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, x.shape[-1]]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "tf.cond(tf.equal(dropout_prob, tf.constant(1.0)), lambda : input_data, lambda : tf.nn.dropout(input_data, dropout_prob + 0.3))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "avgpool2d(input, k=downsample_factor, strides=downsample_factor)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, x.shape[-1]]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "tf.cond(tf.equal(dropout_prob, tf.constant(1.0)), lambda : input_data, lambda : tf.nn.dropout(input_data, dropout_prob + 0.3))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cond_256": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(dropout_prob, tf.constant(1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : input_data",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.nn.dropout(input_data, dropout_prob + 0.3)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_299": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avgpool2d(conv3, averagePoolingFactor[2], averagePoolingFactor[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc2, [-1, weights['fc2_wout'].get_shape().as_list()[0]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, weights['fc2_wout'].get_shape().as_list()[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_300": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(fc2, weights['fc2_wout'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['fc2_bout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MultiRNNCell_413": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "drops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.contrib.rnn.DropoutWrapper(lstm, output_keep_prob=dropout_keep_prob) for lstm in lstms]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "dynamic_rnn_417": {
                "variable": {
                    "value": "(lstm_outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell(drops)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell.zero_state(batch_size, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_61": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "avgpool2d(input, k=downsample_factor, strides=downsample_factor)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, x.shape[-1]]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "tf.cond(tf.equal(dropout_prob, tf.constant(1.0)), lambda : input_data, lambda : tf.nn.dropout(input_data, dropout_prob + 0.3))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_66": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "avgpool2d(input, k=downsample_factor, strides=downsample_factor)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, x.shape[-1]]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "tf.cond(tf.equal(dropout_prob, tf.constant(1.0)), lambda : input_data, lambda : tf.nn.dropout(input_data, dropout_prob + 0.3))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "avgpool2d(input, k=downsample_factor, strides=downsample_factor)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, x.shape[-1]]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "tf.cond(tf.equal(dropout_prob, tf.constant(1.0)), lambda : input_data, lambda : tf.nn.dropout(input_data, dropout_prob + 0.3))",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "initial_value": {
                    "value": "tf.random_normal([ker_w, ker_h, in_channels, out_channels], 0, sqrt(2.0 / (in_channels * ker_w * ker_h)))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "initial_value": {
                    "value": "tf.random_normal([n_inputs, n_outputs], 0, sqrt(2.0 / n_inputs))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_103": {
                "initial_value": {
                    "value": "tf.zeros([n_biases])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "avgpool2d(input, k=downsample_factor, strides=downsample_factor)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, x.shape[-1]]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "tf.cond(tf.equal(dropout_prob, tf.constant(1.0)), lambda : input_data, lambda : tf.nn.dropout(input_data, dropout_prob + 0.3))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [0, x.shape[-1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_232": {
                "variable": {
                    "value": "batch_of_current_var_gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[list_of_per_example_gradient_lists[j][i] for j in range(num_examples)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dense_383": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(outputs, fcHiddenLayerOutputSz[layer_id], activation=activation, kernel_initializer=tf.glorot_uniform_initializer(dtype=dtype), bias_initializer=tf.initializers.constant(dtype=dtype))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, beta_initializer=tf.initializers.constant(dtype=dtype), gamma_initializer=tf.initializers.constant(value=1, dtype=dtype), moving_mean_initializer=tf.initializers.constant(dtype=dtype), moving_variance_initializer=tf.initializers.constant(value=1, dtype=dtype))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "fcHiddenLayerOutputSz[layer_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.glorot_uniform_initializer(dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.initializers.constant(dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "shape": {
                    "value": "[n_biases]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_256": {
                "x": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_300": {
                "a": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "avgpool2d(conv3, averagePoolingFactor[2], averagePoolingFactor[2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(fc2, [-1, weights['fc2_wout'].get_shape().as_list()[0]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['fc2_wout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "batch_normalization_388": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(outputs, fcHiddenLayerOutputSz[layer_id], activation=activation, kernel_initializer=tf.glorot_uniform_initializer(dtype=dtype), bias_initializer=tf.initializers.constant(dtype=dtype))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(outputs, beta_initializer=tf.initializers.constant(dtype=dtype), gamma_initializer=tf.initializers.constant(value=1, dtype=dtype), moving_mean_initializer=tf.initializers.constant(dtype=dtype), moving_variance_initializer=tf.initializers.constant(value=1, dtype=dtype))",
                            "Call"
                        ]
                    ]
                },
                "beta_initializer": {
                    "value": "tf.initializers.constant(dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "gamma_initializer": {
                    "value": "tf.initializers.constant(value=1, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "moving_mean_initializer": {
                    "value": "tf.initializers.constant(dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "moving_variance_initializer": {
                    "value": "tf.initializers.constant(value=1, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMCell_409": {
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "'basic_lstm_cell_{}'.format(iii)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DropoutWrapper_411": {
                "cell": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_415": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_194": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_relu(input, weights[weightName], biases[biasName], strides=strides, pre_pad=pre_pad, use_batchnorm=use_batchnorm, batchnorm_MA_frac=batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.pad(output, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(output, weights[weightName], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases[biasName])",
                            "Call"
                        ],
                        [
                            "conv2d_relu(output, weights[weightName], biases[biasName], strides=1, pre_pad=pre_pad, use_batchnorm=use_batchnorm, batchnorm_MA_frac=batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(output, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.add(output, x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_195": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_relu(input, weights[weightName], biases[biasName], strides=strides, pre_pad=pre_pad, use_batchnorm=use_batchnorm, batchnorm_MA_frac=batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.pad(output, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(output, weights[weightName], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases[biasName])",
                            "Call"
                        ],
                        [
                            "conv2d_relu(output, weights[weightName], biases[biasName], strides=1, pre_pad=pre_pad, use_batchnorm=use_batchnorm, batchnorm_MA_frac=batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(output, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.add(output, x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights[weightName]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_196": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_relu(input, weights[weightName], biases[biasName], strides=strides, pre_pad=pre_pad, use_batchnorm=use_batchnorm, batchnorm_MA_frac=batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.pad(output, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(output, weights[weightName], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases[biasName])",
                            "Call"
                        ],
                        [
                            "conv2d_relu(output, weights[weightName], biases[biasName], strides=1, pre_pad=pre_pad, use_batchnorm=use_batchnorm, batchnorm_MA_frac=batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(output, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.add(output, x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases[biasName]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_199": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_relu(input, weights[weightName], biases[biasName], strides=strides, pre_pad=pre_pad, use_batchnorm=use_batchnorm, batchnorm_MA_frac=batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.pad(output, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(output, weights[weightName], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases[biasName])",
                            "Call"
                        ],
                        [
                            "conv2d_relu(output, weights[weightName], biases[biasName], strides=1, pre_pad=pre_pad, use_batchnorm=use_batchnorm, batchnorm_MA_frac=batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(output, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.add(output, x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(x, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "avgpool2d(input, k=downsample_factor, strides=downsample_factor)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, x.shape[-1]]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "tf.cond(tf.equal(dropout_prob, tf.constant(1.0)), lambda : input_data, lambda : tf.nn.dropout(input_data, dropout_prob + 0.3))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_200": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_relu(input, weights[weightName], biases[biasName], strides=strides, pre_pad=pre_pad, use_batchnorm=use_batchnorm, batchnorm_MA_frac=batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.pad(output, [[0, 0], [pre_pad, pre_pad], [pre_pad, pre_pad], [0, 0]], 'CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(output, weights[weightName], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(output, biases[biasName])",
                            "Call"
                        ],
                        [
                            "conv2d_relu(output, weights[weightName], biases[biasName], strides=1, pre_pad=pre_pad, use_batchnorm=use_batchnorm, batchnorm_MA_frac=batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(output, batchnorm_MA_frac)",
                            "Call"
                        ],
                        [
                            "tf.add(output, x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_245": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-clip_grads",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "clip_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_256": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_257": {
                "x": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout_prob + 0.3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_239": {
                "input_tensor": {
                    "value": "batch_of_current_var_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([list_of_per_example_gradient_lists[j][i] for j in range(num_examples)])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_386": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_389": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_390": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_391": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_392": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}