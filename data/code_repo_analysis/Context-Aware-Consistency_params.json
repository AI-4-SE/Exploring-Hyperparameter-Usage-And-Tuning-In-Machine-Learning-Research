{
    "base/base_dataloader.py": {
        "torch": {
            "SubsetRandomSampler_46": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_indxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indxs[split_indx:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_47": {
                "variable": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "val_indxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indxs[:split_indx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_53": {
                "sampler": {
                    "value": "self.val_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "base/base_dataset.py": {
        "torch": {
            "from_numpy_182": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(label, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "base/base_model.py": {
        "torch": {}
    },
    "base/base_trainer.py": {
        "torch": {
            "DistributedDataParallel_42": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_88": {
                "variable": {
                    "value": "sys_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_96": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if n_gpu > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_178": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resume_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_device_34": {
                "device": {
                    "value": "self.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_82": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "writer_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg_trainer['log_dir'], run_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_167": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'arch': type(self.model).__name__, 'epoch': epoch, 'state_dict': self.model.state_dict(), 'monitor_best': self.mnt_best, 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, f'checkpoint.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, f'best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_171": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'arch': type(self.model).__name__, 'epoch': epoch, 'state_dict': self.model.state_dict(), 'monitor_best': self.mnt_best, 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, f'checkpoint.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, f'best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloaders/city.py": {
        "torch": {
            "stack_186": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image1, image2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack([label1, label2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_205": {
                "variable": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "sampler_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('shuffle')",
                            "Call"
                        ],
                        [
                            "kwargs.pop('shuffle')",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_257": {
                "variable": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "sampler_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('shuffle')",
                            "Call"
                        ],
                        [
                            "kwargs.pop('shuffle')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloaders/voc.py": {
        "torch": {
            "stack_182": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image1, image2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack([label1, label2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedSampler_202": {
                "variable": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "sampler_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('shuffle')",
                            "Call"
                        ],
                        [
                            "kwargs.pop('shuffle')",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_253": {
                "variable": {
                    "value": "dist_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "sampler_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('shuffle')",
                            "Call"
                        ],
                        [
                            "kwargs.pop('shuffle')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/backbones/module_helper.py": {
        "torch": {
            "batch_norm_18": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_111": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_133": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_25": {
                "*args": {
                    "value": "nn.BatchNorm2d(num_features, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "*args": {
                    "value": "BatchNorm2d(num_features, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "nn.InstanceNorm2d(num_features, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_37": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "FixedBatchNorm(num_features, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/backbones/resnet_backbone.py": {
        "torch": {}
    },
    "models/backbones/resnet_models.py": {
        "torch": {
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_123": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_129": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1, bias=False)), ('bn1', ModuleHelper.BatchNorm2d(norm_type=norm_type)(64)), ('relu1', nn.ReLU(inplace=False)), ('conv2', nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False)), ('bn2', ModuleHelper.BatchNorm2d(norm_type=norm_type)(64)), ('relu2', nn.ReLU(inplace=False)), ('conv3', nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False)), ('bn3', ModuleHelper.BatchNorm2d(norm_type=norm_type)(self.inplanes)), ('relu3', nn.ReLU(inplace=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)), ('bn1', ModuleHelper.BatchNorm2d(norm_type=norm_type)(self.inplanes)), ('relu', nn.ReLU(inplace=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/backbones/resnet_models_mdf.py": {
        "torch": {
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_124": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_130": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1, bias=False)), ('bn1', ModuleHelper.BatchNorm2d(norm_type=norm_type)(64)), ('relu1', nn.ReLU(inplace=False)), ('conv2', nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False)), ('bn2', ModuleHelper.BatchNorm2d(norm_type=norm_type)(64)), ('relu2', nn.ReLU(inplace=False)), ('conv3', nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False)), ('bn3', ModuleHelper.BatchNorm2d(norm_type=norm_type)(self.inplanes)), ('relu3', nn.ReLU(inplace=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.prefix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)), ('bn1', ModuleHelper.BatchNorm2d(norm_type=norm_type)(self.inplanes)), ('relu', nn.ReLU(inplace=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/encoder.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stages(in_channels, out_channels, b_s) for b_s in bin_sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels + out_channels * len(bin_sizes), out_channels, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_26": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "bin_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bin_sz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // len(bin_sizes)",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // len(bin_sizes)",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Sequential(model.prefix, model.maxpool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "*args": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_channels + out_channels * len(bin_sizes)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // len(bin_sizes)",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // len(bin_sizes)",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "pyramids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[features]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "*args": {
                    "value": "model.prefix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_35": {
                "input": {
                    "value": "stage(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "Sequential_40": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.out_dim, self.out_dim, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_84": {
                "variable": {
                    "value": "output_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x_l)",
                            "Call"
                        ],
                        [
                            "self.classifier(enc)",
                            "Call"
                        ],
                        [
                            "self.encoder(x_l)",
                            "Call"
                        ],
                        [
                            "self.classifier(enc)",
                            "Call"
                        ],
                        [
                            "self.encoder(x_l)",
                            "Call"
                        ],
                        [
                            "self.classifier(enc)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x_l.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensors_gather",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(tensor) for _ in range(torch.distributed.get_world_size())]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_79": {
                "input": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x_l)",
                            "Call"
                        ],
                        [
                            "self.classifier(enc)",
                            "Call"
                        ],
                        [
                            "self.encoder(x_l)",
                            "Call"
                        ],
                        [
                            "self.classifier(enc)",
                            "Call"
                        ],
                        [
                            "self.encoder(x_l)",
                            "Call"
                        ],
                        [
                            "self.classifier(enc)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x_l.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "output_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x_l)",
                            "Call"
                        ],
                        [
                            "self.classifier(enc)",
                            "Call"
                        ],
                        [
                            "self.encoder(x_l)",
                            "Call"
                        ],
                        [
                            "self.classifier(enc)",
                            "Call"
                        ],
                        [
                            "self.encoder(x_l)",
                            "Call"
                        ],
                        [
                            "self.classifier(enc)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x_l.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_115": {
                "variable": {
                    "value": "output_ul1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_ul1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.project(enc_ul1)",
                            "Call"
                        ],
                        [
                            "F.normalize(output_ul1, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_121": {
                "variable": {
                    "value": "output_ul2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_ul2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.project(enc_ul2)",
                            "Call"
                        ],
                        [
                            "F.normalize(output_ul2, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "output_feat1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_feature_list1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "output_feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_feature_list2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "pseudo_label1_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pseudo_label_list1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "pseudo_label2_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pseudo_label_list2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "pseudo_logits1_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pseudo_logits_list1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "pseudo_logits2_overlap",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pseudo_logits_list2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "output_ul_flatten_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output_ul1_flatten_selected, output_ul2_flatten_selected]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "pseudo_label_flatten_selected",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pseudo_label1_flatten_selected, pseudo_label2_flatten_selected]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "output_ul_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.feature_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "pseudo_label_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.pseudo_label_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "logits1_down",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pos1.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "logits2_down",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pos2.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_40": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.proj_final_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_113": {
                "variable": {
                    "value": "enc_ul1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_ul1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x_ul1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(enc_ul1, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_119": {
                "variable": {
                    "value": "enc_ul2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_ul2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(x_ul2)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(enc_ul2, kernel_size=2, stride=2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "neg1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos, neg1_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "mask1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(mask1_idx.size(0), 1).float().cuda(), mask1_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_249": {
                "variable": {
                    "value": "neg2_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos, neg2_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_250": {
                "variable": {
                    "value": "mask2_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(mask2_idx.size(0), 1).float().cuda(), mask2_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_289": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flip_146": {
                "variable": {
                    "value": "output_ul1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_ul1_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_ul1[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(output_ul1_idx, dims=(2,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_147": {
                "variable": {
                    "value": "pseudo_label1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_label1_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pseudo_label1[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(pseudo_label1_idx, dims=(1,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_148": {
                "variable": {
                    "value": "pseudo_logits_1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_logits_1_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pseudo_logits_1[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(pseudo_logits_1_idx, dims=(1,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_150": {
                "variable": {
                    "value": "output_ul2_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_ul2_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_ul2[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(output_ul2_idx, dims=(2,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_151": {
                "variable": {
                    "value": "pseudo_label2_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_label2_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pseudo_label2[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(pseudo_label2_idx, dims=(1,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_152": {
                "variable": {
                    "value": "pseudo_logits_2_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo_logits_2_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pseudo_logits_2[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(pseudo_logits_2_idx, dims=(1,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_231": {
                "input": {
                    "value": "pos1 - neg_max1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_231": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_234": {
                "input": {
                    "value": "logits1 + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_266": {
                "input": {
                    "value": "pos2 - neg_max2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_266": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_270": {
                "input": {
                    "value": "logits2 + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_215": {
                "input": {
                    "value": "neg1_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_feat1 @ output_ul_idx.T / self.temp",
                            "BinOp"
                        ],
                        [
                            "output_feat1 @ output_ul_idx.T / self.temp",
                            "BinOp"
                        ],
                        [
                            "torch.cat([pos, neg1_idx], 1)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_251": {
                "input": {
                    "value": "neg2_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_feat2 @ output_ul_idx.T / self.temp",
                            "BinOp"
                        ],
                        [
                            "output_feat2 @ output_ul_idx.T / self.temp",
                            "BinOp"
                        ],
                        [
                            "torch.cat([pos, neg2_idx], 1)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "input": {
                    "value": "logits1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(enc_ul1)",
                            "Call"
                        ],
                        [
                            "torch.exp(pos1 - neg_max1).squeeze(-1) / (logits1_down + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_126": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "input": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(enc_ul2)",
                            "Call"
                        ],
                        [
                            "torch.exp(pos2 - neg_max2).squeeze(-1) / (logits2_down + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_127": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_214": {
                "*size": {
                    "value": "mask1_idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_250": {
                "*size": {
                    "value": "mask2_idx.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_206": {
                "input": {
                    "value": "neg1_idx - neg_max1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_216": {
                "input": {
                    "value": "neg1_idx - neg_max1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_242": {
                "input": {
                    "value": "neg2_idx - neg_max2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_252": {
                "input": {
                    "value": "neg2_idx - neg_max2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/modeling/aspp.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.atrous_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "320",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.global_avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_62": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_71": {
                "variable": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_avg_pool(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x5, size=x4.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x4.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4, x5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_55": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ],
                        [
                            "320",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/modeling/backbone/drn.py": {
        "torch": {
            "rand_402": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_250": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_275": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.layer0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, channels[0], kernel_size=7, stride=1, padding=3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_276": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_203": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(16",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride if i == 0 else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_207": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/modeling/backbone/mobilenet.py": {
        "torch": {
            "pad_21": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_beg, pad_end, pad_beg, pad_end)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_150": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_9": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "s",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 0, dilation, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "s",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "s",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/modeling/backbone/resnet.py": {
        "torch": {
            "rand_188": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_70": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_160": {
                "variable": {
                    "value": "pretrain_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrain_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "variable"
                        ],
                        [
                            "torch.load(pretrain_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/modeling/backbone/xception.py": {
        "torch": {
            "pad_13": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_beg, pad_end, pad_beg, pad_end)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_288": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.rep",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*rep",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/modeling/decoder.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "low_level_inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.last_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(304, 256, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=low_level_feat.size()[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, low_level_feat), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_conv(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "low_level_feat.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, low_level_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "304",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/modeling/deeplab.py": {
        "torch": {
            "rand_79": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "513",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/modeling/sync_batchnorm/batchnorm.py": {
        "torch": {
            "batch_norm_51": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/modeling/sync_batchnorm/replicate.py": {
        "torch": {}
    },
    "models/modeling/sync_batchnorm/unittest.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "set_device_31": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['random_seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['random_seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_all_50": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['random_seed']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "stack_308": {
                "variable": {
                    "value": "val_img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "val_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(val_img, 0)",
                            "Call"
                        ],
                        [
                            "make_grid(val_img.cpu(), nrow=val_img.size(0) // len(val_visual), padding=5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_151": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "F.pad(data, pad=(0, pad_w, 0, pad_h), mode='reflect')",
                            "Call"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_157": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "output[:, :, :H, :W]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/helpers.py": {
        "torch": {}
    },
    "utils/losses.py": {
        "torch": {
            "softmax_98": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(inputs, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_115": {
                "variable": {
                    "value": "input_log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(inputs, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_135": {
                "variable": {
                    "value": "kl1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(inputs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.softmax(inputs, dim=1) + targets) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_136": {
                "variable": {
                    "value": "kl2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(targets + epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F.softmax(inputs, dim=1) + targets) * 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_152": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unsup_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(unsup_outputs)",
                            "Call"
                        ],
                        [
                            "unsup_outputs[torch.randperm(unsup_outputs.size(0))]",
                            "Subscript"
                        ],
                        [
                            "unsup_outputs[:nbr_of_pairs]",
                            "Subscript"
                        ],
                        [
                            "unsup_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_31": {
                "input": {
                    "value": "input_logits / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "target_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_targets",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ignore_index",
                            "Method Argument"
                        ],
                        [
                            "ignore_index",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_62": {
                "variable": {
                    "value": "prob_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict[target_mask]",
                            "Subscript"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_76": {
                "variable": {
                    "value": "loss_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict[target_mask]",
                            "Subscript"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[target_mask]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.to(predict.device) if self.weight is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ignore_index",
                            "Method Argument"
                        ],
                        [
                            "ignore_index",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_103": {
                "variable": {
                    "value": "loss_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(inputs, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_120": {
                "variable": {
                    "value": "loss_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_log_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(inputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "unsup_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "unsup_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(unsup_outputs)",
                            "Call"
                        ],
                        [
                            "unsup_outputs[torch.randperm(unsup_outputs.size(0))]",
                            "Subscript"
                        ],
                        [
                            "unsup_outputs[:nbr_of_pairs]",
                            "Subscript"
                        ],
                        [
                            "unsup_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_154": {
                "variable": {
                    "value": "temp[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u in enumerate(unsup_outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_190": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict[target_mask]",
                            "Subscript"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[target_mask]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "self.size_average",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "loss_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mse_loss_109": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(inputs, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "loss_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "kl_div_126": {
                "input": {
                    "value": "input_log_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(inputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(targets, dim=1)",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_135": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(inputs, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_136": {
                "input": {
                    "value": "targets + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randperm_149": {
                "n": {
                    "value": "unsup_outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(inputs, dim=1)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/lr_scheduler.py": {
        "torch": {}
    },
    "utils/metrics.py": {
        "torch": {
            "max_45": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(output)",
                            "Call"
                        ],
                        [
                            "np.asarray(output) + 1",
                            "BinOp"
                        ],
                        [
                            "output * (target > 0)",
                            "BinOp"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_60": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(output)",
                            "Call"
                        ],
                        [
                            "np.asarray(output) + 1",
                            "BinOp"
                        ],
                        [
                            "output * (target > 0)",
                            "BinOp"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histc_67": {
                "variable": {
                    "value": "area_inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersection.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_class",
                            "Method Argument"
                        ],
                        [
                            "num_class",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_class",
                            "Method Argument"
                        ],
                        [
                            "num_class",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histc_68": {
                "variable": {
                    "value": "area_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_class",
                            "Method Argument"
                        ],
                        [
                            "num_class",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_class",
                            "Method Argument"
                        ],
                        [
                            "num_class",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histc_69": {
                "variable": {
                    "value": "area_lab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_class",
                            "Method Argument"
                        ],
                        [
                            "num_class",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_class",
                            "Method Argument"
                        ],
                        [
                            "num_class",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}