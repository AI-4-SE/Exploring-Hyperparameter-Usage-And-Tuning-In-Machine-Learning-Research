{
    "hotr/data/datasets/__init__.py": {
        "torch": {}
    },
    "hotr/data/datasets/coco.py": {
        "torch": {
            "as_tensor_38": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coco_mask.decode(rles)",
                            "Call"
                        ],
                        [
                            "mask[..., None]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(mask, dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "mask.any(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_42": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.zeros((0, height, width), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "convert_coco_poly_to_mask(segmentations, h, w)",
                            "Call"
                        ],
                        [
                            "masks[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "variable": {
                    "value": "image_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[image_id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_64": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes, dtype=torch.float32).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "boxes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "classes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "iscrowd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['iscrowd'] if 'iscrowd' in obj else 0 for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_107": {
                "variable": {
                    "value": "target[orig_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(h), int(w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_108": {
                "variable": {
                    "value": "target[size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(h), int(w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_79": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "[obj['keypoints'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "keypoints.view(num_keypoints, -1, 3)",
                            "Call"
                        ],
                        [
                            "keypoints[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/data/datasets/hico.py": {
        "torch": {
            "as_tensor_87": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in img_anno['annotations']]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes, dtype=torch.float32).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "boxes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(i, self._valid_obj_ids.index(obj['category_id'])) for (i, obj) in enumerate(img_anno['annotations'])]",
                            "ListComp"
                        ],
                        [
                            "[self._valid_obj_ids.index(obj['category_id']) for obj in img_anno['annotations']]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "classes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_97": {
                "variable": {
                    "value": "target[orig_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(h), int(w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_98": {
                "variable": {
                    "value": "target[size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(h), int(w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "target[iscrowd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[0 for _ in range(boxes.shape[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_157": {
                "variable": {
                    "value": "target[hois]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "hois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "img_anno['hoi_annotation']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "target[pair_targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "target[pair_actions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, len(self._valid_verb_ids))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "target[sub_boxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "target[obj_boxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_142": {
                "variable": {
                    "value": "target[pair_targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_143": {
                "variable": {
                    "value": "target[pair_actions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "verb_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "target[sub_boxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sub_boxes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_145": {
                "variable": {
                    "value": "target[obj_boxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_boxes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/data/datasets/vcoco.py": {
        "torch": {
            "as_tensor_330": {
                "variable": {
                    "value": "target[orig_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(h), int(w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_331": {
                "variable": {
                    "value": "target[size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(h), int(w)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_380": {
                "data": {
                    "value": "[img_idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_381": {
                "data": {
                    "value": "inst_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((num_ann, 4), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_382": {
                "data": {
                    "value": "inst_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "data": {
                    "value": "inst_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_384": {
                "data": {
                    "value": "pair_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((0, 8), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate([pair_bbox, np.expand_dims(box, axis=0)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_385": {
                "data": {
                    "value": "pair_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_386": {
                "data": {
                    "value": "pair_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/data/evaluators/coco_eval.py": {
        "torch": {
            "stack_166": {
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin, ymax - ymin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/data/evaluators/vcoco_eval.py": {
        "torch": {}
    },
    "hotr/data/transforms/transforms.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "target[size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_24": {
                "variable": {
                    "value": "max_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "variable": {
                    "value": "target[size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "variable": {
                    "value": "target[size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "padded_image[::-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_33": {
                "variable": {
                    "value": "cropped_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_boxes.reshape(-1, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_50": {
                "variable": {
                    "value": "cropped_hboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_hboxes.reshape(-1, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "cropped_pair_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hboxes, oboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "all_106": {
                "variable": {
                    "value": "keep_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_hboxes[:, 1, :] > cropped_hboxes[:, 0, :]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_107": {
                "variable": {
                    "value": "keep_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_oboxes[:, 1, :] > cropped_oboxes[:, 0, :]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_108": {
                "variable": {
                    "value": "not_empty_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target['pair_boxes'][:, 4:] >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "pair_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hboxes, oboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "target[pair_boxes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hboxes, oboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_234": {
                "variable": {
                    "value": "target[masks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "target['masks']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, padding[0], 0, padding[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_57": {
                "variable": {
                    "value": "cropped_oboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_oboxes.reshape(-1, 2, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_78": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped_boxes[:, 1, :] > cropped_boxes[:, 0, :]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_360": {
                "variable": {
                    "value": "pair_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hboxes, oboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "as_tensor_32": {
                "data": {
                    "value": "[j, i, j, i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_49": {
                "data": {
                    "value": "[j, i, j, i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_127": {
                "data": {
                    "value": "[-1, 1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_136": {
                "data": {
                    "value": "[-1, 1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_194": {
                "data": {
                    "value": "[ratio_width, ratio_height, ratio_width, ratio_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_199": {
                "data": {
                    "value": "[ratio_width, ratio_height, ratio_width, ratio_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_56": {
                "data": {
                    "value": "[j, i, j, i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_141": {
                "data": {
                    "value": "[-1, 1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_205": {
                "data": {
                    "value": "[ratio_width, ratio_height, ratio_width, ratio_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_346": {
                "data": {
                    "value": "[w, h, w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_352": {
                "data": {
                    "value": "[w, h, w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_358": {
                "data": {
                    "value": "[w, h, w, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/engine/evaluator_coco.py": {
        "torch": {
            "no_grad_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_41": {
                "variable": {
                    "value": "orig_target_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['orig_size'] for t in targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/engine/evaluator_hico.py": {
        "torch": {
            "no_grad_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "orig_target_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['orig_size'] for t in targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/engine/evaluator_vcoco.py": {
        "torch": {
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_40": {
                "variable": {
                    "value": "orig_target_sizes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['orig_size'] for t in targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/engine/trainer.py": {
        "torch": {
            "clip_grad_norm__55": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/metrics/utils.py": {
        "torch": {
            "min_13": {
                "input": {
                    "value": "a[:, 2].unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_13": {
                "input": {
                    "value": "a[:, 0].unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_14": {
                "input": {
                    "value": "a[:, 3].unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_14": {
                "input": {
                    "value": "a[:, 1].unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "input": {
                    "value": "(a[:, 2] - a[:, 0] + 1) * (a[:, 3] - a[:, 1] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/metrics/vcoco/ap_role.py": {
        "torch": {}
    },
    "hotr/models/backbone.py": {
        "torch": {
            "ones_29": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_32": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_77": {
                "input": {
                    "value": "m[None].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "x.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/models/criterion.py": {
        "torch": {
            "ones_59": {
                "variable": {
                    "value": "empty_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "target_classes_o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['labels'][J] for (t, (_, J)) in zip(targets, indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_75": {
                "variable": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "src_logits.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_78": {
                "variable": {
                    "value": "loss_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_logits.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full(src_logits.shape[:2], self.num_classes, dtype=torch.int64, device=src_logits.device)",
                            "Call"
                        ],
                        [
                            "torch.full(src_actions.shape, 0, dtype=torch.float32, device=src_actions.device)",
                            "Call"
                        ],
                        [
                            "torch.full(src_logits.shape[:2], pad_tgt, dtype=torch.int64, device=src_logits.device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.empty_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_93": {
                "variable": {
                    "value": "tgt_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(v['labels']) for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "l1_loss_96": {
                "variable": {
                    "value": "card_err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "card_pred.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "tgt_lengths.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['boxes'][i] for (t, (_, i)) in zip(targets, indices)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_110": {
                "variable": {
                    "value": "loss_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_boxes'][idx]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([t['boxes'][i] for (t, (_, i)) in zip(targets, indices)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "full_134": {
                "variable": {
                    "value": "target_hidx_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "src_hidx.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_hidx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_135": {
                "variable": {
                    "value": "target_oidx_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "src_oidx.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_oidx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "target_classes_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['h_labels'][J] for (t, (_, J)) in zip(targets, hoi_indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "target_classes_o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['o_labels'][J] for (t, (_, J)) in zip(targets, hoi_indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cross_entropy_145": {
                "variable": {
                    "value": "loss_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_hidx.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_hidx_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full(src_hidx.shape[:2], -1, dtype=torch.int64, device=src_hidx.device)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_146": {
                "variable": {
                    "value": "loss_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_oidx.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_oidx_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full(src_oidx.shape[:2], -1, dtype=torch.int64, device=src_oidx.device)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "target_classes_o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['pair_actions'][J] for (t, (_, J)) in zip(targets, hoi_indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_160": {
                "variable": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "src_actions.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_actions.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_163": {
                "variable": {
                    "value": "pos_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "target_classes[idx].shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_actions.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_170": {
                "variable": {
                    "value": "loss_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[..., self.valid_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "target_classes[..., self.valid_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "target_classes_o",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t['pair_targets'][J] for (t, (_, J)) in zip(targets, hoi_indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_190": {
                "variable": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "src_logits.shape[:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "pad_tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_logits.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_193": {
                "variable": {
                    "value": "loss_obj_ce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_logits.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full(src_logits.shape[:2], self.num_classes, dtype=torch.int64, device=src_logits.device)",
                            "Call"
                        ],
                        [
                            "torch.full(src_actions.shape, 0, dtype=torch.float32, device=src_actions.device)",
                            "Call"
                        ],
                        [
                            "torch.full(src_logits.shape[:2], pad_tgt, dtype=torch.int64, device=src_logits.device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.tgt_empty_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(src, i) for (i, (src, _)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "src_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[src for (src, _) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "batch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.full_like(tgt, i) for (i, (_, tgt)) in enumerate(indices)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "tgt_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt for (_, tgt) in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_253": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[num_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(iter(outputs.values())).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_256": {
                "variable": {
                    "value": "num_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_boxes / get_world_size()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_115": {
                "input": {
                    "value": "box_ops.generalized_box_iou(box_ops.box_cxcywh_to_xyxy(src_boxes), box_ops.box_cxcywh_to_xyxy(target_boxes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_54": {
                "variable": {
                    "value": "tgt_empty_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_tgt_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_like_204": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_like_210": {
                "input": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/models/detr.py": {
        "torch": {
            "device_90": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.class_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_45": {
                "variable": {
                    "value": "self.query_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_queries",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.input_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "backbone.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer.d_model",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/models/detr_matcher.py": {
        "torch": {
            "cat_57": {
                "variable": {
                    "value": "tgt_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['labels'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "tgt_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v['boxes'] for v in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cdist_66": {
                "variable": {
                    "value": "cost_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "out_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_boxes'].flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "tgt_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([v['boxes'] for v in targets])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_77": {
                "data": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/models/feed_forward.py": {
        "torch": {
            "ModuleList_11": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Linear(n, k) for (n, k) in zip([input_dim] + h, h + [output_dim]))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_15": {
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/models/hotr.py": {
        "torch": {
            "Embedding_39": {
                "variable": {
                    "value": "self.query_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_queries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "detr.transformer.d_model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.action_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "detr.transformer.d_model",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_actions + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_81": {
                "variable": {
                    "value": "inst_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_95": {
                "variable": {
                    "value": "H_Pointer_reprs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.H_Pointer_embed(interaction_hs)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_96": {
                "variable": {
                    "value": "O_Pointer_reprs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.O_Pointer_embed(interaction_hs)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_97": {
                "input": {
                    "value": "H_Pointer_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "inst_repr.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_98": {
                "input": {
                    "value": "O_Pointer_repr",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "inst_repr.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_111": {
                "tensors": {
                    "value": "[detr_logits[batch_, o_idx, :] for (batch_, o_idx) in enumerate(o_indice)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/models/hotr_matcher.py": {
        "torch": {
            "unique_40": {
                "variable": {
                    "value": "(tgt_bbox_unique, map_idx, idx_cnt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[batch_idx]['boxes']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "bbox_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bbox_lst",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "variable": {
                    "value": "k_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "k_lst",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "obox_with_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt_obox, tgt_tgt.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "bbox_with_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt_bbox, tgt_cls.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "bbox_with_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bbox_with_cls, torch.as_tensor([-1.0] * 5).unsqueeze(0).to(tgt_cls.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_111": {
                "variable": {
                    "value": "cost_hbox",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "hbox_with_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tgt_hbox, torch.ones((tgt_hbox.shape[0], 1)).to(tgt_hbox.device)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([tgt_hbox, torch.zeros((tgt_hbox.shape[0], 1)).to(tgt_hbox.device)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "bbox_with_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tgt_bbox, tgt_cls.unsqueeze(-1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((bbox_with_cls, torch.as_tensor([-1.0] * 5).unsqueeze(0).to(tgt_cls.device)), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_112": {
                "variable": {
                    "value": "cost_obox",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "obox_with_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tgt_obox, tgt_tgt.unsqueeze(-1)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "bbox_with_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tgt_bbox, tgt_cls.unsqueeze(-1)], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((bbox_with_cls, torch.as_tensor([-1.0] * 5).unsqueeze(0).to(tgt_cls.device)), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_115": {
                "variable": {
                    "value": "h_match_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost_hbox == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_116": {
                "variable": {
                    "value": "o_match_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cost_obox == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "tgt_hids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tgt_hids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(tgt_hids)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_155": {
                "variable": {
                    "value": "tgt_oids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tgt_oids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(tgt_oids)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_164": {
                "variable": {
                    "value": "tgt_act",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt_act, torch.zeros(tgt_act.shape[0]).unsqueeze(-1).to(tgt_act.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_195": {
                "variable": {
                    "value": "log_dict[h_cost]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_dict['h_cost']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_195": {
                "variable": {
                    "value": "log_dict[h_cost]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "log_dict[o_cost]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_dict['o_cost']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_196": {
                "variable": {
                    "value": "log_dict[o_cost]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_197": {
                "variable": {
                    "value": "log_dict[act_cost]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_dict['act_cost']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_197": {
                "variable": {
                    "value": "log_dict[act_cost]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "hbox_with_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt_hbox, torch.ones((tgt_hbox.shape[0], 1)).to(tgt_hbox.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "tgt_act",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, tgt_act.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "targets[batch_idx][pair_actions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, targets[batch_idx]['pair_actions'].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_198": {
                "variable": {
                    "value": "log_dict[tgt_cost]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_dict['tgt_cost']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_198": {
                "variable": {
                    "value": "log_dict[tgt_cost]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "hbox_with_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt_hbox, torch.zeros((tgt_hbox.shape[0], 1)).to(tgt_hbox.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "tgt_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[pad_tgt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "variable": {
                    "value": "targets[batch_idx][pair_targets]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[pad_tgt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_170": {
                "input": {
                    "value": "out_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_actions'][batch_idx].clone()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "(~tgt_act.bool()).type(torch.int64).t().float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_109": {
                "data": {
                    "value": "[-1.0] * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_109": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_139": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_140": {
                "data": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_164": {
                "*size": {
                    "value": "tgt_act.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_164": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "input": {
                    "value": "out_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs['pred_actions'][batch_idx].clone()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tgt_act.t().float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_200": {
                "data": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_101": {
                "*size": {
                    "value": "(tgt_hbox.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "(tgt_hbox.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/models/position_encoding.py": {
        "torch": {
            "arange_40": {
                "variable": {
                    "value": "dim_t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, :, :, 0::2].sin(), pos_x[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_45": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y[:, :, :, 0::2].sin(), pos_y[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_46": {
                "variable": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y, pos_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_47": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "self.row_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_pos_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_58": {
                "variable": {
                    "value": "self.col_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_pos_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_68": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_69": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_emb.unsqueeze(0).repeat(h, 1, 1), y_emb.unsqueeze(1).repeat(1, w, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_72": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/models/post_process.py": {
        "torch": {
            "softmax_32": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_37": {
                "variable": {
                    "value": "scale_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_w, img_h, img_w, img_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "pair_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['pred_actions']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_50": {
                "variable": {
                    "value": "h_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['pred_hidx']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_53": {
                "variable": {
                    "value": "o_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs['pred_oidx']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "o_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o_inds, torch.ones(1).type(torch.bool).to(o_inds.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "o_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o_box, torch.Tensor([0, 0, 0, 0]).unsqueeze(0).to(o_box.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_act, K, K + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "sorted_score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_act, K, K + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "id_score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(K, K + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_121": {
                "variable": {
                    "value": "(obj_scores, obj_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "h_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_hrepr",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "variable": {
                    "value": "o_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_orepr",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "sub_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sub_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(sub_boxes, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "obj_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "obj_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(obj_boxes, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_142": {
                "variable": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ol",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sl, ol)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sb, ob)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_147": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "b.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "input": {
                    "value": "out_obj_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/models/transformer.py": {
        "torch": {
            "LayerNorm_38": {
                "variable": {
                    "value": "decoder_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_embed.unsqueeze(1).repeat(1, bs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiheadAttention_136": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_139": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_142": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_143": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_144": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_145": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_196": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_197": {
                "variable": {
                    "value": "self.multihead_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_203": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_204": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_205": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_206": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_207": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_208": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_277": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_33": {
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_126": {
                "tensors": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "hotr/util/box_ops.py": {
        "torch": {
            "max_28": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_29": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_53": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_72": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_cxcywh_to_xyxy(h_bbox)",
                            "Call"
                        ],
                        [
                            "h * torch.tensor([img_w, img_h, img_w, img_h], dtype=torch.float32).to(h_bbox.get_device())",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_74": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, h, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, w, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_108": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, o]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_13": {
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_c - 0.5 * w, y_c - 0.5 * h, x_c + 0.5 * w, y_c + 0.5 * h]",
                            "List"
                        ],
                        [
                            "[(x0 + x1) / 2, (y0 + y1) / 2, x1 - x0, y1 - y0]",
                            "List"
                        ],
                        [
                            "box_cxcywh_to_xyxy(out_bbox)",
                            "Call"
                        ],
                        [
                            "b * torch.tensor([img_w, img_h, img_w, img_h], dtype=torch.float32).to(out_bbox.get_device())",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_20": {
                "tensors": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_c - 0.5 * w, y_c - 0.5 * h, x_c + 0.5 * w, y_c + 0.5 * h]",
                            "List"
                        ],
                        [
                            "[(x0 + x1) / 2, (y0 + y1) / 2, x1 - x0, y1 - y0]",
                            "List"
                        ],
                        [
                            "box_cxcywh_to_xyxy(out_bbox)",
                            "Call"
                        ],
                        [
                            "b * torch.tensor([img_w, img_h, img_w, img_h], dtype=torch.float32).to(out_bbox.get_device())",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_84": {
                "tensors": {
                    "value": "[x_min, y_min, x_max, y_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "(0, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "masks.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "[img_w, img_h, img_w, img_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "[img_w, img_h, img_w, img_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "data": {
                    "value": "[img_w, img_h, img_w, img_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hotr/util/logger.py": {
        "torch": {
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "hotr/util/misc.py": {
        "torch": {
            "tensor_109": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_122": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(tensor_list)] + max_size",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_207": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_device_298": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_280": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_120": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_312": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_336": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_count_290": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchSampler_85": {
                "variable": {
                    "value": "batch_sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset_train, shuffle=True)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "data_loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='train', args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "batch_sampler_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.BatchSampler(sampler_train, args.batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "data_loader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='val' if not args.eval else 'test', args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(dataset_val, shuffle=False)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_val)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamW_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_dicts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in model_without_ddp.named_parameters() if 'backbone' not in n and p.requires_grad]}, {'params': [p for (n, p) in model_without_ddp.named_parameters() if 'backbone' in n and p.requires_grad], 'lr': args.lr_backbone}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_111": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.AdamW(param_dicts, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.lr_drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.seed + utils.get_rank()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DistributedSampler_79": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='train', args=args)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_80": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='val' if not args.eval else 'test', args=args)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RandomSampler_82": {
                "variable": {
                    "value": "sampler_train",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='train', args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_83": {
                "variable": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_dataset(image_set='val' if not args.eval else 'test', args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_99": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_119": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.frozen_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_127": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}