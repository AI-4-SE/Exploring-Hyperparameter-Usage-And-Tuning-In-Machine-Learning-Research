{
    "experiments/EntEval/enteval/et.py": {
        "sklearn": {
            "precision_score_205": {
                "variable": {
                    "value": "prec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "devy",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_outputs, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_score_206": {
                "variable": {
                    "value": "recall",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "devy",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_outputs, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_207": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "devy",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_outputs, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Embedding_129": {
                "variable": {
                    "value": "self.labelembed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(label2id)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ultra_embed['train']['X'].shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_133": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x * embeddings",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_153": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_157": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_160": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "variable": {
                    "value": "Xbatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Xbatch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "devX[i:i + self.batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(Xbatch).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X[idx]).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_192": {
                "variable": {
                    "value": "labelbatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labelbatch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "devlabels[i:i + self.batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(labelbatch).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels[idx]).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_193": {
                "variable": {
                    "value": "ybatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ybatch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "devy[i:i + self.batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(ybatch).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y[idx]).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_195": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model(Xbatch, labelbatch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_221": {
                "variable": {
                    "value": "Xbatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_222": {
                "variable": {
                    "value": "labelbatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "variable": {
                    "value": "ybatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/EntEval/enteval/tools/classifier.py": {
        "sklearn": {
            "confusion_matrix_149": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "golden_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "devy.data.cpu().numpy().reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "all_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_preds, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_56": {
                "variable": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(trainX).to(device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "trainy",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trainy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(trainy).to(device, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "variable": {
                    "value": "devX",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "devX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(devX).to(device, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(devX).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(devX).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "devy",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "devy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(devy).to(device, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(devy).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_234": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_445": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_456": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inputdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_457": {
                "variable": {
                    "value": "self.softmask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_types)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_477": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inputdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_478": {
                "variable": {
                    "value": "self.hardmask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hardmask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_529": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_541": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_types + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "inputdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "n_types",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_542": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inputdim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_543": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_544": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_545": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_551": {
                "variable": {
                    "value": "n_type1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc1 != self.n_types",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_552": {
                "variable": {
                    "value": "n_type2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "enc2 != self.n_types",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_557": {
                "variable": {
                    "value": "final_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(type_emb1, type_emb2, type_emb1 * type_emb2, torch.abs(type_emb1 - type_emb2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_598": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_609": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inputdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclasses",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_610": {
                "variable": {
                    "value": "self.layer_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(n_layers) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1111",
                            "MethodArgument"
                        ],
                        [
                            "1111",
                            "MethodArgument"
                        ],
                        [
                            "1111",
                            "MethodArgument"
                        ],
                        [
                            "1111",
                            "MethodArgument"
                        ],
                        [
                            "1111",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1111",
                            "MethodArgument"
                        ],
                        [
                            "1111",
                            "MethodArgument"
                        ],
                        [
                            "1111",
                            "MethodArgument"
                        ],
                        [
                            "1111",
                            "MethodArgument"
                        ],
                        [
                            "1111",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, self.nclasses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_518": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, self.nclasses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_522": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, params['nhid'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_54": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "permutation[i:i + self.batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_179": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model(Xbatch).data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_227": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, params['nhid'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_457": {
                "*size": {
                    "value": "n_types",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "*size": {
                    "value": "n_types",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_459": {
                "ndarray": {
                    "value": "seed_types",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_555": {
                "input": {
                    "value": "type_emb1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(enc1)",
                            "Call"
                        ],
                        [
                            "torch.sum(type_emb1, dim=1) / n_type1.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_556": {
                "input": {
                    "value": "type_emb2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embedding(enc2)",
                            "Call"
                        ],
                        [
                            "torch.sum(type_emb2, dim=1) / n_type2.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_559": {
                "input": {
                    "value": "type_emb1 - type_emb2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_610": {
                "*size": {
                    "value": "n_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "13",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_144": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nclasses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_519": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nclasses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_523": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params['nhid']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_524": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_526": {
                "in_features": {
                    "value": "params['nhid']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nclasses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params['nhid']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_229": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_231": {
                "in_features": {
                    "value": "params['nhid']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nclasses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_144": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(Xbatch)",
                            "Call"
                        ],
                        [
                            "self.model(Xbatch)",
                            "Call"
                        ],
                        [
                            "self.model(Xbatch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/EntEval/enteval/tools/validation.py": {
        "sklearn": {
            "StratifiedKFold_67": {
                "variable": {
                    "value": "skf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StratifiedKFold_68": {
                "variable": {
                    "value": "innerskf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1111",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StratifiedKFold_136": {
                "variable": {
                    "value": "skf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_237": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_326": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_406": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "opt_l2reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_482": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_549": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_178": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_248": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_343": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_419": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "opt_l2reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_560": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_104": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "optreg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ],
                        [
                            "regs[np.argmax(scores)]",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_227": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_316": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_472": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_539": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_156": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_393": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "l2reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "l2regs",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogisticRegression_88": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ],
                        [
                            "regs",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "save_257": {
                "obj": {
                    "value": "clf.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_to",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config['saveout'] if 'saveout' in self.config else '/dccstor/redrug_ier/diego/redrug-ier/experiments/ehr_baselines/model_out/wlned_baseline_' + time.strftime('_%Y-%m-%d_%H:%M:%S', time.localtime()) + '.model'",
                            "IfExp"
                        ],
                        [
                            "'/scratch/cluster/yasumasa/entity/data/EntEval/models/' + self.file_header + time.strftime('_%Y-%m-%d_%H:%M:%S', time.localtime()) + '.model'",
                            "BinOp"
                        ],
                        [
                            "'/scratch/cluster/yasumasa/entity/data/EntEval/models/' + self.file_header + time.strftime('_%Y-%m-%d_%H:%M:%S', time.localtime()) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_352": {
                "obj": {
                    "value": "clf.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_to",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config['saveout'] if 'saveout' in self.config else '/dccstor/redrug_ier/diego/redrug-ier/experiments/ehr_baselines/model_out/wlned_baseline_' + time.strftime('_%Y-%m-%d_%H:%M:%S', time.localtime()) + '.model'",
                            "IfExp"
                        ],
                        [
                            "'/scratch/cluster/yasumasa/entity/data/EntEval/models/' + self.file_header + time.strftime('_%Y-%m-%d_%H:%M:%S', time.localtime()) + '.model'",
                            "BinOp"
                        ],
                        [
                            "'/scratch/cluster/yasumasa/entity/data/EntEval/models/' + self.file_header + time.strftime('_%Y-%m-%d_%H:%M:%S', time.localtime()) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_427": {
                "obj": {
                    "value": "clf.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_to",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config['saveout'] if 'saveout' in self.config else '/dccstor/redrug_ier/diego/redrug-ier/experiments/ehr_baselines/model_out/wlned_baseline_' + time.strftime('_%Y-%m-%d_%H:%M:%S', time.localtime()) + '.model'",
                            "IfExp"
                        ],
                        [
                            "'/scratch/cluster/yasumasa/entity/data/EntEval/models/' + self.file_header + time.strftime('_%Y-%m-%d_%H:%M:%S', time.localtime()) + '.model'",
                            "BinOp"
                        ],
                        [
                            "'/scratch/cluster/yasumasa/entity/data/EntEval/models/' + self.file_header + time.strftime('_%Y-%m-%d_%H:%M:%S', time.localtime()) + '.model'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/EntEval/enteval/tools/multiclassclassifier.py": {
        "torch": {
            "from_numpy_54": {
                "variable": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(trainX).to(device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "trainy",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trainy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(trainy).to(device, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "devX",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "devX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(devX).to(device, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(devX).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(devX).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "devy",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "devy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(devy).to(device, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(devy).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_217": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1111",
                            "MethodArgument"
                        ],
                        [
                            "1111",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_31": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1111",
                            "MethodArgument"
                        ],
                        [
                            "1111",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_206": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, params['nhid'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_52": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "permutation[i:i + self.batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_171": {
                "variable": {
                    "value": "vals",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_211": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params['nhid']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_212": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_214": {
                "in_features": {
                    "value": "params['nhid']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/EntEval/enteval/tools/ranking.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.imgproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.imgdim, self.projdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.sentproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.sentdim, self.projdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "anchor1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgproj * sentproj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_59": {
                "variable": {
                    "value": "anchor2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentproj * imgproj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "img_sentc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgproj * sentcproj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "sent_imgc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentproj * imgcproj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "cost_sent",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - anchor1 + img_sentc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "cost_sent",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_89": {
                "variable": {
                    "value": "cost_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - anchor2 + sent_imgc",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_89": {
                "variable": {
                    "value": "cost_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_124": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_101": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_102": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "self.imgdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.projdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "self.sentdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.projdim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_49": {
                "input": {
                    "value": "torch.pow(imgproj, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_51": {
                "input": {
                    "value": "torch.pow(imgcproj, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_53": {
                "input": {
                    "value": "torch.pow(sentproj, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_55": {
                "input": {
                    "value": "torch.pow(sentcproj, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_68": {
                "input": {
                    "value": "torch.pow(output, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_73": {
                "input": {
                    "value": "torch.pow(output, 2).sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_301": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sent_embed[5 * index:5 * index + 5]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ims.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_340": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_img.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "sent_embed.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_287": {
                "tensors": {
                    "value": "img_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(img_embed, 0).data",
                            "Attribute"
                        ],
                        [
                            "torch.cat(img_embed, 0).data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_288": {
                "tensors": {
                    "value": "sent_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(sent_embed, 0).data",
                            "Attribute"
                        ],
                        [
                            "torch.cat(sent_embed, 0).data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "tensors": {
                    "value": "img_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(img_embed, 0).data",
                            "Attribute"
                        ],
                        [
                            "torch.cat(img_embed, 0).data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "tensors": {
                    "value": "sent_embed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(sent_embed, 0).data",
                            "Attribute"
                        ],
                        [
                            "torch.cat(sent_embed, 0).data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_49": {
                "input": {
                    "value": "imgproj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.imgproj(img)",
                            "Call"
                        ],
                        [
                            "imgproj / torch.sqrt(torch.pow(imgproj, 2).sum(1, keepdim=True)).expand_as(imgproj)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_51": {
                "input": {
                    "value": "imgcproj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.imgproj(imgc)",
                            "Call"
                        ],
                        [
                            "imgcproj / torch.sqrt(torch.pow(imgcproj, 2).sum(1, keepdim=True)).expand_as(imgcproj)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_51": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_53": {
                "input": {
                    "value": "sentproj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.sentproj(sent)",
                            "Call"
                        ],
                        [
                            "sentproj / torch.sqrt(torch.pow(sentproj, 2).sum(1, keepdim=True)).expand_as(sentproj)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_55": {
                "input": {
                    "value": "sentcproj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.sentproj(sentc)",
                            "Call"
                        ],
                        [
                            "sentcproj / torch.sqrt(torch.pow(sentcproj, 2).sum(1, keepdim=True)).expand_as(sentcproj)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_68": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.sentproj(sent)",
                            "Call"
                        ],
                        [
                            "output / torch.sqrt(torch.pow(output, 2).sum(1, keepdim=True)).expand_as(output)",
                            "BinOp"
                        ],
                        [
                            "self.imgproj(img)",
                            "Call"
                        ],
                        [
                            "output / torch.sqrt(torch.pow(output, 2).sum(1, keepdim=True)).expand_as(output)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_73": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.sentproj(sent)",
                            "Call"
                        ],
                        [
                            "output / torch.sqrt(torch.pow(output, 2).sum(1, keepdim=True)).expand_as(output)",
                            "BinOp"
                        ],
                        [
                            "self.imgproj(img)",
                            "Call"
                        ],
                        [
                            "output / torch.sqrt(torch.pow(output, 2).sum(1, keepdim=True)).expand_as(output)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_73": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/EntEval/enteval/tools/relatedness.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.inputdim, self.nclasses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_49": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.l2reg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trainX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(trainX).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "trainy",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "trainy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(trainy).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_63": {
                "variable": {
                    "value": "devX",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "devX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(devX).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "devy",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "devy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(devy).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "testX",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "testX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(testX).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "testY",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "testy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "self.inputdim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nclasses",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_47": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "permutation[i:i + self.batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/EntEval/enteval/utils.py": {
        "torch": {}
    },
    "experiments/ehr_baselines/bert_baseline.py": {
        "torch": {
            "zeros_233": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(tokenized_batch)",
                            "Call"
                        ],
                        [
                            "len(tokenized_batch)",
                            "Call"
                        ],
                        [
                            "len(tokenized_batch)",
                            "Call"
                        ],
                        [
                            "len(tokenized_batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max([len(sent) for sent in tokenized_batch])",
                            "Call"
                        ],
                        [
                            "max([len(sent) for sent in tokenized_batch])",
                            "Call"
                        ],
                        [
                            "max([len(sent) for sent in tokenized_batch])",
                            "Call"
                        ],
                        [
                            "max([len(sent) for sent in tokenized_batch])",
                            "Call"
                        ],
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_274": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(tokenized_batch)",
                            "Call"
                        ],
                        [
                            "len(tokenized_batch)",
                            "Call"
                        ],
                        [
                            "len(tokenized_batch)",
                            "Call"
                        ],
                        [
                            "len(tokenized_batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max([len(sent) for sent in tokenized_batch])",
                            "Call"
                        ],
                        [
                            "max([len(sent) for sent in tokenized_batch])",
                            "Call"
                        ],
                        [
                            "max([len(sent) for sent in tokenized_batch])",
                            "Call"
                        ],
                        [
                            "max([len(sent) for sent in tokenized_batch])",
                            "Call"
                        ],
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                }
            },
            "from_numpy_384": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bert_tokenizer.batch_encode_plus(input, add_special_tokens=False)",
                            "Call"
                        ],
                        [
                            "np.array(input_ids['input_ids'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input_ids).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_506": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_393": {
                "variable": {
                    "value": "averaged_hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_hidden_states[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_446": {
                "input": {
                    "value": "mask_ctx",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_454": {
                "input": {
                    "value": "mask_desc",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/ned_dot.py": {
        "torch": {
            "device_575": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_412": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[indexed_tokens]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_446": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[indexed_tokens]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/transformer_data_utils_eval.py": {
        "torch": {
            "device_870": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros([bsz, answer_num], np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targets)",
                            "Call"
                        ],
                        [
                            "np.zeros([bsz], np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros([bsz], np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_568": {
                "ndarray": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros([bsz, answer_num], np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targets)",
                            "Call"
                        ],
                        [
                            "np.zeros([bsz], np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros([bsz], np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_751": {
                "ndarray": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros([bsz, answer_num], np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targets)",
                            "Call"
                        ],
                        [
                            "np.zeros([bsz], np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros([bsz], np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ier_model/get_prob_transformer_for_analysis.py": {
        "torch": {
            "device_63": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ier_model/models.py": {
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "answer_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_38": {
                "variable": {
                    "value": "self.loss_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_39": {
                "variable": {
                    "value": "self.sigmoid_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ier_model/run_et.py": {
        "torch": {
            "Sigmoid_96": {
                "variable": {
                    "value": "SIGMOID",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_241": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{0:s}/{1:s}.pt'.format(save_dir, reload_model_name)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}.pt'.format(save_dir, model_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_102": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_367": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "TransformerModel(args, transformer_constant.ANSWER_NUM_DICT[ind])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_570": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "TransformerModel(args, transformer_constant.ANSWER_NUM_DICT[ind])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_642": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_644": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_645": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_648": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_104": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_647": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_495": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer_cls': optimizer_cls.state_dict(), 'optimizer_enc': optimizer_enc.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{0:s}/{1:s}_{2:d}.pt'.format(transformer_constant.get(args.env, 'EXP_ROOT'), args.model_id, batch_num)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_best.pt'.format(transformer_constant.get(args.env, 'EXP_ROOT'), args.model_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_571": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_480": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer_cls': optimizer_cls.state_dict(), 'optimizer_enc': optimizer_enc.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'{0:s}/{1:s}_{2:d}.pt'.format(transformer_constant.get(args.env, 'EXP_ROOT'), args.model_id, batch_num)",
                            "Call"
                        ],
                        [
                            "'{0:s}/{1:s}_best.pt'.format(transformer_constant.get(args.env, 'EXP_ROOT'), args.model_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_386": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer_cls': optimizer_cls.state_dict(), 'optimizer_enc': optimizer_enc.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0:s}/{1:s}.pt'.format(transformer_constant.get(args.env, 'EXP_ROOT'), args.model_id)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ier_model/transformer_constant.py": {
        "torch": {}
    },
    "ier_model/transformer_data_utils.py": {
        "torch": {
            "device_311": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch['targets'].to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros([bsz, answer_num], np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targets)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}