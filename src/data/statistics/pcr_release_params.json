{
    "compat/DatasetConversion/ConvertCancer.py": {
        "sklearn": {}
    },
    "compat/DatasetConversion/ConvertCars.py": {
        "sklearn": {}
    },
    "compat/DatasetConversion/ConvertCeleb.py": {
        "sklearn": {}
    },
    "compat/PCR_Converter_Advanced.py": {
        "tensorflow": {
            "set_visible_devices_23": {
                "devices": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "disable_eager_execution_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Feature_245": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_249": {
                "float_list": {
                    "value": "tf.train.FloatList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_253": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_257": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Example_268": {
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_277": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_243": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BytesList_245": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_249": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_253": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_jpeg_258": {
                "contents": {
                    "value": "image_string",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "open(filename, 'rb').read()",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_278": {
                "path": {
                    "value": "record_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "record_filepath.as_posix()",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_268": {
                "feature": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'label': _int64_feature(label), 'image_raw': _bytes_feature(image_string)}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/PCR_Converter.py": {
        "tensorflow": {
            "set_visible_devices_23": {
                "devices": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "disable_eager_execution_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Feature_246": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_250": {
                "float_list": {
                    "value": "tf.train.FloatList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_254": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_258": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Example_269": {
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_278": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_244": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BytesList_246": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_250": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_254": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_jpeg_259": {
                "contents": {
                    "value": "image_string",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "open(filename, 'rb').read()",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_279": {
                "path": {
                    "value": "record_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "record_filepath.as_posix()",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_269": {
                "feature": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'label': _int64_feature(label), 'image_raw': _bytes_feature(image_string)}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/imagenet_input.py": {
        "tensorflow": {
            "parse_single_example_42": {
                "variable": {
                    "value": "parsed",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image/encoded': tf.FixedLenFeature((), tf.string, ''), 'image/class/label': tf.FixedLenFeature([], tf.int64, -1)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "empty_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "parse_single_example_91": {
                "variable": {
                    "value": "parsed",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image/encoded': tf.FixedLenFeature((), tf.string, ''), 'image/class/label': tf.FixedLenFeature([], tf.int64, -1)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_jpeg_97": {
                "variable": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_jpeg(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_103": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_jpeg(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_104": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_105": {
                "variable": {
                    "value": "(bbox_begin, bbox_size, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "image_size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "[None, None, None, batch_size]",
                            "List"
                        ],
                        [
                            "[None, None, batch_size, None]",
                            "List"
                        ]
                    ]
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "aspect_ratio_range": {
                    "value": "(0.75, 1.33)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "area_range": {
                    "value": "(0.08, 1.0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_attempts": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unstack_113": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_114": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_115": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_jpeg(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "target_height": {
                    "value": "target_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "target_width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_flip_left_right_118": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "repeat_144": {
                "variable": {
                    "value": "padded_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_dataset_per_shard",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max(1, int(math.ceil(FLAGS.num_eval_images / FLAGS.eval_batch_size) * FLAGS.eval_batch_size / num_hosts))",
                            "Call"
                        ]
                    ]
                }
            },
            "Options_244": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_52": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_jpeg(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_and_crop_jpeg_78": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_jpeg(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_y, offset_x, crop_size, crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(images, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_48": {
                "x": {
                    "value": "tf.reshape(parsed['image/class/label'], [])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_54": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_57": {
                "variable": {
                    "value": "(bbox_begin, bbox_size, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.image.extract_jpeg_shape(image_bytes)",
                    "type": "Call",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "aspect_ratio_range": {
                    "value": "(0.75, 1.33)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "area_range": {
                    "value": "(0.05, 1.0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_attempts": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unstack_65": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_66": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "crop_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_size / (image_size + CROP_PADDING) * tf.cast(tf.minimum(shape[0], shape[1]), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, crop_size, crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_82": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_84": {
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_87": {
                "pred": {
                    "value": "label < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : empty_example",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "preprocess_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_98": {
                "x": {
                    "value": "tf.reshape(parsed['image/class/label'], [])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_bicubic_117": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_120": {
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "print_160": {
                "*inputs": {
                    "value": "Using synthetic data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "print_174": {
                "*inputs": {
                    "value": "p_cached",
                    "type": "str",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "FLAGS.percentage_cached",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_44": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_45": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "parsed['image/class/label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bicubic_80": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FixedLenFeature_93": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_94": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "parsed['image/class/label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_128": {
                "dims": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "[None, None, None, batch_size]",
                            "List"
                        ],
                        [
                            "[None, None, batch_size, None]",
                            "List"
                        ]
                    ]
                }
            },
            "extract_jpeg_shape_58": {
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], [])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_jpeg(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_145": {
                "value": {
                    "value": "tf.train.Example(features=tf.train.Features(feature={'image/class/label': tf.train.Feature(int64_list=tf.train.Int64List(value=[-1])), 'image/encoded': tf.train.Feature(bytes_list=tf.train.BytesList(value=[str.encode('')]))})).SerializeToString()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_239": {
                "a": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "transpose_array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ],
                        [
                            "[1, 2, 0, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_72": {
                "x": {
                    "value": "tf.minimum(shape[0], shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_146": {
                "features": {
                    "value": "tf.train.Features(feature={'image/class/label': tf.train.Feature(int64_list=tf.train.Int64List(value=[-1])), 'image/encoded': tf.train.Feature(bytes_list=tf.train.BytesList(value=[str.encode('')]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "print_181": {
                "*inputs": {
                    "value": "'Partially caching: {}/{} files.'.format(total_cached, len(dataset_files))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "space_to_depth_231": {
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(images, [-1])",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_72": {
                "x": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Features_147": {
                "feature": {
                    "value": "{'image/class/label': tf.train.Feature(int64_list=tf.train.Int64List(value=[-1])), 'image/encoded': tf.train.Feature(bytes_list=tf.train.BytesList(value=[str.encode('')]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_150": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_153": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[str.encode('')])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_151": {
                "value": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_154": {
                "value": {
                    "value": "[str.encode('')]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/imagenet_preprocessing_input.py": {
        "tensorflow": {
            "extract_jpeg_shape_11": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_37": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_y, offset_x, crop_size, crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_13": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_16": {
                "variable": {
                    "value": "(bbox_begin, bbox_size, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "image_size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ]
                    ]
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "aspect_ratio_range": {
                    "value": "(0.75, 1.33)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "area_range": {
                    "value": "(0.05, 1.0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_attempts": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unstack_24": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_25": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_26": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "crop_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_size / (image_size + CROP_PADDING) * tf.cast(tf.minimum(shape[0], shape[1]), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, crop_size, crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_41": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_image_dtype_43": {
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bicubic([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "resize_bicubic_39": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_31": {
                "x": {
                    "value": "tf.minimum(shape[0], shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_31": {
                "x": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/loader_util.py": {
        "tensorflow": {
            "cast_73": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Options_180": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_200": {
                "variable": {
                    "value": "parsed",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'image/encoded': tf.io.FixedLenFeature((), tf.string, default_value=''), 'image/class/label': tf.io.FixedLenFeature((), tf.int64, -1)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cast_208": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(y, [])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_622": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[height, width, num_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "mean": {
                    "value": "127",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "synthetic_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "uniform_627": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "synthetic_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "print_56": {
                "*inputs": {
                    "value": "'Dataset: {}'.format(file_pattern)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "print_88": {
                "*inputs": {
                    "value": "'Dataset: {}'.format(file_pattern)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InputContext_150": {
                "variable": {
                    "value": "input_context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_pipeline_id": {
                    "value": "kwargs['worker_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_input_pipelines": {
                    "value": "kwargs['world_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "print_265": {
                "*inputs": {
                    "value": "'Using scan: {}'.format(scan)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "repeat_595": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_197": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_198": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_208": {
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(y, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "length_307": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x / IMAGENET_IMAGE_STD",
                            "BinOp"
                        ],
                        [
                            "ds",
                            "Name"
                        ],
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "processing_function(x, image_size=image_size, is_training=randomized_image_postprocessing)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_374": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x / IMAGENET_IMAGE_STD",
                            "BinOp"
                        ],
                        [
                            "ds",
                            "Name"
                        ],
                        [
                            "batch[0]",
                            "Subscript"
                        ],
                        [
                            "processing_function(x, image_size=image_size, is_training=randomized_image_postprocessing)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "print_414": {
                "*inputs": {
                    "value": "'Found PCR dataset size: {}'.format(pcr_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "print_421": {
                "*inputs": {
                    "value": "'Taking subset of examples: {}'.format(take_amount)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "print_424": {
                "*inputs": {
                    "value": "'Adding snapshot to {}'.format(snapshot_filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "print_427": {
                "*inputs": {
                    "value": "Caching dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_591": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(y, []), tf.int64)",
                            "Call"
                        ],
                        [
                            "labels - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(labels, [])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=label_dtype)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([1], minval=0, maxval=num_classes - 1, dtype=tf.int32, name='synthetic_labels')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_594": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(y, []), tf.int64)",
                            "Call"
                        ],
                        [
                            "labels - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(labels, [])",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, dtype=label_dtype)",
                            "Call"
                        ],
                        [
                            "tf.random.uniform([1], minval=0, maxval=num_classes - 1, dtype=tf.int32, name='synthetic_labels')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "label_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InterleaveDataset_117": {
                "input_dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.data.Dataset.list_files(file_pattern, shuffle=False)",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices(file_pattern)",
                            "Call"
                        ],
                        [
                            "dataset.shard(kwargs['world_size'], kwargs['worker_index'])",
                            "Call"
                        ],
                        [
                            "dataset.shuffle(len(dataset))",
                            "Call"
                        ],
                        [
                            "dataset.interleave(tf.data.TFRecordDataset, cycle_length=DEFAULT_PARALLELISM, block_length=1, num_parallel_calls=DEFAULT_PARALLELISM, deterministic=bool(deterministic))",
                            "Call"
                        ],
                        [
                            "dataset.map(unpack_image_record_fn, num_parallel_calls=DEFAULT_PARALLELISM)",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.list_files(file_pattern, shuffle=False)",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices(file_pattern)",
                            "Call"
                        ],
                        [
                            "dataset.shard(kwargs['world_size'], kwargs['worker_index'])",
                            "Call"
                        ],
                        [
                            "dataset.shuffle(len(dataset))",
                            "Call"
                        ],
                        [
                            "patched_interleave(dataset, PCR_Reader_fn, cycle_length=DEFAULT_PCR_BUFFER_SIZE, block_length=1, num_parallel_calls=DEFAULT_PCR_BUFFER_SIZE, deterministic=deterministic, prefetch_input_elements=0)",
                            "Call"
                        ],
                        [
                            "dataset.prefetch(10)",
                            "Call"
                        ],
                        [
                            "dataset.map(wrapped_parse_pcr_fn, num_parallel_calls=DEFAULT_PARALLELISM)",
                            "Call"
                        ],
                        [
                            "builder.as_dataset(directory, shuffle_files=False, as_supervised=True, decoders=decoders, read_config=read_config)",
                            "Call"
                        ],
                        [
                            "dataset.shard(kwargs['world_size'], kwargs['worker_index'])",
                            "Call"
                        ],
                        [
                            "dataset.shuffle(len(dataset))",
                            "Call"
                        ],
                        [
                            "dataset.with_options(options)",
                            "Call"
                        ]
                    ]
                },
                "other_arguments": {
                    "value": "map_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "cycle_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_ops.AUTOTUNE",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "block_length": {
                    "value": "block_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ParallelInterleaveDataset_119": {
                "input_dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.data.Dataset.list_files(file_pattern, shuffle=False)",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices(file_pattern)",
                            "Call"
                        ],
                        [
                            "dataset.shard(kwargs['world_size'], kwargs['worker_index'])",
                            "Call"
                        ],
                        [
                            "dataset.shuffle(len(dataset))",
                            "Call"
                        ],
                        [
                            "dataset.interleave(tf.data.TFRecordDataset, cycle_length=DEFAULT_PARALLELISM, block_length=1, num_parallel_calls=DEFAULT_PARALLELISM, deterministic=bool(deterministic))",
                            "Call"
                        ],
                        [
                            "dataset.map(unpack_image_record_fn, num_parallel_calls=DEFAULT_PARALLELISM)",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.list_files(file_pattern, shuffle=False)",
                            "Call"
                        ],
                        [
                            "tf.data.Dataset.from_tensor_slices(file_pattern)",
                            "Call"
                        ],
                        [
                            "dataset.shard(kwargs['world_size'], kwargs['worker_index'])",
                            "Call"
                        ],
                        [
                            "dataset.shuffle(len(dataset))",
                            "Call"
                        ],
                        [
                            "patched_interleave(dataset, PCR_Reader_fn, cycle_length=DEFAULT_PCR_BUFFER_SIZE, block_length=1, num_parallel_calls=DEFAULT_PCR_BUFFER_SIZE, deterministic=deterministic, prefetch_input_elements=0)",
                            "Call"
                        ],
                        [
                            "dataset.prefetch(10)",
                            "Call"
                        ],
                        [
                            "dataset.map(wrapped_parse_pcr_fn, num_parallel_calls=DEFAULT_PARALLELISM)",
                            "Call"
                        ],
                        [
                            "builder.as_dataset(directory, shuffle_files=False, as_supervised=True, decoders=decoders, read_config=read_config)",
                            "Call"
                        ],
                        [
                            "dataset.shard(kwargs['world_size'], kwargs['worker_index'])",
                            "Call"
                        ],
                        [
                            "dataset.shuffle(len(dataset))",
                            "Call"
                        ],
                        [
                            "dataset.with_options(options)",
                            "Call"
                        ]
                    ]
                },
                "other_arguments": {
                    "value": "map_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "cycle_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_ops.AUTOTUNE",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "block_length": {
                    "value": "block_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "sloppy": {
                    "value": "num_parallel_calls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "deterministic": {
                    "value": "deterministic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "prefetch_input_elements": {
                    "value": "prefetch_input_elements",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "snapshot_425": {
                "path": {
                    "value": "snapshot_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_384": {
                "a": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "transpose_array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0, 3, 1, 2]",
                            "List"
                        ],
                        [
                            "[0, 3, 1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_479": {
                "a": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "transpose_array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0, 3, 1, 2]",
                            "List"
                        ],
                        [
                            "[0, 3, 1, 2]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "tensorflow/main.py": {
        "tensorflow": {
            "set_seed_153": {
                "seed": {
                    "value": "args.seed + args.local_rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_count_174": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_277": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_279": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradScaler_461": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradScaler_547": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_709": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_712": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_152": {
                "seed": {
                    "value": "args.seed + args.local_rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_561": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_632": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_772": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_804": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_246": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "model.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_251": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "model.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_288": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_292": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_593": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_637": {
                "variable": {
                    "value": "res_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_662": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_229": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_253": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_258": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_261": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "model.to(memory_format=torch.channels_last)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "autocast_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_571": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/main_helper.py": {
        "tensorflow": {
            "print_149": {
                "*inputs": {
                    "value": "'Scan gradient eval: {}={}'.format(i, cosine_similarity)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "CosineSimilarity_27": {
                "variable": {
                    "value": "dist_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "ww",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "GradScaler_41": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(args.image_size), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_276": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedSampler_175": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(args.image_size), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_34": {
                "input": {
                    "value": "W.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/pcr_util/PCR_helper.py": {
        "tensorflow": {
            "substr_25": {
                "variable": {
                    "value": "label_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "pos": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "len": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "substr_26": {
                "variable": {
                    "value": "img_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "pos": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "len": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "decode_raw_27": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "label_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.strings.substr(record, 0, 4)",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.strings.substr(record, 4, -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.decode_raw(label_data, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, shape=[])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_19": {
                "filenames": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "PCR_dir + '/PCR_index.pb'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "scans",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "py_function_42": {
                "func": {
                    "value": "_pack_record_pcr",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image_bytes, label]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/pcr_util/PCR_importer.py": {
        "tensorflow": {}
    },
    "tensorflow/tf_util.py": {
        "tensorflow": {
            "get_visible_devices_8": {
                "variable": {
                    "value": "visible_devices",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_verbosity_20": {
                "level": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_visible_devices_7": {
                "devices": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_logger_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/util/pcr_util.py": {
        "tensorflow": {
            "py_function_75": {
                "func": {
                    "value": "_to_scan_n_jpeg",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[image, scan]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "py_function_83": {
                "func": {
                    "value": "_to_progressive_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/util/transform_images.py": {
        "tensorflow": {
            "decode_image_11": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(x)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_jpeg(x, progressive=True)",
                            "Call"
                        ],
                        [
                            "encoding_fn(x)",
                            "Call"
                        ],
                        [
                            "pcr_util.to_scan_n_jpeg(x, scan)",
                            "Call"
                        ]
                    ]
                }
            },
            "encode_jpeg_13": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(x)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_jpeg(x, progressive=True)",
                            "Call"
                        ],
                        [
                            "encoding_fn(x)",
                            "Call"
                        ],
                        [
                            "pcr_util.to_scan_n_jpeg(x, scan)",
                            "Call"
                        ]
                    ]
                },
                "progressive": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_jpeg_10": {
                "contents": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.decode_image(x)",
                            "Call"
                        ],
                        [
                            "tf.image.encode_jpeg(x, progressive=True)",
                            "Call"
                        ],
                        [
                            "encoding_fn(x)",
                            "Call"
                        ],
                        [
                            "pcr_util.to_scan_n_jpeg(x, scan)",
                            "Call"
                        ]
                    ]
                }
            },
            "print_12": {
                "*inputs": {
                    "value": "Converting image to JPEG",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "compat/dali_main.py": {
        "torch": {
            "CrossEntropyLoss_268": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_270": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_190": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_568": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_device_228": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_282": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(args.gpu)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "synchronize_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_526": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tensorflow/data_prefetcher.py": {
        "torch": {
            "Stream_22": {
                "variable": {
                    "value": "self.stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Stream_64": {
                "variable": {
                    "value": "self.stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "self.next_input_py",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.next_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "self.next_target_py",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.next_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_stream_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}