{
    "crowd_nav/empowerment/planning.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nb_states",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nb_states",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden1 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.mu_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nb_actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.sigma_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nb_actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(s_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(torch.cat([x, x_], dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_23": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mu_head(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_24": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigma_head(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_21": {
                "tensors": {
                    "value": "[x, x_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/empowerment/source.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nb_states",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.mu_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nb_actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.sigma_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nb_actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_18": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mu_head(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_19": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sigma_head(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/empowerment/transition.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nb_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nb_states",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden1 + hidden2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_states",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_14": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out1, out2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/policy/cadrl.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "SGD_90": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_91": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "atan2_194": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state[:, 6] - state[:, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "state[:, 5] - state[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_196": {
                "variable": {
                    "value": "dg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([dx, dy], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_215": {
                "variable": {
                    "value": "da",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([(state[:, 0] - state[:, 9]).reshape((batch, -1)), (state[:, 1] - state[:, 10]).reshape((batch, -1))], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dg, v_pref, theta, radius, vx, vy, px1, py1, vx1, vy1, radius1, da, radius_sum]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_206": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_pref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state[:, 7].reshape((batch, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "mlp_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mlp_dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "batch_next_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.Tensor([next_self_state + next_human_state]).to(self.device) for next_human_state in ob]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_159": {
                "variable": {
                    "value": "(min_output, min_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "self.model(self.rotate(batch_next_states))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_196": {
                "tensors": {
                    "value": "[dx, dy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "[(state[:, 0] - state[:, 9]).reshape((batch, -1)), (state[:, 1] - state[:, 10]).reshape((batch, -1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cos_209": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_209": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_211": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_211": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_155": {},
            "cos_198": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_198": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_199": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_199": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_207": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_207": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_208": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_208": {
                "input": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(state[:, 6] - state[:, 1], state[:, 5] - state[:, 0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "crowd_nav/policy/lstm_rl.py": {
        "torch": {
            "LSTM_15": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "joint_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_state, hn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_43": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "mlp1_dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(state, (-1, size[2]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, size[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "mlp1_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlp1_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mlp1(state)",
                            "Call"
                        ],
                        [
                            "torch.reshape(mlp1_output, (size[0], size[1], -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(size[0], size[1], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.lstm_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "joint_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_state, hn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/policy/multi_human_rl.py": {
        "torch": {
            "cat_97": {
                "variable": {
                    "value": "state_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.Tensor([state.self_state + human_state]).to(self.device) for human_state in state.human_states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "state_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.rotate(state_tensor), occupancy_maps.to(self.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "ndarray": {
                    "value": "occupancy_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.build_occupancy_maps(next_human_states, next_self_state).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.build_occupancy_maps(state.human_states, state.self_state)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(human_states), self.cell_num ** 2 * self.om_channel_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_43": {
                "variable": {
                    "value": "batch_next_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.Tensor([next_self_state + next_human_state]).to(self.device) for next_human_state in next_human_states]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "rotated_batch_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rotated_batch_input, occupancy_maps.to(self.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/policy/sarl.py": {
        "torch": {
            "sum_60": {
                "variable": {
                    "value": "weighted_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(weights, features)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "joint_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_state, weighted_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "global_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlp1_output.view(size[0], size[1], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "attention_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mlp1_output, global_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_52": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(attention_input).view(size[0], size[1], 1).squeeze(dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_60": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scores_exp / torch.sum(scores_exp, dim=1, keepdim=True)).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp2_output.view(size[0], size[1], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_105": {
                "variable": {
                    "value": "input_joined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.Tensor([ob[0] + next_human_state]).to(self.device) for next_human_state in ob[1]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "input_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_rot, oms.to(self.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "scores_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(scores) * (scores != 0).float()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/policy/scr.py": {
        "torch": {
            "SGD_23": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer_transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.transition.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Normal_34": {
                "variable": {
                    "value": "dist_source",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Normal_38": {
                "variable": {
                    "value": "dist_plan",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu_p",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "sigma_p",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "human_oms_next",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_humans",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.occupancy_map_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "[next_px, next_py, state[2], state[3], state[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_grad_norm__93": {
                "parameters": {
                    "value": "self.empowerment.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__121": {
                "parameters": {
                    "value": "self.empowerment.transition.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_humans",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_states",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/tests/acceptance_test_interaction.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_64": {
                "f": {
                    "value": "model_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'il_model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'resumed_rl_model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'rl_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/tests/acceptance_test_score.py": {
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_63": {
                "f": {
                    "value": "model_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'il_model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'resumed_rl_model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'rl_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/tests/acceptance_test_visualisation.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_64": {
                "f": {
                    "value": "model_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, 'il_model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'resumed_rl_model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.model_dir, 'rl_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/tests/transformations_test.py": {
        "torch": {
            "rand_104": {
                "variable": {
                    "value": "human",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_105": {
                "variable": {
                    "value": "others",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/train.py": {
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() and args.gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_115": {
                "f": {
                    "value": "rl_weight_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'rl_model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'resumed_rl_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_137": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "il_weight_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'il_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_178": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "rl_weight_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'rl_model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.output_dir, 'resumed_rl_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_119": {
                "f": {
                    "value": "il_weight_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'il_model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "crowd_nav/utils/explorer.py": {
        "torch": {
            "Tensor_173": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_190": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/utils/memory.py": {
        "torch": {}
    },
    "crowd_nav/utils/trainer.py": {
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "self.data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "crowd_nav/utils/transformations.py": {
        "torch": {
            "atan2_74": {
                "variable": {
                    "value": "human_velocity_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "human[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "human[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_75": {
                "variable": {
                    "value": "other_human_orientation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "other_py",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other_agents[:, 1] - human.py",
                            "BinOp"
                        ],
                        [
                            "np.sin(rotation) * distance",
                            "BinOp"
                        ],
                        [
                            "other_agents[:, 1] - human[1]",
                            "BinOp"
                        ],
                        [
                            "torch.sin(rotation) * distance",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "other_px",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other_agents[:, 0] - human.px",
                            "BinOp"
                        ],
                        [
                            "np.cos(rotation) * distance",
                            "BinOp"
                        ],
                        [
                            "other_agents[:, 0] - human[0]",
                            "BinOp"
                        ],
                        [
                            "torch.cos(rotation) * distance",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_77": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([other_px.view(-1, 1), other_py.view(-1, 1)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_82": {
                "variable": {
                    "value": "other_x_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "other_px / cell_size + cell_num / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_83": {
                "variable": {
                    "value": "other_y_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "other_py / cell_size + cell_num / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_91": {
                "variable": {
                    "value": "other_human_velocity_angles",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "other_agents[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "other_agents[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_93": {
                "variable": {
                    "value": "speed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "other_agents[:, 2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "dm",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "cell_num ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[other_px.view(-1, 1), other_py.view(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_78": {
                "input": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other_human_orientation - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_velocity_angles - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_orientation - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_velocity_angles - human_velocity_angle",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_79": {
                "input": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other_human_orientation - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_velocity_angles - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_orientation - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_velocity_angles - human_velocity_angle",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_94": {
                "input": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other_human_orientation - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_velocity_angles - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_orientation - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_velocity_angles - human_velocity_angle",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_95": {
                "input": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other_human_orientation - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_velocity_angles - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_orientation - human_velocity_angle",
                            "BinOp"
                        ],
                        [
                            "other_human_velocity_angles - human_velocity_angle",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}