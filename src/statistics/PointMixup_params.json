{
    "cd/chamferdist/ChamferDistance.py": {
        "torch": {
            "zeros_15": {
                "variable": {
                    "value": "dist1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "dist2",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "variable": {
                    "value": "idx1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "idx2",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "gradxyz1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "gradxyz2",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "cd/setup.py": {
        "torch": {}
    },
    "emd_/emd/emd_module.py": {
        "torch": {
            "rand_81": {
                "variable": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "8192",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_82": {
                "variable": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "8192",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "price",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "bid",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "bid_increments",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "max_increments",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "unass_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "max_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "unass_cnt",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "unass_cnt_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "cnt_tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "gradxyz1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz1.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "gradxyz2",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz2.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "emd_/emd_module.py": {
        "torch": {
            "rand_81": {
                "variable": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "8192",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_82": {
                "variable": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "8192",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "price",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "bid",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "bid_increments",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "max_increments",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "unass_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "max_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize * m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "unass_cnt",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "unass_cnt_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "cnt_tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "gradxyz1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz1.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "gradxyz2",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz2.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "batchsize",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "emd_/setup.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "DataLoader_174": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset_cls(args.num_points, transforms=transforms_test, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_183": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset_cls(args.num_points, transforms=transforms, keeprate=1.0)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_202": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_229": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lbmd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda it: max(args.lr_decay ** int(it * args.batch_size / args.decay_step), lr_clip / args.lr)",
                            "Lambda"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "it",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "max(it, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/data/ModelNet40Loader.py": {
        "torch": {
            "DataLoader_118": {
                "variable": {
                    "value": "dloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelNet40Cls(16, train=True, transforms=transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.labels[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/data/data_utils.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cosval * np.eye(3) + sinval * cross_prod_mat + (1.0 - cosval) * np.outer(u, u)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "input": {
                    "value": "Rz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "angle_axis(angles[2], np.array([0.0, 0.0, 1.0]))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Ry",
                    "type": "Name",
                    "possible_values": [
                        [
                            "angle_axis(angles[1], np.array([0.0, 1.0, 0.0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_xyz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "variable": {
                    "value": "points[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_normals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_100": {
                "variable": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_xyz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "variable": {
                    "value": "points[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_normals",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "ndarray": {
                    "value": "points",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "ndarray": {
                    "value": "pc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "points.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_65": {
                "input": {
                    "value": "points",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "input": {
                    "value": "points",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/models/pointnet2_msg_cls.py": {
        "torch": {
            "ModuleList_116": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_207": {
                "variable": {
                    "value": "self.SA_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_39": {
                "variable": {
                    "value": "(_, classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs, idx_minor=idx_minor, mixrates=mixrates, strategy=strategy, manilayer_batch=manilayer_batch)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(preds, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_30": {
                "mode": {
                    "value": "not eval",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_50": {
                "mode": {
                    "value": "not eval",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_78": {
                "variable": {
                    "value": "(_, classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs, idx_minor=idx_minor, mixrates=mixrates, strategy=strategy, manilayer_batch=manilayer_batch)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(preds, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "mix_rate",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "mixrates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "model(inputs, idx_minor=idx_minor, mixrates=mixrates, strategy=strategy, manilayer_batch=manilayer_batch)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(preds, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_296": {
                "variable": {
                    "value": "features_minor_new",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "features_minor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features[idx_minor]",
                            "Subscript"
                        ],
                        [
                            "features_minor.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_332": {
                "variable": {
                    "value": "xyz_minor_rot",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz_minor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "xyz[idx_minor]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rota",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([3, 3, B]).cuda()",
                            "Call"
                        ],
                        [
                            "rota.permute([2, 0, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "cd_all",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[60, B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_318": {
                "variable": {
                    "value": "(_, ind_all)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cd_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([60, B]).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cos_323": {
                "variable": {
                    "value": "coss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-thetas_diff",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_324": {
                "variable": {
                    "value": "sins",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-thetas_diff",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_325": {
                "variable": {
                    "value": "rota",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 3, B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_304": {
                "variable": {
                    "value": "refl",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, 3, B]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_305": {
                "variable": {
                    "value": "cos",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones([B]) * (i / 60 * 3.1415927)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_306": {
                "variable": {
                    "value": "sin",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones([B]) * (i / 60 * 3.1415927)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_314": {
                "variable": {
                    "value": "xyz_refl",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pc[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "pc[..., 0:3].contiguous()",
                            "Call"
                        ],
                        [
                            "xyz * (1 - mix_rate_expand_xyz) + xyz_minor * mix_rate_expand_xyz",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "refl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros([3, 3, B]).cuda()",
                            "Call"
                        ],
                        [
                            "refl.permute([2, 0, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_303": {
                "*size": {
                    "value": "[B]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/train/etw_pytorch_utils/persistent_dataloader.py": {
        "torch": {
            "set_num_threads_46": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "is_tensor_116": {
                "obj": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_155": {
                "obj": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.collate_fn([self.dataset[i] for i in indices])",
                            "Call"
                        ],
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.reorder_dict.pop(self.rcvd_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_75": {
                "device": {
                    "value": "device_id",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_124": {
                "tensors": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.collate_fn([self.dataset[i] for i in indices])",
                            "Call"
                        ],
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.reorder_dict.pop(self.rcvd_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_379": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_133": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RandomSampler_376": {
                "variable": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "SequentialSampler_378": {
                "variable": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "current_device_416": {
                "variable": {
                    "value": "maybe_device_id",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "ndarray": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/train/etw_pytorch_utils/pytorch_utils.py": {
        "torch": {
            "Linear_246": {
                "variable": {
                    "value": "fc",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_387": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}.pth.tar'.format(filename)",
                            "Call"
                        ],
                        [
                            "'{}.pth.tar'.format(filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint'",
                            "MethodArgument"
                        ],
                        [
                            "'checkpoint'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_397": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'{}.pth.tar'.format(filename)",
                            "Call"
                        ],
                        [
                            "'{}.pth.tar'.format(filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint'",
                            "MethodArgument"
                        ],
                        [
                            "'checkpoint'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_508": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "indicies[0:int(percent_train * numel)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_510": {
                "variable": {
                    "value": "self.val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "indicies[int(percent_train * numel):-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_539": {
                "variable": {
                    "value": "self.val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.folds[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_540": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "np.concatenate(self.folds[1:], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_140": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_208": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_238": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_435": {
                "obj": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_966": {
                "variable": {
                    "value": "idx_minor",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_972": {
                "variable": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_465": {
                "ndarray": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "pointnet2/train/etw_pytorch_utils/sacred_trainer.py": {
        "torch": {
            "save_208": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint_state(self.model, self.optimizer, val_loss, epoch, it)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(self.checkpoint_dir, 'checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "osp.join(self.checkpoint_dir, 'best.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_214": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint_state(self.model, self.optimizer, val_loss, epoch, it)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(self.checkpoint_dir, 'checkpoint.pt')",
                            "Call"
                        ],
                        [
                            "osp.join(self.checkpoint_dir, 'best.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pointnet2/train/etw_pytorch_utils/seq.py": {
        "torch": {
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_153": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_167": {
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "return_indices": {
                    "value": "return_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "ceil_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "pointnet2/utils/linalg_utils.py": {
        "torch": {
            "zeros_69": {
                "variable": {
                    "value": "D",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "X.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "X.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Z.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_79": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_80": {
                "variable": {
                    "value": "Z",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_63": {
                "input": {
                    "value": "R + S - 2 * G",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dist_84": {
                "input": {
                    "value": "pdist2(X, order=PDist2Order.d_first)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pdist2_slow(X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dist_74": {
                "variable": {
                    "value": "D[b, i, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "X[b, :, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "Z[b, :, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/utils/pointnet2_modules.py": {
        "torch": {
            "ModuleList_98": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_212": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_all_213": {
                "seed": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_64": {
                "variable": {
                    "value": "new_features",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_185": {
                "variable": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "new_features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_214": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_215": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pointnet2/utils/pointnet2_utils.py": {
        "torch": {
            "sqrt_134": {
                "input": {
                    "value": "dist2",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "new_features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_376": {
                "variable": {
                    "value": "new_features",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {}
    },
    "utils.py": {
        "torch": {
            "zeros_10": {
                "*size": {
                    "value": "(len(y), num_class)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cross_entropy_88": {
                "variable": {
                    "value": "y_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "target_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.new_full((num_points,), y, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "input.new_full((num_points,), y, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_148": {
                "variable": {
                    "value": "y_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "target": {
                    "value": "target_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.new_full((num_points,), y, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "input.new_full((num_points,), y, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}