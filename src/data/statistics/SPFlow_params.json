{
    "src/spn/algorithms/sklearn.py": {
        "sklearn": {
            "check_X_y_89": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "multi_output": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "check_array_152": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_is_fitted_149": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "attributes": {
                    "value": "['X_', 'y_']",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "softmax_211": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.constant(softmaxInverse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_38": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_211": {
                "value": {
                    "value": "softmaxInverse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(p / np.max(p)).astype(dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/algorithms/splitting/Base.py": {
        "sklearn": {
            "TfidfTransformer_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/algorithms/splitting/Clustering.py": {
        "sklearn": {
            "KMeans_40": {
                "variable": {
                    "value": "clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "17",
                            "MethodArgument"
                        ],
                        [
                            "17",
                            "MethodArgument"
                        ],
                        [
                            "17",
                            "MethodArgument"
                        ],
                        [
                            "17",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KMeans_59": {
                "variable": {
                    "value": "clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "17",
                            "MethodArgument"
                        ],
                        [
                            "17",
                            "MethodArgument"
                        ],
                        [
                            "17",
                            "MethodArgument"
                        ],
                        [
                            "17",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DBSCAN_70": {
                "variable": {
                    "value": "clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "min_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GaussianMixture_107": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "covariance_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_iter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_init": {
                    "value": "n_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "17",
                            "MethodArgument"
                        ],
                        [
                            "17",
                            "MethodArgument"
                        ],
                        [
                            "17",
                            "MethodArgument"
                        ],
                        [
                            "17",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/algorithms/splitting/RDC.py": {
        "sklearn": {
            "CCA_247": {
                "variable": {
                    "value": "cca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "CCA_MAX_ITER",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "KMeans_95": {
                "variable": {
                    "value": "clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "17",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KMeans_348": {
                "variable": {
                    "value": "clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "rand_gen",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "np.random.RandomState(17)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-2",
                            "MethodArgument"
                        ],
                        [
                            "-2",
                            "MethodArgument"
                        ],
                        [
                            "-2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/data/datasets.py": {
        "sklearn": {
            "train_test_split_83": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "D",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/RL/LearnRL.py": {
        "sklearn": {
            "train_test_split_47": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "D",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/RandomSPNs/LearnRGSPN.py": {
        "sklearn": {
            "StandardScaler_133": {
                "variable": {
                    "value": "scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_129": {
                "variable": {
                    "value": "input_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1000, 28 * 28)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Session_150": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/RandomSPNs/utils.py": {
        "sklearn": {
            "fetch_20newsgroups_289": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "all",
                    "type": "Constant",
                    "possible_values": []
                },
                "remove": {
                    "value": "('headers', 'footers', 'quotes')",
                    "type": "Tuple",
                    "possible_values": []
                },
                "random_state": {
                    "value": "rand_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.RandomState(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_362": {
                "variable": {
                    "value": "(trainv_x, test_x, trainv_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "train_valid_test_splits[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.array(train_valid_test_splits)",
                            "Call"
                        ],
                        [
                            "train_valid_test_splits / train_valid_test_splits.sum()",
                            "BinOp"
                        ],
                        [
                            "[0.7",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "rand_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.RandomState(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_368": {
                "variable": {
                    "value": "(train_x, valid_x, train_y, valid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "trainv_x",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "trainv_y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "train_valid_test_splits[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.array(train_valid_test_splits)",
                            "Call"
                        ],
                        [
                            "train_valid_test_splits / train_valid_test_splits.sum()",
                            "BinOp"
                        ],
                        [
                            "[0.7",
                            "MethodArgument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "rand_gen",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.RandomState(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_328": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "stop_words",
                    "type": "Constant",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "ascii",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_features": {
                    "value": "max_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "np.float64",
                            "Attribute"
                        ],
                        [
                            "np.int8",
                            "Attribute"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_333": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lowercase": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "ascii",
                    "type": "Constant",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "stop_words",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_features": {
                    "value": "max_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "binary": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_idf": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "norm": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "np.float64",
                            "Attribute"
                        ],
                        [
                            "np.int8",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/experiments/conditional/ml_classification.py": {
        "sklearn": {
            "hamming_loss_65": {
                "y_true": {
                    "value": "test_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "binary_pred_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.round(pred_test_labels).astype(int)",
                            "Call"
                        ]
                    ]
                }
            },
            "zero_one_loss_66": {
                "y_true": {
                    "value": "test_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "binary_pred_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.round(pred_test_labels).astype(int)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_67": {
                "y_true": {
                    "value": "test_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "binary_pred_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.round(pred_test_labels).astype(int)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/conditional/pixelcspn_faces.py": {
        "sklearn": {
            "fetch_olivetti_faces_51": {
                "variable": {
                    "value": "faces",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/conditional/pixelcspn_faces_vertical.py": {
        "sklearn": {
            "fetch_olivetti_faces_46": {
                "variable": {
                    "value": "faces",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/conditional/test_cspn.py": {
        "sklearn": {
            "RandomTreesEmbedding_110": {
                "variable": {
                    "value": "tree_embedding_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SparseRandomProjection_114": {
                "variable": {
                    "value": "srp_emb_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Isomap_117": {
                "variable": {
                    "value": "iso_emb_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "30",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TruncatedSVD_123": {
                "variable": {
                    "value": "svd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_126": {
                "variable": {
                    "value": "tsne_emb_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "init": {
                    "value": "pca",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MDS_133": {
                "variable": {
                    "value": "mds_embedding_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_init": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SpectralEmbedding_137": {
                "variable": {
                    "value": "spectral_embedding_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                },
                "eigen_solver": {
                    "value": "arpack",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SpectralEmbedding_144": {
                "variable": {
                    "value": "spectral_embedding_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                },
                "eigen_solver": {
                    "value": "arpack",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SpectralEmbedding_151": {
                "variable": {
                    "value": "spectral_embedding_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                },
                "eigen_solver": {
                    "value": "arpack",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KMeans_89": {
                "n_clusters": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KMeans_102": {
                "n_clusters": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RandomState(17)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_78": {
                "y_true": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((np.zeros(n_instances_per_class), np.ones(n_instances_per_class)), axis=0).reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "labels[shf]",
                            "Subscript"
                        ],
                        [
                            "labels.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "confusion_matrix_80": {
                "y_true": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((np.zeros(n_instances_per_class), np.ones(n_instances_per_class)), axis=0).reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "labels[shf]",
                            "Subscript"
                        ],
                        [
                            "labels.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "accuracy_score_79": {
                "y_true": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate((np.zeros(n_instances_per_class), np.ones(n_instances_per_class)), axis=0).reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "labels[shf]",
                            "Subscript"
                        ],
                        [
                            "labels.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/orchestra/mnist_classification.py": {
        "sklearn": {
            "check_random_state_32": {
                "variable": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "train_test_split_33": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "train_size": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "test_size": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "check_random_state(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_81": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "confusion_matrix_85": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/experiments/orchestra/myfilter1.py": {
        "sklearn": {
            "classification_report_76": {
                "y_true": {
                    "value": "data[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "confusion_matrix_80": {
                "y_true": {
                    "value": "data[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/tests/test_EM.py": {
        "sklearn": {
            "make_blobs_56": {
                "variable": {
                    "value": "(X, labels_true)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "1000000",
                    "type": "Constant",
                    "possible_values": []
                },
                "centers": {
                    "value": "centers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[10, 10], [-10, -10], [10, -10]]",
                            "List"
                        ]
                    ]
                },
                "cluster_std": {
                    "value": "center_stdev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.7",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/tests/test_learn_multivariate.py": {
        "sklearn": {
            "load_iris_14": {
                "variable": {
                    "value": "iris",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/FPGA/RunNative.py": {
        "tensorflow": {
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_27": {
                "inputs": {
                    "value": "[node.weights[i] * ctf for (i, ctf) in enumerate(children)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "data_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "test_data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_37": {
                "variable": {
                    "value": "prod_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prod_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "c",
                            "Name"
                        ],
                        [
                            "tf.multiply(prod_res, c)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "children",
                            "Name"
                        ]
                    ]
                }
            },
            "reset_default_graph_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_141": {
                "variable": {
                    "value": "run_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_142": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/RandomSPNs/RAT_SPN.py": {
        "tensorflow": {
            "get_variable_24": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Call",
                    "possible_values": [
                        [
                            "str(id(self))",
                            "Call"
                        ],
                        [
                            "'bernoulli_{}_{}'.format(i, k)",
                            "Call"
                        ],
                        [
                            "'gauss_{}_{}'.format(i, k)",
                            "Call"
                        ],
                        [
                            "'prod_{}_{}'.format(layer_num, vector_num)",
                            "Call"
                        ],
                        [
                            "'sum_{}_{}'.format(layer_num, vector_num)",
                            "Call"
                        ],
                        [
                            "'bernoulli_{}_'.format(i)",
                            "Call"
                        ],
                        [
                            "'gauss_{}'.format(i)",
                            "Call"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=mean, stddev=stddev, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(values)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer([p])",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(values)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Call",
                    "possible_values": [
                        [
                            "str(id(self))",
                            "Call"
                        ],
                        [
                            "'bernoulli_{}_{}'.format(i, k)",
                            "Call"
                        ],
                        [
                            "'gauss_{}_{}'.format(i, k)",
                            "Call"
                        ],
                        [
                            "'prod_{}_{}'.format(layer_num, vector_num)",
                            "Call"
                        ],
                        [
                            "'sum_{}_{}'.format(layer_num, vector_num)",
                            "Call"
                        ],
                        [
                            "'bernoulli_{}_'.format(i)",
                            "Call"
                        ],
                        [
                            "'gauss_{}'.format(i)",
                            "Call"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(mean=mean, stddev=stddev, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(values)",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer([p])",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(values)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_49": {
                "variable": {
                    "value": "is_nan",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.is_nan(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_20": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_22": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "values",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_26": {
                "variable": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_35": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[p]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_37": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "values",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "multiply_41": {
                "variable": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_50": {
                "pred": {
                    "value": "is_nan",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_any(tf.is_nan(tensor))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.Print(tensor, [is_nan], message=msg)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.identity(tensor)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Normal_120": {
                "variable": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "tf.sqrt(self.sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_123": {
                "variable": {
                    "value": "local_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_138": {
                "variable": {
                    "value": "gauss_log_pdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gauss_log_pdf_single",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dist.log_prob(tf.expand_dims(local_inputs, axis=-1))",
                            "Call"
                        ],
                        [
                            "gauss_log_pdf_single * (1 - local_marginalized)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "meshgrid_145": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.range(num_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dist.sample([inputs.shape[0]], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(indices, [1, inputs.shape[1]]), [inputs.shape[0], self.size, inputs.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([others[1], others[0], indices], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_147": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dist.sample([inputs.shape[0]], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(indices, [1, inputs.shape[1]]), [inputs.shape[0], self.size, inputs.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([others[1], others[0], indices], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_148": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dist.sample([inputs.shape[0]], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(indices, [1, inputs.shape[1]]), [inputs.shape[0], self.size, inputs.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([others[1], others[0], indices], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "sample_values",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.means + tf.zeros([num_samples, self.local_size, self.args.num_univ_distros])",
                            "BinOp"
                        ],
                        [
                            "self.probs + tf.zeros([num_samples, self.local_size, self.args.num_univ_distros])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "sample_shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[num_samples, num_dims, self.size]",
                            "List"
                        ],
                        [
                            "[num_samples, num_dims, self.size]",
                            "List"
                        ]
                    ]
                }
            },
            "Bernoulli_174": {
                "variable": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_177": {
                "variable": {
                    "value": "local_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "meshgrid_196": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.range(num_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_197": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dist.sample([inputs.shape[0]], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(indices, [1, inputs.shape[1]]), [inputs.shape[0], self.size, inputs.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([others[1], others[0], indices], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_198": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dist.sample([inputs.shape[0]], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(indices, [1, inputs.shape[1]]), [inputs.shape[0], self.size, inputs.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([others[1], others[0], indices], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_199": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dist.sample([inputs.shape[0]], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(indices, [1, inputs.shape[1]]), [inputs.shape[0], self.size, inputs.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([others[1], others[0], indices], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "sample_values",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.means + tf.zeros([num_samples, self.local_size, self.args.num_univ_distros])",
                            "BinOp"
                        ],
                        [
                            "self.probs + tf.zeros([num_samples, self.local_size, self.args.num_univ_distros])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "sample_shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[num_samples, num_dims, self.size]",
                            "List"
                        ],
                        [
                            "[num_samples, num_dims, self.size]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_245": {
                "variable": {
                    "value": "in1_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_246": {
                "variable": {
                    "value": "in2_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in1_expand + in2_expand",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "output_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[inputs[0].shape[0], inputs[0].shape[1], inputs[0].shape[2] * inputs[1].shape[2]]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_288": {
                "variable": {
                    "value": "prods",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_315": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_316": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.weights[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Categorical_317": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(self.weights[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_320": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(indices, [1, inputs.shape[1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[inputs.shape[0], self.size, inputs.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_321": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dist.sample([inputs.shape[0]], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(indices, [1, inputs.shape[1]]), [inputs.shape[0], self.size, inputs.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([others[1], others[0], indices], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_323": {
                "variable": {
                    "value": "others",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.range(inputs.shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.range(inputs.shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_325": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[others[1], others[0], indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_327": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dist.sample([inputs.shape[0]], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(indices, [1, inputs.shape[1]]), [inputs.shape[0], self.size, inputs.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([others[1], others[0], indices], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_366": {
                "variable": {
                    "value": "self.variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_27": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(exp_weights), args.sum_weight_l2)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_28": {
                "name": {
                    "value": "weight_losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(exp_weights), args.sum_weight_l2)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_42": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(exp_weights), args.sum_weight_l2)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_43": {
                "name": {
                    "value": "weight_losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(exp_weights), args.sum_weight_l2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_49": {
                "x": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_129": {
                "variable": {
                    "value": "marginalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "marginalized",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.clip_by_value(marginalized, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(marginalized, 0, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_130": {
                "variable": {
                    "value": "local_marginalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(marginalized, self.scope, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_182": {
                "variable": {
                    "value": "marginalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "marginalized",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.clip_by_value(marginalized, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(marginalized, 0, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_183": {
                "variable": {
                    "value": "local_marginalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(marginalized, self.scope, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_190": {
                "variable": {
                    "value": "bernoulli_log_pdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bernoulli_log_pdf_single",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dist.log_prob(tf.expand_dims(local_inputs, axis=-1))",
                            "Call"
                        ],
                        [
                            "bernoulli_log_pdf_single * (1 - tf.cast(local_marginalized, dtype=tf.float32))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_231": {
                "variable": {
                    "value": "dists1_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_232": {
                "variable": {
                    "value": "dists2_expand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prod",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dists1_expand + dists2_expand",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(prod, [tf.shape(dists1)[0], num_dist1 * num_dist2])",
                            "Call"
                        ],
                        [
                            "base.Product()",
                            "Call"
                        ],
                        [
                            "base.Product()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(dists1)[0], num_dist1 * num_dist2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_292": {
                "variable": {
                    "value": "sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(tf.exp(prods), tf.squeeze(self.weights))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_294": {
                "variable": {
                    "value": "prods",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prods",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prods, axis=-1)",
                            "Call"
                        ],
                        [
                            "prods + dropout_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_310": {
                "variable": {
                    "value": "sums",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prods + weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_26": {
                "t": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_41": {
                "t": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Print_50": {
                "input_": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[is_nan]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "msg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_50": {
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_120": {
                "x": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_126": {
                "input": {
                    "value": "local_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.gather(inputs, self.scope, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(inputs, self.scope, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "shape": {
                    "value": "[num_samples, self.local_size, self.args.num_univ_distros]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_178": {
                "input": {
                    "value": "local_inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.gather(inputs, self.scope, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(inputs, self.scope, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "shape": {
                    "value": "[num_samples, self.local_size, self.args.num_univ_distros]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "products",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_273": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_278": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_320": {
                "input": {
                    "value": "indices",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.meshgrid(tf.range(num_samples), self.scope, tf.range(self.size))",
                            "Call"
                        ],
                        [
                            "tf.stack(indices, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dist.sample([inputs.shape[0]], seed=seed)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(indices, [1, inputs.shape[1]]), [inputs.shape[0], self.size, inputs.shape[1]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(indices, [0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([others[1], others[0], indices], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, inputs.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_130": {
                "params": {
                    "value": "marginalized",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.clip_by_value(marginalized, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(marginalized, 0, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_183": {
                "params": {
                    "value": "marginalized",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.clip_by_value(marginalized, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(marginalized, 0, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_280": {
                "variable": {
                    "value": "exp_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_281": {
                "variable": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(exp_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "args.sum_weight_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_292": {
                "a": {
                    "value": "tf.exp(prods)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.squeeze(self.weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_302": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.floor(self.dropout_op + random_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_307": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math_ops.floor(self.dropout_op + random_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_116": {
                "x": {
                    "value": "self.sigma_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_185": {
                "x": {
                    "value": "local_marginalized",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.gather(marginalized, self.scope, axis=1), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(marginalized, self.scope, axis=1), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_282": {
                "name": {
                    "value": "losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(exp_weights), args.sum_weight_l2)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_283": {
                "name": {
                    "value": "weight_losses",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(tf.nn.l2_loss(exp_weights), args.sum_weight_l2)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_292": {
                "x": {
                    "value": "prods",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(inputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(prods, axis=-1)",
                            "Call"
                        ],
                        [
                            "prods + dropout_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_292": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_237": {
                "input": {
                    "value": "dists1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "l2_loss_281": {
                "t": {
                    "value": "exp_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(self.weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_302": {
                "x": {
                    "value": "self.dropout_op + random_tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_307": {
                "x": {
                    "value": "self.dropout_op + random_tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/RandomSPNs/train_mnist.py": {
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "input_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, train_im.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "label_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_34": {
                "variable": {
                    "value": "marginalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ph",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None] + list(dummy_input.shape[1:]))",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [batch_size, train_im.shape[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_87": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "input_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(dummy_input.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_37": {
                "variable": {
                    "value": "disc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=label_ph, logits=spn_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_38": {
                "variable": {
                    "value": "label_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(batch_size), label_ph]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "gen_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-1 * tf.gather_nd(spn_output, label_idx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_40": {
                "input_tensor": {
                    "value": "tf.reduce_logsumexp(spn_output, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_37": {
                "labels": {
                    "value": "label_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [batch_size])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "spn_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "spn.forward(input_ph, marginalized)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_40": {
                "input_tensor": {
                    "value": "spn_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "spn.forward(input_ph, marginalized)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_39": {
                "params": {
                    "value": "spn_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "spn.forward(input_ph, marginalized)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "label_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(batch_size), label_ph], axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/experiments/layers/spflow_vs_pytorch.py": {
        "tensorflow": {
            "Session_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "pytorch_spn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "gauss",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_142": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(list_batch_size, desc='%s, Batch Size' % lib)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(list_n_feats, desc='%s, Features' % lib)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(list_batch_size, desc='%s, Batch Size' % lib)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(list_n_feats, desc='%s, Features' % lib)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_151": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(list_batch_size, desc='%s, Batch Size' % lib)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(list_n_feats, desc='%s, Features' % lib)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_294": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(list_batch_size, desc='%s, Batch Size' % lib)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_feats",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(list_n_feats, desc='%s, Features' % lib)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_82": {
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/gpu/TensorFlow.py": {
        "tensorflow": {
            "placeholder_79": {
                "variable": {
                    "value": "data_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, data.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_default_session_98": {
                "variable": {
                    "value": "variable_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_98": {
                "variable": {
                    "value": "variable_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "main": {
                    "value": "tensors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_203": {
                "variable": {
                    "value": "data_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_27": {
                "variable": {
                    "value": "tfweights",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.get_variable('weights', initializer=tf.constant(softmaxInverse))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_29": {
                "variable": {
                    "value": "childrenprob",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "children",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "lls",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hll.astype(dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RunOptions_209": {
                "variable": {
                    "value": "run_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "trace_level": {
                    "value": "tf.RunOptions.FULL_TRACE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RunMetadata_210": {
                "variable": {
                    "value": "run_metadata",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_30": {
                "input_tensor": {
                    "value": "childrenprob + tf.log(tfweights)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_40": {
                "inputs": {
                    "value": "children",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_57": {
                "input": {
                    "value": "tf.gather(lls, col)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_106": {
                "input_tensor": {
                    "value": "tf_graph",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval_spn_bottom_up(node, node_tf_graph, data_placeholder=data_placeholder, log_space=log_space, variable_dict=variable_dict, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "spn_to_tf_graph(spn, data_placeholder, log_space)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_152": {
                "input_tensor": {
                    "value": "tf_graph",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval_spn_bottom_up(node, node_tf_graph, data_placeholder=data_placeholder, log_space=log_space, variable_dict=variable_dict, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "spn_to_tf_graph(spn, data_placeholder, log_space)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_233": {
                "variable": {
                    "value": "summary_fw",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "save_graph_path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_27": {
                "name": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(softmaxInverse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_57": {
                "params": {
                    "value": "lls",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant(hll.astype(dtype))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "col",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_placeholder[:, node.scope[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "global_variables_initializer_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_197": {
                "logdir": {
                    "value": "save_graph_path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_30": {
                "x": {
                    "value": "tfweights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.get_variable('weights', initializer=tf.constant(softmaxInverse)))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_27": {
                "value": {
                    "value": "softmaxInverse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(node.weights / np.max(node.weights)).astype(dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/structure/leaves/parametric/Tensorflow.py": {
        "tensorflow": {
            "get_variable_18": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "node.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_19": {
                "variable": {
                    "value": "stdev",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "stdev",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "node.stdev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_21": {
                "variable": {
                    "value": "stdev",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "stdev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('stdev', initializer=node.stdev, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(stdev, 0.001)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('stdev', initializer=node.stdev, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(stdev, 0.001)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Normal_22": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('mean', initializer=node.mean, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.get_variable('lambda', initializer=node.mean, dtype=dtype), 0.001)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('mean', initializer=node.mean, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "stdev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('stdev', initializer=node.stdev, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(stdev, 0.001)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('stdev', initializer=node.stdev, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(stdev, 0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_31": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "node.l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_33": {
                "variable": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('rate', initializer=node.l, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(l, 0.001)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Exponential_34": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "l",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('rate', initializer=node.l, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(l, 0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_43": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.get_variable('lambda', initializer=node.mean, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Poisson_45": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('mean', initializer=node.mean, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.get_variable('lambda', initializer=node.mean, dtype=dtype), 0.001)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('mean', initializer=node.mean, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_54": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(tf.get_variable('p', initializer=node.p, dtype=dtype), 1e-08)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.9999999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Bernoulli_56": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.minimum(tf.maximum(tf.get_variable('p', initializer=node.p, dtype=dtype), 1e-08), 0.9999999)",
                            "Call"
                        ],
                        [
                            "np.array(node.p, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_65": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.get_variable('alpha', initializer=node.alpha, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_66": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.get_variable('beta', initializer=node.beta, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Gamma_68": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(tf.get_variable('alpha', initializer=node.alpha, dtype=dtype), 0.001)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(tf.get_variable('beta', initializer=node.beta, dtype=dtype), 0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "node.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "stdev",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "stdev",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "node.stdev",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_80": {
                "variable": {
                    "value": "stdev",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "stdev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('stdev', initializer=node.stdev, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(stdev, 0.001)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('stdev', initializer=node.stdev, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(stdev, 0.001)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.get_variable('p', initializer=tf.constant(softmaxInverse))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "'%s_%s' % (node.__class__.__name__, node.id)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Categorical_101": {
                "probs": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.get_variable('p', initializer=tf.constant(softmaxInverse)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_43": {
                "name": {
                    "value": "lambda",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "node.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "maximum_54": {
                "x": {
                    "value": "tf.get_variable('p', initializer=node.p, dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "name": {
                    "value": "alpha",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "node.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_66": {
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "node.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_96": {
                "name": {
                    "value": "p",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(softmaxInverse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_99": {
                "probs": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(tf.get_variable('p', initializer=tf.constant(softmaxInverse)))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_54": {
                "name": {
                    "value": "p",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "node.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Normal_82": {
                "loc": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('mean', initializer=node.mean, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.get_variable('lambda', initializer=node.mean, dtype=dtype), 0.001)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('mean', initializer=node.mean, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "stdev",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('stdev', initializer=node.stdev, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(stdev, 0.001)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('stdev', initializer=node.stdev, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.maximum(stdev, 0.001)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exp_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_96": {
                "value": {
                    "value": "softmaxInverse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(p / np.max(p)).astype(dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/tests/test_rat_spn.py": {
        "tensorflow": {
            "Session_25": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "input_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, num_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_13": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/tests/test_tensorflow.py": {
        "tensorflow": {
            "AdamOptimizer_112": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/algorithms/layerwise/clipper.py": {
        "torch": {
            "tensor_4": {
                "variable": {
                    "value": "LOWER_BOUND",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_5": {
                "variable": {
                    "value": "DEFAULT_DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "variable": {
                    "value": "self.lower_bound",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lower_bound",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/algorithms/layerwise/distributions.py": {
        "torch": {
            "zeros_92": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._get_base_distribution()",
                            "Call"
                        ],
                        [
                            "self._get_base_distribution()",
                            "Call"
                        ],
                        [
                            "self.representations",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "context.repetition_indices.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_543": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_556": {
                "variable": {
                    "value": "rep",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_100": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "leaf.sample(indices=idxs, repetition_indices=rep)",
                            "Call"
                        ],
                        [
                            "_mode(distribution, context)",
                            "Call"
                        ],
                        [
                            "distribution.sample(sample_shape=(context.n,))",
                            "Call"
                        ],
                        [
                            "tmp",
                            "Name"
                        ],
                        [
                            "torch.gather(samples, dim=2, index=context.parent_indices.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "dist_sample(distribution=d, context=context)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(samples, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(samples, dim=2, index=context.parent_indices.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "context.parent_indices.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(dropout)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.marginalization_constant",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Bernoulli_138": {
                "variable": {
                    "value": "self._bernoulli_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_149": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "~torch.isnan(x)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, in_features)",
                            "Call"
                        ],
                        [
                            "leaf(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "distribution.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "torch.where(~torch.isnan(x), x, self.marginalization_constant)",
                            "Call"
                        ],
                        [
                            "dist_forward(d, x)",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, 0, 0, self._pad_value], mode='reflect')",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self._n_dists, self.cardinality)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, self.out_channels, 1)",
                            "Call"
                        ],
                        [
                            "self._mv.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self._n_dists, self.out_channels)",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(results, dim=2)",
                            "Call"
                        ],
                        [
                            "self.sumlayer(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, self._pad_value // 2], mode='reflect')",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, 1, self._n_dists, self.cardinality)",
                            "Call"
                        ],
                        [
                            "self.gauss.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.permute((0, 2, 1))",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.marginalization_constant",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_195": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_196": {
                "variable": {
                    "value": "self.stds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_197": {
                "variable": {
                    "value": "self.gauss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.stds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_218": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_222": {
                "variable": {
                    "value": "probs_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_247": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channels * self._n_dists, cardinality)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_251": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_channels * self._n_dists",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "cardinality",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cardinality",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_257": {
                "variable": {
                    "value": "self.triangular",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "rand",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.rand(out_channels * self._n_dists, cardinality, cardinality)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_258": {
                "variable": {
                    "value": "self._mv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_tril": {
                    "value": "self.triangular",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_309": {
                "variable": {
                    "value": "self.concentration0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_310": {
                "variable": {
                    "value": "self.concentration1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Beta_311": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration0": {
                    "value": "self.concentration0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "self.concentration1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_330": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_331": {
                "variable": {
                    "value": "self.stds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Cauchy_332": {
                "variable": {
                    "value": "self.cauchy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.stds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_351": {
                "variable": {
                    "value": "self.df",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Chi2_352": {
                "variable": {
                    "value": "self.chi2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "df": {
                    "value": "self.df",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_371": {
                "variable": {
                    "value": "self.representations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "reprs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[distr(in_features, out_channels, num_repetitions, dropout) for distr in distributions]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_388": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[d(x) for d in self.representations]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_405": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "leaf.sample(indices=idxs, repetition_indices=rep)",
                            "Call"
                        ],
                        [
                            "_mode(distribution, context)",
                            "Call"
                        ],
                        [
                            "distribution.sample(sample_shape=(context.n,))",
                            "Call"
                        ],
                        [
                            "tmp",
                            "Name"
                        ],
                        [
                            "torch.gather(samples, dim=2, index=context.parent_indices.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "dist_sample(distribution=d, context=context)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(samples, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(samples, dim=2, index=context.parent_indices.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_445": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channels, self._n_dists, cardinality, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_446": {
                "variable": {
                    "value": "self.stds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(out_channels, self._n_dists, cardinality, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_447": {
                "variable": {
                    "value": "self.cov_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels, self._n_dists, cardinality, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LowRankMultivariateNormal_450": {
                "variable": {
                    "value": "self.gauss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cov_factor": {
                    "value": "self.cov_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cov_diag": {
                    "value": "self.stds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_499": {
                "variable": {
                    "value": "self.concentration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_500": {
                "variable": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Gamma_501": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "concentration": {
                    "value": "self.concentration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_519": {
                "variable": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Poisson_520": {
                "variable": {
                    "value": "self.poisson",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_223": {
                "probs": {
                    "value": "probs_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_265": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, in_features)",
                            "Call"
                        ],
                        [
                            "leaf(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "distribution.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "torch.where(~torch.isnan(x), x, self.marginalization_constant)",
                            "Call"
                        ],
                        [
                            "dist_forward(d, x)",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, 0, 0, self._pad_value], mode='reflect')",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self._n_dists, self.cardinality)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, self.out_channels, 1)",
                            "Call"
                        ],
                        [
                            "self._mv.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self._n_dists, self.out_channels)",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(results, dim=2)",
                            "Call"
                        ],
                        [
                            "self.sumlayer(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, self._pad_value // 2], mode='reflect')",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, 1, self._n_dists, self.cardinality)",
                            "Call"
                        ],
                        [
                            "self.gauss.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.permute((0, 2, 1))",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, self._pad_value]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_410": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "Call",
                    "possible_values": [
                        [
                            "leaf.sample(indices=idxs, repetition_indices=rep)",
                            "Call"
                        ],
                        [
                            "_mode(distribution, context)",
                            "Call"
                        ],
                        [
                            "distribution.sample(sample_shape=(context.n,))",
                            "Call"
                        ],
                        [
                            "tmp",
                            "Name"
                        ],
                        [
                            "torch.gather(samples, dim=2, index=context.parent_indices.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "dist_sample(distribution=d, context=context)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(samples, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(samples, dim=2, index=context.parent_indices.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "context.parent_indices.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_410": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_459": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, in_features)",
                            "Call"
                        ],
                        [
                            "leaf(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "distribution.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "torch.where(~torch.isnan(x), x, self.marginalization_constant)",
                            "Call"
                        ],
                        [
                            "dist_forward(d, x)",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, 0, 0, self._pad_value], mode='reflect')",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self._n_dists, self.cardinality)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, self.out_channels, 1)",
                            "Call"
                        ],
                        [
                            "self._mv.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self._n_dists, self.out_channels)",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(results, dim=2)",
                            "Call"
                        ],
                        [
                            "self.sumlayer(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, self._pad_value // 2], mode='reflect')",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, 1, self._n_dists, self.cardinality)",
                            "Call"
                        ],
                        [
                            "self.gauss.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.permute((0, 2, 1))",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, self._pad_value // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "check_valid(dropout, float, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_195": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_196": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_218": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_247": {
                "*size": {
                    "value": "out_channels * self._n_dists",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "cardinality",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_309": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_310": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_330": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_331": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_351": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_445": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self._n_dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cardinality",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_446": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self._n_dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cardinality",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_448": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self._n_dists",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cardinality",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_499": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_500": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_519": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "isnan_149": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, in_features)",
                            "Call"
                        ],
                        [
                            "leaf(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "distribution.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "torch.where(~torch.isnan(x), x, self.marginalization_constant)",
                            "Call"
                        ],
                        [
                            "dist_forward(d, x)",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, 0, 0, self._pad_value], mode='reflect')",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self._n_dists, self.cardinality)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, self.out_channels, 1)",
                            "Call"
                        ],
                        [
                            "self._mv.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, self._n_dists, self.out_channels)",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(results, dim=2)",
                            "Call"
                        ],
                        [
                            "self.sumlayer(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, self._pad_value // 2], mode='reflect')",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch_size, 1, self._n_dists, self.cardinality)",
                            "Call"
                        ],
                        [
                            "self.gauss.log_prob(x)",
                            "Call"
                        ],
                        [
                            "x.permute((0, 2, 1))",
                            "Call"
                        ],
                        [
                            "self._marginalize_input(x)",
                            "Call"
                        ],
                        [
                            "self._apply_dropout(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/algorithms/layerwise/layers.py": {
        "torch": {
            "Parameter_57": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(check_valid(dropout, float, 0.0, 1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_60": {
                "variable": {
                    "value": "ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.num_repetitions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "ws",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(self.in_features, self.in_channels, self.out_channels, self.num_repetitions)",
                            "Call"
                        ]
                    ]
                }
            },
            "Bernoulli_62": {
                "variable": {
                    "value": "self._bernoulli_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "probs": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_111": {
                "variable": {
                    "value": "logweights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logsumexp_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x + logweights",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(x, dim=2)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=(0, 0, 0, 0, 0, self._pad), value=0)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, 0, 0, 0, 0, self._pad], mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_172": {
                "variable": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.weights.data",
                            "Attribute"
                        ],
                        [
                            "weights[:, :, [0] * n, 0]",
                            "Subscript"
                        ],
                        [
                            "weights.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "tmp",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_239": {
                "variable": {
                    "value": "self._conv_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, 1, cardinality, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv3d_278": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x + logweights",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(x, dim=2)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=(0, 0, 0, 0, 0, self._pad), value=0)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, 0, 0, 0, 0, self._pad], mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self._conv_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.cardinality, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_375": {
                "variable": {
                    "value": "self.unraveled_channel_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([(i, j) for i in range(self.in_channels) for j in range(self.in_channels)])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "context.repetition_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "context.n",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.__device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "context.n",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ic",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.__device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_196": {
                "variable": {
                    "value": "cats",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "ic",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "log_weights.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gumbel_softmax_197": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "log_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(weights, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "hard": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "context.repetition_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.__device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_270": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x + logweights",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(x, dim=2)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=(0, 0, 0, 0, 0, self._pad), value=0)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, 0, 0, 0, 0, self._pad], mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, 0, self._pad)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "repeat_interleave_311": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context.parent_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "repeats": {
                    "value": "self.cardinality",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_403": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x + logweights",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(x, dim=2)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=(0, 0, 0, 0, 0, self._pad), value=0)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, 0, 0, 0, 0, self._pad], mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, 0, 0, self._pad]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "check_valid(dropout, float, 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_239": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cardinality",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "context.parent_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.__device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_303": {
                "variable": {
                    "value": "context.repetition_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.__device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_376": {
                "data": {
                    "value": "[(i, j) for i in range(self.in_channels) for j in range(self.in_channels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_441": {
                "variable": {
                    "value": "context.parent_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.__device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_442": {
                "variable": {
                    "value": "context.repetition_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.__device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/algorithms/layerwise/type_checks.py": {
        "torch": {}
    },
    "src/spn/algorithms/layerwise/utils.py": {
        "torch": {}
    },
    "src/spn/experiments/RandomSPNs_layerwise/distributions.py": {
        "torch": {
            "Parameter_43": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_70": {
                "variable": {
                    "value": "gauss",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.means",
                            "Attribute"
                        ],
                        [
                            "torch.sigmoid(self.means) * mean_range + self.min_mean",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.sqrt(sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.stds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.stds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1, in_features, out_channels, num_repetitions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "variable": {
                    "value": "sigma_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.stds",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_127": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.base_leaf(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[0, 0, 0, 0, 0, self._pad], mode='constant', value=0.0)",
                            "Call"
                        ],
                        [
                            "self.prod(x)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, 0, 0, self._pad]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_43": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_70": {
                "input": {
                    "value": "sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.min_sigma + (self.max_sigma - self.min_sigma) * sigma_ratio",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_47": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_50": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "input": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/RandomSPNs_layerwise/rat_spn.py": {
        "torch": {
            "empty_24": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "p.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "p.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_25": {
                "variable": {
                    "value": "s[p]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "p.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_119": {
                "variable": {
                    "value": "self.rand_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.config.F, self.config.R)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_216": {
                "variable": {
                    "value": "self._inner_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_249": {
                "variable": {
                    "value": "self._sampling_root.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(size=(1, self.config.C, 1, 1)) * torch.tensor(1 / self.config.C)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "self.rand_indices[:, r]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.permutation(self.config.F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "ctx.repetition_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "evidence.shape[0]",
                            "Subscript"
                        ],
                        [
                            "indices.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "int",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.__device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_378": {
                "variable": {
                    "value": "nan_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "evidence",
                    "type": "Name",
                    "possible_values": [
                        [
                            "evidence.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_250": {
                "size": {
                    "value": "(1, self.config.C, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_250": {
                "data": {
                    "value": "1 / self.config.C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "class_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.__device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_338": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.__device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/RandomSPNs_layerwise/train_mnist.py": {
        "torch": {
            "DataLoader_71": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=True, download=True, transform=transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('../data', train=False, transform=transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_139": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_230": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_125": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_128": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_298": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/layers/Vectorized.py": {
        "torch": {
            "from_numpy_158": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.random.rand(256, nf).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.round(train_data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/spn/experiments/layers/mnist_test.py": {
        "torch": {
            "stack_34": {
                "variable": {
                    "value": "pixels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rows",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_113": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros((data.shape[0], 1)), data]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "[labels.unsqueeze(1).float(), pixels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_120": {
                "input": {
                    "value": "torch.cat(results, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_136": {
                "tensor": {
                    "value": "testds",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "(data.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/layers/pytorch.py": {
        "torch": {
            "Sequential_208": {
                "variable": {
                    "value": "spn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*torchlayers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_28": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "lls",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.n_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_87": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_88": {
                "variable": {
                    "value": "self.sparse_scopes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_124": {
                "variable": {
                    "value": "lls",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.n_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ParameterList_147": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_159": {
                "variable": {
                    "value": "lls",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0], self.n_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_180": {
                "variable": {
                    "value": "self.scope_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "sparse_scope",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.sparse.FloatTensor(indices, values, torch.Size(coo.shape)), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "self.sparse_scopes[sparse_scopes_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.sparse.FloatTensor(torch.LongTensor(indices), torch.FloatTensor(values), torch.Size(coo.shape))",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Categorical_13": {
                "logits": {
                    "value": "torch.log(torch.clamp(params, 1e-09, 0.999999999))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_15": {
                "loc": {
                    "value": "params[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.max(params[:, 1], torch.tensor(1e-05, device=params.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(node_params[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isnan_66": {
                "variable": {
                    "value": "nan_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, scopes].squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "sparse_scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.sparse.FloatTensor(indices, values, torch.Size(coo.shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.log(torch.tensor(layer.weights[i])).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_120": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.log(torch.tensor(layer.weights[i])).unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "self.weights[weights_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.log(torch.nn.functional.softmax(weights, dim=0))",
                            "Call"
                        ],
                        [
                            "self.weights[i]",
                            "Subscript"
                        ],
                        [
                            "torch.log(torch.nn.functional.softmax(weights, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_130": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.softmax(weights, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_136": {
                "variable": {
                    "value": "lls[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.sparse.mm(sparse_scope, x.T) + weights",
                            "BinOp"
                        ],
                        [
                            "x[:, self.idxs[i]] + weights",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_155": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.log(torch.tensor(layer.weights[i])).unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "self.weights[weights_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.log(torch.nn.functional.softmax(weights, dim=0))",
                            "Call"
                        ],
                        [
                            "self.weights[i]",
                            "Subscript"
                        ],
                        [
                            "torch.log(torch.nn.functional.softmax(weights, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_163": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.softmax(weights, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_165": {
                "variable": {
                    "value": "lls[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.sparse.mm(sparse_scope, x.T) + weights",
                            "BinOp"
                        ],
                        [
                            "x[:, self.idxs[i]] + weights",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "lls[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_15": {
                "input": {
                    "value": "params[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_187": {
                "input": {
                    "value": "self.scope_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isinf_191": {
                "input": {
                    "value": "pll",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sparse.mm(self.scope_matrix, x.T).T",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_14": {
                "input": {
                    "value": "torch.clamp(params, 1e-09, 0.999999999)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "params.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "node_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_106": {
                "input": {
                    "value": "torch.tensor(layer.weights[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_106": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.log(torch.tensor(layer.weights[i])).unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "self.weights[weights_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.log(torch.nn.functional.softmax(weights, dim=0))",
                            "Call"
                        ],
                        [
                            "self.weights[i]",
                            "Subscript"
                        ],
                        [
                            "torch.log(torch.nn.functional.softmax(weights, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_134": {
                "input": {
                    "value": "sparse_scope",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.sparse.FloatTensor(indices, values, torch.Size(coo.shape)), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "self.sparse_scopes[sparse_scopes_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.sparse.FloatTensor(torch.LongTensor(indices), torch.FloatTensor(values), torch.Size(coo.shape))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "data": {
                    "value": "torch.log(torch.tensor(layer.nodes[i].weights))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "idx.tocsr().indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.log(torch.tensor(layer.weights[i])).unsqueeze(-1))",
                            "Call"
                        ],
                        [
                            "self.weights[weights_idx]",
                            "Subscript"
                        ],
                        [
                            "torch.log(torch.nn.functional.softmax(weights, dim=0))",
                            "Call"
                        ],
                        [
                            "self.weights[i]",
                            "Subscript"
                        ],
                        [
                            "torch.log(torch.nn.functional.softmax(weights, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_14": {
                "input": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.tensor(node_params[0]), requires_grad=requires_grad)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "0.999999999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_150": {
                "input": {
                    "value": "torch.tensor(layer.nodes[i].weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_150": {
                "data": {
                    "value": "layer.nodes[i].weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "data": {
                    "value": "layer.weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/experiments/layers/pytorch_parametric.py": {
        "torch": {
            "arange_109": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_105": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "target": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_121": {
                "input": {
                    "value": "1 + torch.exp(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_93": {
                "input": {
                    "value": "self.probs.expand(shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_100": {
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "target": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_118": {
                "input": {
                    "value": "self.probs / (1 - self.probs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_121": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/gpu/PyTorch/Network.py": {
        "torch": {
            "sum_211": {
                "variable": {
                    "value": "negative_log_likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-log_p + log_z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_62": {
                "data": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tensor.cuda()",
                            "Call"
                        ],
                        [
                            "tensor.cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "ndarray": {
                    "value": "np.log(std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "ndarray": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.tensor_to_param(torch.from_numpy(weights), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "self.tensor_to_param(torch.from_numpy(weights), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "ndarray": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.tensor_to_param(torch.from_numpy(weights), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "self.tensor_to_param(torch.from_numpy(weights), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_147": {
                "*size": {
                    "value": "(lower_level.num, upper_level.num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "ndarray": {
                    "value": "connections.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "ndarray": {
                    "value": "connections",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.tensor_to_var(torch.ones((lower_level.num, upper_level.num)))",
                            "Call"
                        ],
                        [
                            "self.tensor_to_var(torch.from_numpy(connections.astype('float32')))",
                            "Call"
                        ],
                        [
                            "self.tensor_to_var(torch.from_numpy(np.ones(weights.shape).astype('float32'))).detach()",
                            "Call"
                        ],
                        [
                            "self.tensor_to_var(torch.from_numpy(connections), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_170": {
                "ndarray": {
                    "value": "np.ones(weights.shape).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/gpu/PyTorch/Nodes.py": {
        "torch": {
            "log_66": {
                "variable": {
                    "value": "self.val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_139": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_164": {
                "variable": {
                    "value": "self.val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.val",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_52": {
                "input": {
                    "value": "e.child.val",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_61": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "e.child.val - maxval",
                            "BinOp"
                        ],
                        [
                            "torch.exp(temp)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.input.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "batch",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.child_edges[0].child.val.size()[0]",
                            "Subscript"
                        ],
                        [
                            "self.child_edges[0].child.val.size()[0]",
                            "Subscript"
                        ],
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_47": {
                "input": {
                    "value": "torch.FloatTensor([-75])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_56": {
                "variable": {
                    "value": "maxval",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.max(torch.max(e.child.val))",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_63": {
                "input": {
                    "value": "temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "e.child.val - maxval",
                            "BinOp"
                        ],
                        [
                            "torch.exp(temp)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "true_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "e.weights * e.connections",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_89": {
                "*size": {
                    "value": "(batch, self.num)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_91": {
                "input": {
                    "value": "e.child.val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "e.connections",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "ndarray": {
                    "value": "marginalize_connections.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "ndarray": {
                    "value": "connections.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "x_onehot.astype('float32').reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/gpu/PyTorch/Param.py": {
        "torch": {
            "ParameterList_10": {
                "variable": {
                    "value": "self.parameter_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/tests/test_layerwise.py": {
        "torch": {
            "rand_37": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "9",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "[1, 5, 10]",
                            "List"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "[1, 5, 10]",
                            "List"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "sum_layer.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand(in_features, in_channels, out_channels, num_repetitions)",
                            "Call"
                        ],
                        [
                            "F.softmax(w, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.rand(in_features, in_channels, out_channels, num_repetitions)",
                            "Call"
                        ],
                        [
                            "F.softmax(w, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, in_features, in_channels, num_repetitions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "expected_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "9",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "[1, 5, 10]",
                            "List"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, in_features, in_channels, num_repetitions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_84": {
                "variable": {
                    "value": "expected_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features // cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "[1, 5, 10]",
                            "List"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, in_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_115": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "9",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "[1, 5, 10]",
                            "List"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "rand_116": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "9",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "[1, 5, 10]",
                            "List"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "expected_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "9",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "[1, 5, 10]",
                            "List"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "randint_176": {
                "variable": {
                    "value": "parent_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "out_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(n, in_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_185": {
                "variable": {
                    "value": "rand_indxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "[1, 5, 10]",
                            "List"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(in_features, num_repetitions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_186": {
                "variable": {
                    "value": "rep_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "num_repetitions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(n,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_features",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "9",
                            "Constant"
                        ],
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "[1, 5, 10]",
                            "List"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "[1, 5, 10]",
                            "List"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "out_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "num_repetitions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_192": {
                "variable": {
                    "value": "sum_layer.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.log(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_247": {
                "variable": {
                    "value": "leaf.means.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, in_features, out_channels, num_repetitions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "leaf.stds.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, in_features, out_channels, num_repetitions)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_254": {
                "variable": {
                    "value": "parent_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "out_channels",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(1, in_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_255": {
                "variable": {
                    "value": "repetition_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "num_repetitions",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "7",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_280": {
                "variable": {
                    "value": "x_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_320": {
                "variable": {
                    "value": "x_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_413": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "config.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_446": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(batch_size)",
                            "Call"
                        ],
                        [
                            "range(batch_size)",
                            "Call"
                        ],
                        [
                            "range(batch_size)",
                            "Call"
                        ],
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "config.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_468": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "config.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_482": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "randint_213": {
                "variable": {
                    "value": "parent_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_samples, in_features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "variable": {
                    "value": "expected_sample_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "expected_sample_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(expected_sample_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_192": {
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(in_features, in_channels, out_channels, num_repetitions)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_356": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_365": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_366": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/tests/test_parameter_space.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "temp_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(4, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "data": {
                    "value": "torch.zeros(4, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/spn/tests/test_pytorch.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}