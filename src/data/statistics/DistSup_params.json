{
    "distsup/models/som_vae.py": {
        "sklearn": {},
        "torch": {
            "LSTM_48": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_58": {
                "variable": {
                    "value": "p_x_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "p_x_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.h_size, self.in_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_95": {
                "variable": {
                    "value": "reco_loss_e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reco_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(info['ze'].contiguous().view(*input_shape, -1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['features']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_96": {
                "variable": {
                    "value": "reco_loss_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reco_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(info['zq'].contiguous().view(*input_shape, -1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['features']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.in_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distsup/models/spec_vae.py": {
        "sklearn": {},
        "torch": {
            "Sequential_39": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(input_dim, 128, self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_47": {
                "variable": {
                    "value": "encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoding.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(encoding, (0, self.kernel_size - 1, 0, 0))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.kernel_size - 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.z_q_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_118": {
                "variable": {
                    "value": "q_z_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "p_x_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.z_size, self.h_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "p_x_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "p_x_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.h_size, self.x_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_134": {
                "variable": {
                    "value": "x_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.reverse_sequences(x, x_lens)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_rev, x_lens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "utils.reverse_sequences(x, x_lens)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_rev, x_lens, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['features_len']",
                            "Subscript"
                        ],
                        [
                            "batch['features_len']",
                            "Subscript"
                        ],
                        [
                            "batch['features_len']",
                            "Subscript"
                        ],
                        [
                            "batch['features_len']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_150": {
                "variable": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mus, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mus, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_151": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(scales, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(scales, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(zs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(zs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "variable": {
                    "value": "z_mu_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_mu.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_161": {
                "variable": {
                    "value": "z_scale_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_scale.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_mu_0, z_mu[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "z_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_scale_0, z_scale[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "info[frame_acc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "details['acc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_282": {
                "variable": {
                    "value": "self.z_q_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.z_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_286": {
                "variable": {
                    "value": "q_z_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_290": {
                "variable": {
                    "value": "p_x_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(size, self.h_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "p_x_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_295": {
                "variable": {
                    "value": "p_x_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.h_size, self.x_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_300": {
                "variable": {
                    "value": "x_pack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['features'][..., 0]",
                            "Subscript"
                        ],
                        [
                            "batch['features'][..., 0]",
                            "Subscript"
                        ],
                        [
                            "batch['features'][..., 0]",
                            "Subscript"
                        ],
                        [
                            "batch['features'][..., 0]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['features_len']",
                            "Subscript"
                        ],
                        [
                            "batch['features_len']",
                            "Subscript"
                        ],
                        [
                            "batch['features_len']",
                            "Subscript"
                        ],
                        [
                            "batch['features_len']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_302": {
                "variable": {
                    "value": "(rnn_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.pad_and_reverse(rnn_output, x_lens)",
                            "Call"
                        ],
                        [
                            "utils.pad_and_reverse(rnn_output, x_lens)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_305": {
                "variable": {
                    "value": "(q_mean, q_logscale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "q_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_output.gather(1, mask.long())[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_306": {
                "variable": {
                    "value": "q_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_logscale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Normal_307": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "q_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "q_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(q_logscale)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_313": {
                "variable": {
                    "value": "x_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.reverse_sequences(x, x_lens)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_rev, x_lens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "utils.reverse_sequences(x, x_lens)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(x_rev, x_lens, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['features_len']",
                            "Subscript"
                        ],
                        [
                            "batch['features_len']",
                            "Subscript"
                        ],
                        [
                            "batch['features_len']",
                            "Subscript"
                        ],
                        [
                            "batch['features_len']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_329": {
                "variable": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mus, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mus, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_330": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(scales, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(scales, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_331": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(zs, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(zs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_339": {
                "variable": {
                    "value": "z_mu_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_mu.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_340": {
                "variable": {
                    "value": "z_scale_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_scale.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_mu_0, z_mu[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_345": {
                "variable": {
                    "value": "z_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_scale_0, z_scale[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_401": {
                "variable": {
                    "value": "info[frame_acc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "details['acc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Normal_144": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_mu.contiguous().view(bsz, t, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_mu_0, z_mu[:, :-1]], dim=1)",
                            "Call"
                        ],
                        [
                            "z_mu.contiguous().view(bsz, t, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_mu_0, z_mu[:, :-1]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "z_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_scale.contiguous().view(bsz, t, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_scale_0, z_scale[:, :-1]], dim=1)",
                            "Call"
                        ],
                        [
                            "z_scale.contiguous().view(bsz, t, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_scale_0, z_scale[:, :-1]], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_174": {
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_x_mu(context)",
                            "Call"
                        ],
                        [
                            "self.p_x_mu(context)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_x_scale(context)",
                            "Call"
                        ],
                        [
                            "self.p_x_scale(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_323": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_mu.contiguous().view(bsz, t, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_mu_0, z_mu[:, :-1]], dim=1)",
                            "Call"
                        ],
                        [
                            "z_mu.contiguous().view(bsz, t, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_mu_0, z_mu[:, :-1]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "z_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_scale.contiguous().view(bsz, t, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_scale_0, z_scale[:, :-1]], dim=1)",
                            "Call"
                        ],
                        [
                            "z_scale.contiguous().view(bsz, t, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_scale_0, z_scale[:, :-1]], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_353": {
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_x_mu(context)",
                            "Call"
                        ],
                        [
                            "self.p_x_mu(context)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.p_x_scale(context)",
                            "Call"
                        ],
                        [
                            "self.p_x_scale(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_39": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_40": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_42": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_75": {
                "input": {
                    "value": "out.contiguous().view(-1, out.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "labels.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "*size": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_202": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x_lens - 1).unsqueeze(1).unsqueeze(2).expand(-1, x.size(1), rnn_output.size(2))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_282": {
                "*size": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_292": {
                "in_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_295": {
                "in_features": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.x_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_350": {
                "tensors": {
                    "value": "(z, f.unsqueeze(1).expand(bsz, time, dim))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_383": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x_lens - 1).unsqueeze(1).unsqueeze(2).expand(-1, x.size(1), rnn_output.size(2))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_321": {
                "tensors": {
                    "value": "(rnn_output[:, t - 1, :], f)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_249": {
                "input": {
                    "value": "torch.stack(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_430": {
                "input": {
                    "value": "torch.stack(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_249": {
                "tensors": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_430": {
                "tensors": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_191": {
                "input": {
                    "value": "var_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_q ** 2",
                            "BinOp"
                        ],
                        [
                            "scale_q ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_371": {
                "input": {
                    "value": "var_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_q ** 2",
                            "BinOp"
                        ],
                        [
                            "scale_q ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "distsup/models/streamtokenizer.py": {
        "sklearn": {},
        "torch": {
            "repeat_interleave_132": {
                "variable": {
                    "value": "alignment_es",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alignment_es.detach().cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.round(features.size(1) / alignment_es.size(1)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/bottlenecks.py": {
        "sklearn": {
            "k_means_323": {
                "variable": {
                    "value": "(clustered, *_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "encodings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reestimation_reservoir.contents()",
                            "Call"
                        ],
                        [
                            "encodings.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding.weight.size(0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_216": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding.weight.size(0)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "self.reestimation_data[:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[Globals.epoch, Globals.current_iteration, Globals.epoch + self.reestimate_every_epochs, next_reest_iter]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_325": {
                "variable": {
                    "value": "self.embedding.weight.data[...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "clustered",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_440": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "indices.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "codes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histc_463": {
                "variable": {
                    "value": "code_freqs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding.weight.size(0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "num_tokens - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Categorical_471": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "code_freqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.histc(indices.float(), bins=num_tokens, min=-0.5, max=num_tokens - 0.5).float()",
                            "Call"
                        ],
                        [
                            "code_freqs / count",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_484": {
                "variable": {
                    "value": "states_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "N + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_484": {
                "variable": {
                    "value": "states_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_487": {
                "variable": {
                    "value": "weights_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "states_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, N + 1, dtype=torch.int64).view(1, N + 1).repeat((N + 1, 1)).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_489": {
                "variable": {
                    "value": "terminal_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N + 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_489": {
                "variable": {
                    "value": "terminal_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_535": {
                "variable": {
                    "value": "(_, seg_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cdist_596": {
                "variable": {
                    "value": "distances_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "codebook",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_598": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x.shape[:-1] + (1,), device=x.device, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "self.unpack_x(indices, enc_len)",
                            "Call"
                        ],
                        [
                            "torch.min(distances_matrix, dim=-1)[1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "m.sample()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(device=inputs.device).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "compute_indices(inputs_flat, codebook, **criterion_kwargs)",
                            "Call"
                        ],
                        [
                            "VectorQuantization.flatten(indices)",
                            "Call"
                        ],
                        [
                            "IndicesComputation.nearest(inputs_flat, codebook)",
                            "Call"
                        ],
                        [
                            "indices * indices_weight.long() - (1 - indices_weight).long()",
                            "BinOp"
                        ],
                        [
                            "indices.view(-1)[remain_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.argmax(scores, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "indices.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "indices.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_598": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_641": {
                "variable": {
                    "value": "vq_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "codes * fc + bias",
                            "BinOp"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "self.unpack_x(codes, enc_len)",
                            "Call"
                        ],
                        [
                            "codebook[indices.view(-1), :]",
                            "Subscript"
                        ],
                        [
                            "codebook[indices.view(-1), :] * indices_weight.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(scores, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes + self.straight_through_alpha * (x - x.detach())",
                            "BinOp"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores + (one_hot.float() - scores).detach()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(codes, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores + (one_hot.float() - scores).detach()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(codes, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_654": {
                "variable": {
                    "value": "code_disp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "codebook",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_666": {
                "variable": {
                    "value": "vec_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(x_seqs, batch_first=True).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2).contiguous().view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, C, H, W).permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "(x - bias) / fc",
                            "BinOp"
                        ],
                        [
                            "self.pack_x(x, enc_len)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim).contiguous()",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, x.size(-1))",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim).contiguous()",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim).contiguous()",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim).contiguous()",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sort_667": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vec_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_668": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_703": {
                "variable": {
                    "value": "vq_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "codes * fc + bias",
                            "BinOp"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "self.unpack_x(codes, enc_len)",
                            "Call"
                        ],
                        [
                            "codebook[indices.view(-1), :]",
                            "Subscript"
                        ],
                        [
                            "codebook[indices.view(-1), :] * indices_weight.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(scores, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes + self.straight_through_alpha * (x - x.detach())",
                            "BinOp"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores + (one_hot.float() - scores).detach()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(codes, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores + (one_hot.float() - scores).detach()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(codes, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_714": {
                "variable": {
                    "value": "code_disp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "codebook",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_736": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(num_tokens)",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_740": {
                "variable": {
                    "value": "self.trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(num_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_742": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_756": {
                "variable": {
                    "value": "z_q_old",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_q[:, 0:1], z_q[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_757": {
                "variable": {
                    "value": "out_probabilities_old",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.trans(z_q_old)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_759": {
                "variable": {
                    "value": "weighted_z_dist_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_z_dist_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dist_flat * out_probabilities_old",
                            "BinOp"
                        ],
                        [
                            "torch.mean(weighted_z_dist_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_765": {
                "variable": {
                    "value": "z_q_old",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_q[:, 0:1], z_q[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_767": {
                "variable": {
                    "value": "loss_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.contiguous().view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "k.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "lt_776": {
                "variable": {
                    "value": "k1_not_top",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k // self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.num_tokens[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_777": {
                "variable": {
                    "value": "k1_not_bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k // self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_778": {
                "variable": {
                    "value": "k2_not_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k % self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.num_tokens[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gt_779": {
                "variable": {
                    "value": "k2_not_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k % self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_781": {
                "variable": {
                    "value": "k1_up",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "k1_not_top",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(k_1, self.num_tokens[0] - 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.add(k_1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "k_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k // self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_782": {
                "variable": {
                    "value": "k1_down",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "k1_not_bottom",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(k_1, 0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.sub(k_1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "k_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k // self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_783": {
                "variable": {
                    "value": "k2_right",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "k2_not_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lt(k_2, self.num_tokens[1] - 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.add(k_2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "k_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k % self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_784": {
                "variable": {
                    "value": "k2_left",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "k2_not_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gt(k_2, 0)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.sub(k_2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "k_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k % self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_785": {
                "variable": {
                    "value": "z_q_up",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "k1_not_top.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "codebook[k1_up * self.num_tokens[1] + k_2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(batch_size, self.latent_dim).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_787": {
                "variable": {
                    "value": "z_q_down",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "k1_not_bottom.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "codebook[k1_down * self.num_tokens[1] + k_2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(batch_size, self.latent_dim).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_789": {
                "variable": {
                    "value": "z_q_right",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "k2_not_right.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "codebook[k_1 * self.num_tokens[1] + k2_right]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(batch_size, self.latent_dim).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_791": {
                "variable": {
                    "value": "z_q_left",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "k2_not_left.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "codebook[k_1 * self.num_tokens[1] + k2_left]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(batch_size, self.latent_dim).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_793": {
                "variable": {
                    "value": "z_q_neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_q, z_q_up, z_q_down, z_q_right, z_q_left]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_808": {
                "variable": {
                    "value": "z_dist_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "z_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "z_e.contiguous().view(*inp_shape, -1)",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "self.embedding.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmin_811": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_dist_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cdist(z_e, self.embedding.weight)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_846": {
                "variable": {
                    "value": "self.z_q_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(latent_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_853": {
                "variable": {
                    "value": "z_mu_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_mu.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_854": {
                "variable": {
                    "value": "z_scale_0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_scale.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_857": {
                "variable": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_mu_0, z_mu[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_859": {
                "variable": {
                    "value": "z_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_scale_0, z_scale[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_877": {
                "variable": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mus, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_878": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(scales, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_879": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(zs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_927": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_928": {
                "variable": {
                    "value": "self.codebook",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding.weight.size(0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_955": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out / self.get_temperature()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_956": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(out / self.get_temperature(), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(out / self.get_temperature(), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(out / self.get_temperature(), dim=-1)",
                            "Call"
                        ],
                        [
                            "scores + explor.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_957": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(out / self.get_temperature(), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(out / self.get_temperature(), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(out / self.get_temperature(), dim=-1)",
                            "Call"
                        ],
                        [
                            "scores + explor.detach()",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.codebook.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_973": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_990": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out / self.get_temperature()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_992": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x.shape[:-1] + (1,), device=x.device, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "self.unpack_x(indices, enc_len)",
                            "Call"
                        ],
                        [
                            "torch.min(distances_matrix, dim=-1)[1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "m.sample()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(device=inputs.device).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "compute_indices(inputs_flat, codebook, **criterion_kwargs)",
                            "Call"
                        ],
                        [
                            "VectorQuantization.flatten(indices)",
                            "Call"
                        ],
                        [
                            "IndicesComputation.nearest(inputs_flat, codebook)",
                            "Call"
                        ],
                        [
                            "indices * indices_weight.long() - (1 - indices_weight).long()",
                            "BinOp"
                        ],
                        [
                            "indices.view(-1)[remain_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.argmax(scores, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "indices.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "indices.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "scores.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_995": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "codes * fc + bias",
                            "BinOp"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "self.unpack_x(codes, enc_len)",
                            "Call"
                        ],
                        [
                            "codebook[indices.view(-1), :]",
                            "Subscript"
                        ],
                        [
                            "codebook[indices.view(-1), :] * indices_weight.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(scores, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes + self.straight_through_alpha * (x - x.detach())",
                            "BinOp"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores + (one_hot.float() - scores).detach()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(codes, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores + (one_hot.float() - scores).detach()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(codes, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.codebook.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_1035": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out / self.get_temperature()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_1042": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x.shape[:-1] + (1,), device=x.device, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "self.unpack_x(indices, enc_len)",
                            "Call"
                        ],
                        [
                            "torch.min(distances_matrix, dim=-1)[1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "m.sample()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).to(device=inputs.device).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "compute_indices(inputs_flat, codebook, **criterion_kwargs)",
                            "Call"
                        ],
                        [
                            "VectorQuantization.flatten(indices)",
                            "Call"
                        ],
                        [
                            "IndicesComputation.nearest(inputs_flat, codebook)",
                            "Call"
                        ],
                        [
                            "indices * indices_weight.long() - (1 - indices_weight).long()",
                            "BinOp"
                        ],
                        [
                            "indices.view(-1)[remain_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.argmax(scores, dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "indices.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores.argmax(dim=-1).detach()",
                            "Call"
                        ],
                        [
                            "indices.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "indices.transpose(-1, dim)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "scores.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_1045": {
                "variable": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "codes * fc + bias",
                            "BinOp"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "self.unpack_x(codes, enc_len)",
                            "Call"
                        ],
                        [
                            "codebook[indices.view(-1), :]",
                            "Subscript"
                        ],
                        [
                            "codebook[indices.view(-1), :] * indices_weight.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(scores, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes + self.straight_through_alpha * (x - x.detach())",
                            "BinOp"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores + (one_hot.float() - scores).detach()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(codes, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "scores + (one_hot.float() - scores).detach()",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(codes, self.codebook.weight)",
                            "Call"
                        ],
                        [
                            "codes.transpose(-1, dim)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.codebook.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_1053": {
                "variable": {
                    "value": "explor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(out / self.get_temperature(), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(out / self.get_temperature(), dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(out / self.get_temperature(), dim=-1)",
                            "Call"
                        ],
                        [
                            "scores + explor.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_65": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(-1, x.size(-1)).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_72": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.view(-1, z.size(-1)).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_157": {
                "variable": {
                    "value": "self.buffer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "samples.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "samples.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_211": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.adapt_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "masked_select_343": {
                "variable": {
                    "value": "x_sel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(x_seqs, batch_first=True).unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2).contiguous().view(N, C, -1)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "x.view(N, C, H, W).permute(0, 2, 3, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "(x - bias) / fc",
                            "BinOp"
                        ],
                        [
                            "self.pack_x(x, enc_len)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim).contiguous()",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(-1, x.size(-1))",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim).contiguous()",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim).contiguous()",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(-1, dim).contiguous()",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_mask1d(x_lens.to(x.device)).unsqueeze(-1).unsqueeze(-1) > 0",
                            "Compare"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_352": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x_seqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.split(tuple(x_lens))",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_352": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_361": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(-1, x.size(-1)).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_377": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(-1, x.size(-1)).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_384": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(-1, x.size(-1)).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_410": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[:-1] + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_445": {
                "variable": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "codes.view(-1, codes.size(-1)).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_528": {
                "variable": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_probs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cdist_583": {
                "variable": {
                    "value": "distances_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "codebook",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Normal_871": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_mu.contiguous().view(bsz, t, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_mu_0, z_mu[:, :-1]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "z_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_scale.contiguous().view(bsz, t, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_scale_0, z_scale[:, :-1]], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_932": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding.weight.size(0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_1066": {
                "variable": {
                    "value": "explor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ucb_exploration * 2.0 * torch.log(self.counts.sum() / self.counts)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bincount_1070": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "indices.view(-1).detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "minlength": {
                    "value": "self.counts.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_124": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_248": {
                "data": {
                    "value": "[Globals.epoch, Globals.current_iteration, reestimate_every_epochs, int(reestimate_every_iters), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_442": {
                "input": {
                    "value": "torch.tensor(self.embedding.weight.size(0), dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_516": {
                "input": {
                    "value": "torch.empty(weights_mat.size(-1), device=weights_mat.device).fill_(self.self_loop_bonus_estimate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cdist_524": {
                "x1": {
                    "value": "x.detach().reshape(-1, proto_weights.shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "proto_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding.weight",
                            "Attribute"
                        ],
                        [
                            "self.embedding.weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "enable_grad_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_579": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_586": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_588": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-distances_matrix / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_589": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(-distances_matrix / temperature, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_628": {
                "data": {
                    "value": "[use_copy_through]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_781": {
                "input": {
                    "value": "k_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k // self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sub_782": {
                "input": {
                    "value": "k_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k // self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_783": {
                "input": {
                    "value": "k_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k % self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sub_784": {
                "input": {
                    "value": "k_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k % self.num_tokens[1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_786": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_788": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_790": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_792": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_q.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_846": {
                "*size": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_974": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_1015": {
                "*size": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding.weight.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_66": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_67": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_73": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_74": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_123": {
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_123": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.transpose(-1, dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_362": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_363": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_378": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_379": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_385": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_386": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_442": {
                "data": {
                    "value": "self.embedding.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_446": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "std_447": {
                "input": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(z.view(-1, z.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x.view(-1, x.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(codes.view(-1, codes.size(-1)).contiguous(), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_517": {
                "*size": {
                    "value": "weights_mat.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "weights_mat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_633": {
                "data": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices",
                            "variable"
                        ]
                    ]
                }
            },
            "sqrt_1059": {
                "variable": {
                    "value": "explor[b, i, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ucb_exploration * 2.0 * torch.log(self.counts.sum() / self.counts)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_1068": {
                "input": {
                    "value": "self.counts.sum() / self.counts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_586": {
                "input": {
                    "value": "distances_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cdist(inputs, codebook)",
                            "Call"
                        ],
                        [
                            "torch.cdist(inputs, codebook)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_889": {
                "input": {
                    "value": "var_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_q ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_1061": {
                "input": {
                    "value": "self.counts.sum() / self.counts",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/aligner.py": {
        "torch": {
            "tensor_1152": {
                "variable": {
                    "value": "mylogprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-0.0, -13.962, -23.1881, -18.6309, -21.9276, -21.4505, -15.4502, -21.7958, -17.4019, -20.4657, -21.2391, -18.8014, -25.8747, -20.6013, -29.6001, -22.9801, -17.6486, -20.254, -20.9769, -21.6086, -17.7701, -14.7663, -18.6713, -18.0158, -18.4053, -24.8438, -36.9585, -14.0385, -20.4455, -20.6708, -15.1912, -19.2747, -22.526, -20.1671, -21.7179, -19.6354, -22.8083, -27.2353, -18.7717, -20.1562, -24.7157, -18.7732, -23.967, -19.5851, -21.0046, -29.2015, -14.8001, -26.2165, -19.1668, -19.2888, -21.0671, -21.8788, -26.534, -23.7708, -25.6324, -16.1936, -25.9904, -24.0358, -20.3967, -15.2838, -29.5235, -20.0191, -20.4623, -25.8248, -20.7026, -17.587, -26.7759, -24.8957], [-0.0001, -11.4726, -15.8401, -17.214, -16.4461, -18.1099, -11.4369, -16.1479, -11.7512, -12.9534, -15.3252, -12.86, -19.6133, -15.6562, -23.5516, -18.1197, -11.9423, -12.39, -18.1929, -15.7402, -12.0273, -12.1579, -13.6992, -13.0294, -11.9877, -16.0261, -26.9402, -11.9732, -15.6247, -14.0538, -11.8318, -15.5793, -16.8586, -15.8972, -16.7129, -13.0778, -16.9743, -20.0113, -14.9004, -15.9663, -18.4604, -12.4369, -20.2782, -15.6113, -14.5692, -23.1558, -10.8254, -20.8961, -15.6453, -15.778, -18.7081, -15.6663, -21.2306, -17.7183, -21.3342, -12.4544, -17.0469, -19.5063, -16.8705, -11.1556, -23.2844, -16.3018, -13.9419, -18.4861, -14.3801, -13.9396, -20.7307, -18.9278], [-0.4946, -10.989, -9.6145, -14.4803, -11.6633, -14.9429, -10.5413, -8.8707, -10.6186, -5.6293, -8.163, -7.2985, -14.2162, -7.9735, -15.6695, -11.9873, -4.4205, -8.7767, -18.4433, -14.3625, -4.3399, -15.4782, -8.1939, -3.8534, -6.4781, -11.0122, -17.2646, -13.0473, -10.3627, -7.5607, -8.1184, -12.9345, -11.0987, -11.2792, -18.3102, -1.111, -10.794, -18.3144, -12.5329, -7.8087, -12.9726, -6.7561, -16.287, -12.1989, -7.948, -19.1146, -8.3319, -13.3906, -14.7972, -12.2693, -16.1299, -11.4283, -16.3586, -15.7596, -20.6447, -7.952, -8.5888, -16.9559, -16.4546, -5.9243, -17.7056, -17.8127, -9.6809, -10.0776, -6.9463, -9.0122, -16.8663, -14.4187], [-6.2827, -10.1348, -16.0833, -4.8323, -10.1315, -11.7466, -15.4324, -11.9646, -16.0185, -14.8263, -7.2877, -7.908, -10.0412, -0.0539, -8.9935, -7.9229, -7.4328, -16.1447, -15.4627, -19.3244, -18.2096, -9.7765, -11.3556, -8.0125, -11.5944, -19.3104, -13.9115, -9.1632, -3.2749, -15.5419, -7.4921, -13.6233, -8.2047, -13.3247, -10.8381, -9.7789, -10.3945, -13.5411, -15.5035, -11.247, -9.4846, -20.5172, -8.4498, -10.4502, -15.0523, -8.88, -15.6665, -8.4255, -11.6221, -9.3056, -10.0819, -10.6422, -10.6564, -17.4891, -14.0052, -14.7638, -17.0827, -11.8645, -14.1961, -10.1833, -12.2612, -13.6331, -10.8048, -15.0639, -8.9064, -10.6173, -15.2501, -15.2483], [-15.6361, -10.5647, -15.0561, -6.9288, -10.4569, -9.5331, -19.9755, -13.304, -16.4132, -12.4006, -7.2408, -15.3834, -7.9693, -8.0795, -0.0181, -4.9266, -17.6903, -19.9832, -12.451, -13.3125, -18.5628, -16.0449, -14.1777, -12.5487, -19.6402, -17.365, -6.4454, -15.9815, -11.2758, -16.9176, -17.7083, -14.1667, -9.4183, -14.5153, -10.9065, -17.6018, -11.7358, -8.9915, -19.0328, -11.5257, -12.5652, -23.4341, -9.6887, -13.4318, -17.6025, -8.689, -15.0005, -5.4967, -18.033, -15.8637, -9.5577, -14.1192, -6.2994, -11.9831, -11.2011, -17.94, -15.4261, -11.8279, -13.8567, -17.0951, -9.3317, -15.1781, -13.3076, -15.7813, -12.5788, -14.4926, -11.6221, -14.2279], [-13.4288, -14.2686, -13.5572, -15.4986, -15.2427, -13.2128, -21.5313, -17.6004, -19.9259, -10.4971, -6.8827, -13.1532, -11.6676, -10.9067, -6.8297, -0.0061, -20.117, -14.7514, -21.1209, -10.6545, -15.6043, -23.0945, -19.5655, -12.9961, -19.4681, -13.5224, -5.8492, -18.3368, -12.5394, -15.3374, -20.7299, -16.4863, -7.3363, -16.5417, -11.5917, -17.7114, -14.9105, -10.4403, -24.6723, -8.6923, -17.2287, -20.6917, -19.3398, -18.0148, -17.8481, -13.3084, -17.7747, -11.3117, -22.6014, -20.4626, -18.7715, -10.326, -9.1453, -14.6719, -19.3054, -19.3772, -12.9897, -18.1605, -19.9882, -15.0028, -11.388, -19.6706, -11.8692, -13.5127, -11.7671, -14.6744, -14.9828, -16.1172], [-0.1324, -4.8511, -24.6525, -2.1615, -18.3575, -8.3724, -15.3594, -12.1787, -12.6762, -17.5954, -14.5456, -17.211, -13.6157, -7.6002, -11.6953, -8.3318, -15.7798, -27.1874, -9.7153, -12.5975, -14.8952, -13.8032, -18.0219, -13.2494, -21.665, -26.0789, -24.2324, -13.7641, -16.1092, -22.532, -19.4452, -16.0383, -19.0671, -15.6665, -13.2506, -21.1427, -16.8551, -20.1829, -20.1859, -16.3328, -21.7043, -25.912, -14.2631, -16.8418, -24.3504, -19.2556, -13.1559, -14.8045, -19.2278, -20.1909, -12.105, -22.9101, -17.7996, -17.9139, -20.3568, -17.0323, -28.0614, -17.1933, -16.7506, -16.7502, -17.0497, -21.072, -20.8708, -28.6884, -18.7893, -14.929, -21.9944, -22.1102], [-7.5949, -6.9717, -20.4578, -0.0047, -17.1972, -15.1984, -19.1429, -12.1264, -14.3156, -16.523, -15.634, -24.6156, -9.6382, -7.2974, -6.9368, -10.1337, -13.3587, -24.1779, -8.1345, -10.9298, -21.2738, -9.6228, -13.6491, -12.934, -24.8387, -27.8287, -21.8744, -19.2303, -15.2508, -22.5907, -20.845, -19.1065, -16.6523, -21.3369, -11.6004, -23.8109, -14.7156, -12.4496, -19.4288, -18.5934, -16.6047, -29.9225, -8.176, -17.0307, -21.2093, -14.5482, -14.3342, -10.0334, -19.8275, -17.5253, -7.1346, -21.9107, -13.0562, -13.6357, -18.9734, -17.0682, -25.9709, -12.6886, -14.6402, -23.0029, -19.0416, -19.6301, -21.2553, -28.1669, -18.0178, -20.3169, -19.9099, -20.5499], [-0.0004, -9.4316, -29.4794, -8.1347, -16.9531, -15.2945, -12.5565, -15.288, -10.9378, -17.0578, -18.6114, -19.2904, -22.3876, -14.3084, -17.9206, -19.0847, -17.3466, -25.4043, -17.7635, -16.404, -16.4408, -14.1893, -22.0548, -21.3925, -27.4252, -23.5834, -31.0259, -22.5184, -25.4093, -29.9841, -24.8228, -24.5202, -29.0336, -18.9434, -18.3274, -23.1171, -25.9857, -22.4207, -23.4583, -26.93, -29.5777, -30.2463, -23.0079, -23.3361, -28.4776, -30.214, -15.5809, -26.2277, -25.5164, -27.0989, -21.3204, -28.6737, -27.1978, -22.912, -26.4182, -23.5499, -32.268, -26.1991, -24.1505, -20.6374, -27.1646, -27.9199, -24.651, -37.1778, -25.3554, -21.6086, -29.817, -30.7009], [-3.9961, -8.3438, -26.0515, -0.1343, -7.6161, -2.3468, -6.579, -9.5163, -8.1329, -18.3629, -11.545, -9.5137, -15.5586, -5.0435, -7.4068, -11.6135, -15.175, -22.6142, -10.2436, -13.4975, -16.704, -7.5507, -17.8237, -20.5354, -21.5875, -16.519, -16.1588, -12.7034, -14.781, -27.6047, -19.2365, -18.23, -20.8913, -11.0051, -6.6282, -20.7415, -20.3777, -12.9108, -15.7513, -23.9942, -21.6297, -28.5265, -12.4118, -15.8646, -26.4825, -14.7726, -15.0135, -17.0458, -14.5146, -18.5614, -14.717, -21.1839, -18.132, -16.5503, -10.4135, -23.2293, -28.7316, -17.091, -14.9053, -14.3156, -11.9599, -16.1616, -17.5687, -29.9907, -21.0201, -14.6905, -19.0646, -22.3658], [-5.3402, -10.3217, -17.6965, -11.3692, -12.7159, -9.601, -13.3772, -10.7736, -7.3395, -10.1046, -5.9859, -0.4383, -8.4269, -1.0827, -14.0432, -6.6766, -5.5813, -11.748, -17.1838, -13.5729, -13.6456, -11.668, -19.0926, -9.5344, -8.6822, -12.9622, -10.5896, -9.3912, -6.1663, -16.1084, -14.2465, -17.1981, -12.4087, -14.4326, -9.5986, -13.3819, -12.2022, -14.9239, -21.3186, -19.7328, -16.5564, -19.3686, -19.4955, -15.348, -20.3536, -12.3935, -18.3175, -17.8502, -18.5417, -19.771, -22.406, -13.1004, -21.321, -19.0785, -19.3805, -22.8529, -15.8072, -21.7838, -20.6478, -10.0628, -12.1529, -18.9956, -8.7709, -21.6944, -10.135, -14.7098, -19.277, -18.2895], [-9.8252, -7.8621, -19.9293, -15.5386, -15.0172, -10.6343, -8.5348, -11.3716, -0.0095, -9.124, -12.6243, -4.8011, -10.8811, -8.9035, -17.5596, -16.365, -9.0474, -13.719, -12.9874, -10.7939, -11.5569, -9.432, -21.926, -16.4849, -10.5473, -10.3611, -14.7782, -12.9952, -15.1265, -18.0877, -19.2918, -17.6943, -22.3664, -12.7193, -11.8329, -15.8678, -15.4012, -15.559, -19.1427, -28.1225, -18.9412, -17.1356, -22.6317, -16.683, -21.5677, -18.092, -15.2177, -24.2262, -18.6743, -23.4307, -24.233, -18.8409, -26.4314, -16.4399, -19.0051, -23.1401, -16.6433, -21.4905, -20.208, -15.6295, -15.3201, -20.4272, -12.413, -26.7949, -15.1888, -17.749, -20.9683, -20.4042], [-9.5136, -8.6398, -24.8047, -16.6156, -15.1191, -10.5206, -0.5299, -11.5824, -0.8905, -16.2451, -22.1144, -8.5709, -22.0522, -15.0371, -25.1624, -26.9797, -12.0482, -17.3405, -13.1108, -14.0256, -9.1848, -8.6311, -22.9108, -24.1546, -13.5084, -10.844, -24.2074, -14.6059, -22.5047, -23.1083, -19.2554, -20.959, -31.5645, -9.541, -15.1789, -14.6785, -22.6264, -20.3565, -12.3869, -32.8234, -24.4382, -15.6895, -23.4566, -17.8088, -22.5859, -25.4447, -13.5708, -31.5663, -14.6136, -20.8502, -26.2083, -23.996, -31.3873, -19.4451, -17.9948, -21.5324, -23.1241, -21.2812, -19.2012, -15.7672, -20.9305, -21.1034, -18.9201, -29.939, -22.6819, -15.6674, -25.3072, -24.6679], [-4.486, -1.6541, -24.349, -10.6418, -12.6634, -11.0211, -0.2357, -16.4465, -11.1416, -19.0771, -23.5526, -14.0811, -28.1013, -16.7974, -23.6779, -23.1857, -16.1815, -20.1965, -15.0376, -16.1673, -8.8594, -8.3787, -23.1356, -23.7773, -20.8898, -16.4946, -29.8158, -15.5594, -23.5424, -24.9547, -13.7554, -21.0791, -28.3185, -4.9928, -18.3895, -12.106, -25.8282, -21.1519, -9.9324, -23.2819, -26.6106, -17.908, -19.5848, -14.7122, -19.4194, -28.2247, -12.1392, -30.3147, -13.1742, -12.9956, -19.7423, -21.1665, -23.1179, -22.6794, -18.4673, -15.694, -26.0595, -16.5477, -18.1736, -15.1028, -27.4731, -21.9079, -22.5986, -26.2684, -23.7298, -8.6696, -27.5975, -26.4396], [-5.1086, -0.007, -14.7093, -9.4544, -12.9564, -12.0013, -9.9544, -11.4388, -10.2761, -10.0027, -17.1023, -17.2591, -14.7357, -13.0384, -13.7848, -13.3167, -11.0535, -18.315, -10.4023, -9.9506, -7.5649, -10.6165, -14.7702, -11.6911, -16.9346, -16.4402, -22.3568, -14.5856, -17.5302, -14.9417, -15.6742, -19.1595, -18.292, -12.5387, -17.808, -13.3498, -15.3654, -16.2982, -12.29, -16.694, -20.4481, -15.7691, -14.6068, -13.656, -14.0514, -20.9237, -9.552, -18.1999, -19.5632, -14.4427, -15.0361, -20.001, -18.0651, -14.9316, -19.4847, -14.09, -16.8566, -15.7064, -15.7215, -16.3316, -24.6672, -19.8402, -17.9409, -21.8789, -16.2736, -12.1069, -21.7817, -20.8797], [-3.9709, -12.0596, -11.1482, -1.4596, -5.0161, -10.1651, -13.4567, -0.9305, -13.8993, -8.7749, -10.1896, -17.8348, -10.5925, -4.8876, -1.6135, -4.3806, -5.9237, -16.2199, -11.5526, -8.8652, -10.4777, -11.7705, -2.2532, -5.8594, -18.3989, -13.999, -11.0965, -17.8245, -11.3542, -14.845, -19.0103, -20.8756, -9.103, -20.1287, -11.6565, -14.0445, -12.0668, -8.5256, -11.9788, -12.6347, -16.9203, -20.4781, -5.7019, -16.5534, -12.5374, -11.8173, -10.1497, -4.2956, -19.8446, -13.4251, -10.5029, -19.5678, -12.487, -9.2922, -14.0989, -15.6246, -15.924, -15.1857, -12.184, -12.8954, -16.18, -15.6794, -15.9102, -19.274, -13.6195, -15.5518, -15.016, -17.4236], [-10.9486, -10.2928, -11.761, -26.4067, -19.1013, -24.1652, -20.4107, -20.383, -11.7829, -0.0014, -8.8042, -10.4948, -12.5285, -13.7036, -18.6473, -10.8185, -11.4007, -8.0922, -27.6864, -12.7681, -10.6577, -21.5576, -23.5829, -10.4859, -13.629, -10.8513, -14.8159, -23.4167, -16.6824, -11.9984, -19.7362, -21.7784, -15.2028, -18.111, -22.1087, -11.2192, -15.6675, -17.1807, -29.1099, -17.1684, -19.4019, -15.6437, -30.9012, -20.2597, -15.5849, -24.9473, -17.4919, -24.47, -30.281, -26.5153, -29.1594, -13.1696, -21.9375, -20.166, -33.2739, -20.8967, -7.4563, -27.1369, -29.592, -17.799, -25.3144, -29.9441, -10.6903, -18.2232, -9.3476, -19.6377, -24.6592, -22.4772], [-0.0547, -9.1877, -24.0313, -15.8575, -14.0487, -13.5235, -12.5466, -17.7564, -10.3192, -10.6787, -9.148, -2.941, -19.2411, -9.6682, -20.7572, -13.8596, -11.5818, -16.195, -24.1786, -20.8485, -12.5403, -15.5962, -25.8335, -15.1378, -15.4511, -16.131, -22.1669, -13.8696, -15.5487, -22.1939, -15.3419, -20.6545, -21.1621, -12.2794, -19.7634, -12.8611, -21.1886, -24.1476, -25.6038, -21.4009, -25.5597, -21.4835, -28.9293, -18.6164, -24.3072, -26.4905, -18.4908, -28.6058, -24.2614, -24.246, -28.151, -18.3914, -27.6178, -27.5338, -26.6466, -24.3914, -21.3507, -29.7037, -27.9777, -11.2236, -23.1673, -26.632, -13.676, -27.1773, -15.4406, -15.0652, -27.7257, -26.7912], [-9.4661, -6.0484, -17.6462, -14.5059, -17.1846, -10.1431, -13.6305, -12.3308, -0.0228, -7.4847, -8.008, -4.9725, -4.6239, -6.3944, -12.7653, -12.082, -10.132, -14.0939, -10.1159, -9.7393, -13.4228, -10.5193, -20.5504, -11.911, -8.342, -13.1641, -12.9793, -10.3132, -10.8844, -14.4954, -17.2218, -12.9869, -17.541, -13.108, -9.7641, -16.5131, -10.0572, -14.4333, -21.046, -23.3858, -13.8199, -17.3842, -20.3957, -14.3517, -20.9609, -13.7241, -13.919, -18.189, -18.388, -23.7457, -20.2863, -15.9635, -21.3205, -13.8715, -18.1312, -20.901, -14.1011, -18.9926, -17.9373, -15.5033, -11.4101, -18.2202, -9.1846, -23.5366, -10.8775, -17.3352, -17.1554, -16.3514], [-10.855, -12.2986, -23.959, -14.9816, -19.0495, -9.171, -12.225, -10.1652, -0.0003, -11.6717, -14.4872, -12.2562, -11.2116, -12.7657, -13.7994, -18.0802, -16.1303, -21.7782, -9.5226, -9.8041, -14.9621, -13.2589, -21.0339, -19.8919, -15.7995, -14.9938, -17.7696, -16.6568, -20.2336, -21.7744, -27.327, -17.6897, -26.3487, -16.9357, -12.2027, -23.4543, -17.078, -17.716, -21.4473, -31.0798, -21.2643, -22.1807, -22.7939, -20.5316, -27.3394, -19.8434, -13.556, -21.2812, -21.2212, -29.7886, -22.8031, -26.2795, -27.682, -13.4616, -18.2374, -25.0511, -22.3118, -22.7461, -18.6032, -20.0971, -13.3281, -21.0621, -16.661, -32.3046, -20.0323, -22.8994, -20.3238, -21.9077], [-2.9016, -3.9676, -14.8745, -5.6672, -11.6027, -9.3324, -5.3166, -7.7193, -1.0022, -8.1735, -11.479, -9.8441, -8.2475, -5.6857, -11.1121, -12.943, -6.907, -11.4384, -5.872, -5.9143, -13.0753, -0.6255, -12.46, -13.8301, -11.0013, -12.6802, -16.8859, -9.4731, -10.7106, -15.69, -13.7441, -13.1589, -16.2079, -11.4735, -5.5895, -15.0355, -11.7081, -8.7045, -11.4165, -21.0427, -11.6502, -16.8774, -11.7779, -11.3232, -15.9826, -12.509, -8.1849, -15.2835, -10.2695, -13.7387, -11.1888, -14.4658, -16.4672, -9.1125, -12.5653, -14.3427, -16.7968, -10.7553, -10.5375, -13.9813, -13.3505, -12.1654, -10.9891, -22.4099, -12.9328, -14.0875, -15.9059, -16.1202], [-9.1999, -6.7504, -21.2064, -8.4829, -14.8647, -15.4958, -10.0911, -18.4414, -12.6262, -21.2652, -19.3789, -12.4309, -16.0417, -9.0983, -21.9576, -18.4401, -10.5305, -15.1669, -12.8859, -17.0128, -23.5812, -0.0023, -19.955, -20.4629, -15.6473, -21.4049, -24.5103, -7.7351, -10.2115, -22.3918, -11.0405, -19.2829, -17.9743, -15.7702, -8.9408, -20.9677, -18.0812, -13.7059, -14.1371, -25.4376, -16.1343, -23.5547, -13.4894, -13.0032, -20.2277, -13.5842, -18.8637, -23.0263, -10.6951, -10.7334, -15.0698, -14.9115, -19.8341, -19.7259, -15.0592, -20.4346, -24.8485, -13.2051, -14.9886, -17.3665, -21.3648, -13.0104, -15.8154, -25.8852, -18.4795, -15.4495, -22.3639, -21.3951], [-9.9251, -11.0645, -21.2399, -15.0197, -19.1785, -10.9099, -9.9308, -8.5852, -0.0007, -11.904, -14.6043, -9.9018, -11.049, -8.8805, -16.4668, -18.0205, -11.6439, -17.3109, -11.2322, -9.5818, -10.378, -14.4156, -18.7196, -15.9627, -10.8608, -13.1089, -17.4606, -16.2956, -17.355, -17.8361, -21.7095, -16.022, -24.3831, -14.8849, -10.8853, -16.1416, -14.5285, -17.4633, -18.3292, -26.4754, -17.3396, -17.2065, -20.7631, -18.7046, -22.5311, -18.9987, -12.7491, -20.3566, -17.3999, -26.1172, -22.2351, -21.6581, -25.2074, -14.0046, -20.0518, -19.7539, -18.7592, -19.6894, -17.9859, -16.4865, -12.4192, -21.2714, -15.1528, -26.4523, -16.3478, -18.8448, -19.5917, -18.9769], [-9.5796, -3.9636, -25.3593, -13.3801, -15.8211, -6.8645, -7.5726, -18.1823, -3.597, -13.6741, -8.9134, -0.0823, -13.202, -4.3471, -15.7792, -14.0647, -17.1174, -17.5841, -16.4488, -15.3259, -14.6713, -11.9366, -28.9635, -21.2275, -12.0747, -12.6402, -14.3471, -11.9154, -12.5012, -22.2605, -14.2049, -12.6932, -22.1717, -4.0452, -8.0552, -13.0553, -17.583, -16.4511, -22.1469, -23.8714, -16.1256, -21.7494, -23.3034, -13.5289, -25.8474, -17.2069, -17.1696, -24.5288, -12.7701, -22.5565, -22.691, -13.0808, -19.0386, -20.5934, -17.7027, -21.9146, -20.3673, -16.7414, -20.9241, -14.2457, -10.0841, -21.3487, -11.1158, -23.7707, -14.3261, -11.3639, -20.7613, -20.4783], [-10.1981, -0.0002, -22.0545, -15.7833, -22.0376, -16.1523, -15.7049, -20.9548, -10.4077, -15.0009, -16.8353, -11.3514, -14.2362, -10.2056, -23.0491, -18.6424, -13.8157, -20.7754, -16.774, -17.9731, -13.4376, -14.685, -26.103, -14.6003, -12.7707, -22.6602, -25.6926, -13.9844, -15.7432, -17.6086, -11.7582, -16.3245, -22.4742, -11.0903, -19.1011, -12.8437, -15.6017, -24.1128, -21.4881, -20.4432, -17.7876, -18.9254, -21.9851, -14.0454, -20.5685, -22.4179, -17.0209, -25.4177, -18.5958, -19.9488, -19.8075, -17.6503, -21.532, -24.2825, -26.5237, -17.1388, -19.4383, -17.5444, -22.5415, -18.5892, -23.0131, -25.3088, -17.2551, -23.3942, -14.7401, -13.1665, -25.8589, -22.1935], [-12.3286, -11.092, -27.8706, -19.1973, -22.6472, -10.1102, -9.5697, -11.994, -0.0002, -18.0516, -22.7717, -14.3203, -17.6506, -18.0625, -23.1552, -25.8978, -18.529, -25.0772, -9.9785, -12.3653, -10.9901, -16.5943, -24.1781, -23.3899, -15.4129, -16.1582, -25.4455, -16.8191, -25.9917, -23.0432, -27.441, -20.0438, -33.6067, -16.5608, -15.8367, -23.5612, -20.8656, -24.3034, -18.9237, -34.782, -26.4578, -19.1895, -25.7649, -22.5186, -28.7414, -25.9553, -14.2883, -28.4586, -21.4195, -31.3557, -27.8031, -30.7876, -33.7606, -17.475, -21.042, -24.9439, -25.7084, -25.2457, -20.0239, -20.7794, -18.5272, -23.5405, -21.689, -34.8409, -24.8934, -21.9215, -24.3588, -24.5526], [-0.0005, -9.0139, -23.1254, -10.4185, -18.2288, -13.3896, -9.8668, -10.3572, -8.9361, -19.9715, -22.1432, -16.6486, -19.5652, -13.4175, -24.0788, -21.3666, -10.3922, -22.3783, -10.5013, -16.6335, -12.0022, -9.8627, -13.9444, -14.4703, -14.4375, -22.4485, -32.912, -10.467, -17.7297, -19.4623, -16.3804, -19.8774, -24.1024, -18.7982, -16.9323, -18.7362, -18.2409, -24.7347, -12.9218, -24.0162, -23.3778, -17.9905, -16.6548, -17.9742, -20.9508, -23.5581, -11.8413, -22.2916, -17.0923, -18.512, -19.1663, -26.4976, -28.4017, -19.2424, -20.7026, -17.2125, -26.7035, -21.2596, -15.6853, -14.397, -24.977, -18.1518, -20.9701, -29.577, -20.9469, -16.3648, -24.6178, -23.5928], [-7.0041, -10.1446, -21.1592, -13.0728, -13.8012, -7.6443, -3.5856, -6.7635, -0.0331, -15.4767, -18.6579, -10.6189, -16.8355, -14.6926, -18.784, -23.2952, -11.3132, -17.7985, -6.7586, -12.7628, -7.2535, -9.3861, -14.8955, -17.2031, -10.8086, -12.288, -22.1976, -10.6734, -19.5271, -17.6918, -17.3579, -15.1931, -26.3638, -11.1936, -13.4782, -15.0229, -16.4883, -19.941, -9.5439, -25.9546, -19.9972, -12.226, -17.2936, -15.6973, -19.6628, -20.4508, -8.9931, -21.8945, -13.219, -19.8102, -19.8705, -24.2415, -26.7565, -14.0494, -12.8613, -17.0827, -20.4913, -18.9001, -12.9277, -12.5621, -15.6098, -15.4443, -16.7949, -25.5978, -19.5494, -14.6832, -18.196, -18.3253], [-9.7273, -5.2335, -21.5611, -12.4408, -11.8368, -8.5147, -0.0245, -11.07, -4.2842, -14.3262, -21.1305, -12.7515, -22.1447, -16.6886, -18.4713, -22.3182, -14.9442, -17.3134, -11.4076, -10.6105, -6.0606, -9.9177, -20.774, -22.8973, -18.1207, -10.2591, -21.1737, -17.3873, -24.3364, -22.0079, -18.6534, -19.0392, -28.5172, -6.1145, -15.378, -12.9272, -22.392, -17.0226, -9.8477, -25.2199, -23.8116, -14.8602, -19.3199, -15.7749, -19.0279, -24.548, -10.6749, -26.8141, -14.1422, -17.5344, -20.2657, -21.8749, -23.3393, -16.4356, -15.3989, -16.9998, -21.0557, -16.7699, -16.5034, -15.828, -20.0976, -20.6194, -20.1668, -25.3683, -22.5341, -12.0424, -22.5208, -22.4789], [-5.8807, -0.013, -17.1424, -6.4424, -12.5088, -9.0232, -5.2118, -11.429, -8.8962, -13.1629, -16.93, -14.6165, -16.1577, -10.752, -13.7697, -15.0436, -12.0228, -18.3745, -8.7032, -10.5458, -8.3711, -7.6379, -15.8318, -14.647, -16.1015, -16.5665, -21.6609, -13.0833, -16.4937, -16.934, -12.4864, -14.9199, -19.6159, -6.6882, -14.5137, -10.579, -15.8445, -15.7068, -9.2327, -16.2532, -17.2612, -15.3274, -12.022, -10.7462, -14.4149, -18.7807, -8.8248, -17.8472, -11.8501, -10.8959, -11.3799, -17.2875, -15.1531, -14.8581, -15.0635, -11.0877, -18.7795, -10.2943, -12.7717, -14.6068, -19.4525, -17.5423, -17.6213, -20.0816, -16.2924, -8.434, -19.8944, -18.6056], [-2.1166, -0.1327, -19.3899, -7.9753, -14.4482, -12.392, -6.8743, -12.9919, -10.5988, -15.6942, -22.1178, -17.415, -19.0066, -13.1377, -20.6092, -18.2621, -10.6973, -19.5647, -10.5529, -12.0149, -11.046, -6.078, -16.7332, -16.5167, -17.6957, -19.706, -29.484, -12.2791, -18.26, -19.6889, -14.4058, -21.2255, -22.2986, -13.4983, -16.189, -16.7832, -19.1227, -18.6731, -10.8333, -22.0292, -22.8297, -18.6227, -15.0802, -14.4561, -17.5985, -22.7353, -11.28, -23.599, -16.4258, -13.2215, -15.5172, -21.7952, -22.5272, -18.0166, -19.7438, -15.6709, -23.6479, -16.0556, -15.5406, -16.7579, -27.4878, -18.8258, -20.8106, -27.1164, -20.5571, -12.9676, -25.4486, -24.2615], [-6.9359, -5.7847, -13.9582, -5.7641, -6.0816, -5.4243, -0.3331, -2.5342, -5.4772, -13.1935, -19.711, -11.6997, -15.4099, -9.8756, -13.8443, -16.1929, -4.4401, -14.0324, -5.0458, -8.0042, -6.8474, -2.4387, -9.1929, -14.5125, -12.4276, -9.3436, -16.7037, -8.9973, -14.0697, -16.1169, -14.9337, -20.4153, -18.5507, -11.1516, -11.0422, -13.3552, -15.3239, -11.3595, -2.5531, -22.8763, -19.4213, -12.6223, -8.772, -12.3717, -13.2368, -13.8845, -9.3151, -17.3689, -11.3981, -8.5205, -14.8751, -20.1528, -21.3297, -10.8233, -8.8376, -16.2409, -17.7498, -13.4094, -9.5203, -11.9722, -18.2986, -11.4738, -16.7253, -22.3538, -18.6332, -11.3687, -17.5999, -18.5337], [-7.9453, -10.6422, -13.2296, -8.8981, -0.0547, -10.1, -7.5708, -7.0442, -13.1297, -6.4575, -10.0234, -5.4683, -15.9694, -6.5345, -8.7945, -7.8512, -3.2573, -9.6702, -20.0749, -14.6724, -9.3622, -9.5817, -13.96, -12.229, -17.1534, -5.5624, -7.2244, -15.529, -11.6413, -18.6387, -16.4203, -26.4108, -12.9963, -13.1294, -16.021, -9.7712, -18.2707, -9.6656, -14.5117, -18.649, -22.5856, -18.6072, -16.0341, -16.0796, -14.0315, -15.9825, -17.3047, -18.8049, -22.3733, -12.7687, -22.4034, -15.6028, -20.0044, -18.507, -16.0537, -24.1022, -13.8084, -23.0435, -21.4817, -10.4431, -20.9266, -19.6357, -12.8827, -20.5324, -14.7737, -13.4333, -21.0784, -23.2521], [-8.2635, -7.2309, -17.1748, -10.4829, -17.5021, -12.3162, -18.6575, -11.6, -5.6596, -6.1729, -6.4728, -8.9239, -2.4506, -0.1025, -8.5118, -6.4346, -7.9232, -16.9492, -13.8192, -9.634, -17.2724, -12.1273, -18.1924, -9.3149, -12.3424, -16.6427, -12.2114, -15.0919, -7.91, -16.3694, -20.7166, -17.9894, -14.13, -18.5991, -9.8347, -18.1397, -10.0582, -12.3832, -25.3263, -22.1769, -13.5424, -24.7577, -18.0055, -16.8303, -21.9351, -12.3625, -16.5198, -14.2184, -22.551, -24.116, -18.9274, -16.7251, -19.3314, -14.3067, -22.9395, -22.9775, -16.4223, -19.7073, -20.6868, -18.1823, -13.2113, -21.9442, -10.8762, -25.869, -10.116, -20.546, -19.6887, -19.901], [-2.305, -3.8721, -9.978, -5.4257, -8.1955, -11.9697, -7.2648, -5.2168, -6.418, -5.1949, -10.6473, -10.356, -7.843, -2.0759, -9.113, -5.7911, -0.3389, -7.552, -11.2223, -4.9043, -8.6882, -4.9255, -9.9832, -6.3749, -12.8828, -9.5072, -13.0137, -13.4588, -8.2189, -13.2876, -14.8839, -20.4194, -11.1007, -14.814, -8.4493, -11.4369, -11.0067, -6.2399, -11.9699, -16.7372, -15.0933, -16.5376, -11.4096, -13.8388, -11.2652, -12.767, -10.9367, -13.9466, -17.4946, -12.1405, -15.3773, -13.2111, -16.3463, -10.763, -17.9434, -15.5485, -13.0572, -15.6145, -15.2179, -11.9194, -18.4946, -17.034, -11.5458, -20.017, -10.5443, -13.7094, -18.5949, -17.8487], [-5.7776, -11.4954, -7.9854, -5.4832, -0.7019, -15.9653, -9.9071, -8.3379, -17.1032, -8.144, -10.4318, -10.7723, -13.4088, -5.8416, -8.6227, -3.7707, -1.2148, -3.0044, -18.6325, -10.7555, -14.4425, -4.1568, -8.4896, -9.5505, -18.0481, -8.0478, -8.5349, -14.1224, -7.0115, -15.8219, -13.2068, -25.2792, -5.1641, -18.9072, -9.5736, -13.3129, -15.4239, -2.3099, -12.2841, -14.0787, -17.5383, -19.0578, -9.7761, -15.0011, -9.1932, -10.4794, -16.8218, -13.2706, -19.0011, -7.0234, -15.8291, -9.5217, -13.1177, -13.9179, -14.571, -19.5806, -12.6375, -17.2545, -16.6132, -10.7276, -21.8104, -13.6623, -11.0089, -16.5458, -12.3329, -14.2924, -17.8479, -19.0126], [-6.7974, -12.2479, -19.3362, -10.316, -0.0201, -10.3237, -4.713, -8.0405, -10.616, -10.2015, -13.6031, -5.7598, -21.3439, -10.2588, -13.3589, -13.6338, -6.828, -12.0387, -21.7429, -16.534, -10.5521, -9.1113, -17.3165, -18.9372, -20.2217, -5.3082, -11.6567, -17.4468, -17.2247, -24.4464, -19.6943, -28.9164, -20.0335, -14.2664, -15.5693, -13.7921, -23.8664, -11.8776, -15.7274, -26.021, -27.9349, -21.8016, -20.139, -19.8039, -19.2584, -21.2258, -18.4819, -25.2588, -23.3203, -17.6423, -26.6851, -20.4128, -25.8305, -21.0539, -16.6605, -28.2226, -19.4198, -26.7187, -23.4159, -12.0413, -23.3365, -21.2597, -16.0549, -27.3281, -20.3965, -16.1378, -24.5402, -27.4682], [-11.1407, -13.6566, -26.9613, -20.8966, -20.8761, -11.8572, -10.0974, -11.1465, -0.0001, -14.0006, -19.8897, -11.2353, -17.6714, -16.2497, -22.733, -24.2844, -15.499, -22.1064, -14.6163, -13.0484, -10.3234, -18.1067, -24.5874, -22.1071, -15.317, -13.0996, -22.6916, -19.3942, -25.3885, -23.3407, -28.6668, -22.7854, -32.9016, -17.7312, -17.4895, -21.3551, -21.7043, -23.7791, -21.9666, -35.4083, -27.7915, -19.7697, -29.1504, -24.4867, -28.6292, -27.5791, -15.8874, -30.0267, -24.9906, -33.4023, -31.4922, -30.0254, -36.0375, -19.118, -24.3051, -27.4499, -23.8921, -29.4568, -24.0854, -19.7613, -19.5936, -26.661, -20.1606, -35.195, -23.4644, -23.6709, -26.2372, -26.5786], [-10.1246, -10.6023, -28.7099, -21.6915, -16.5983, -13.7124, -6.5809, -21.4027, -7.5447, -15.4185, -15.024, -0.0023, -23.4706, -10.4568, -26.6474, -21.1196, -16.0912, -16.2024, -26.5094, -21.3518, -14.5709, -15.5666, -33.4709, -26.1545, -15.2477, -10.6531, -20.2938, -16.8526, -18.4403, -26.8631, -18.0218, -22.52, -28.546, -8.3134, -16.2847, -13.2129, -26.062, -22.0865, -25.0056, -30.9308, -25.9252, -22.129, -32.6677, -20.014, -27.9229, -27.1056, -22.5786, -36.2031, -19.5987, -26.0346, -34.4015, -17.38, -30.4314, -28.533, -25.5314, -28.127, -23.2332, -27.6705, -29.7377, -14.9537, -20.8534, -28.0603, -15.1392, -28.9904, -19.5913, -15.535, -29.7105, -28.9504], [-5.2285, -0.0186, -24.7578, -15.4925, -18.6671, -15.2895, -11.0957, -22.7116, -9.7509, -13.9366, -13.9569, -4.4618, -17.9757, -8.4373, -24.8105, -17.9277, -12.9478, -18.3168, -21.0248, -21.2502, -13.0712, -12.6096, -29.7577, -16.7696, -13.4592, -19.4494, -25.821, -12.8095, -14.6154, -20.8543, -9.5729, -16.8629, -23.5006, -6.8772, -19.2333, -9.7701, -19.3619, -24.5422, -23.0781, -21.1202, -20.2797, -19.7435, -26.012, -13.7197, -22.189, -25.2595, -18.5358, -30.255, -18.065, -19.7568, -23.7087, -15.2748, -23.5145, -28.2659, -27.1392, -19.2653, -20.8595, -20.9797, -26.0195, -14.9812, -24.0261, -26.7383, -15.1454, -24.6136, -14.5933, -11.0402, -28.5556, -25.1754], [-7.3624, -6.6586, -22.1446, -11.1026, -10.56, -12.8838, -8.5173, -17.8433, -13.0929, -14.4436, -11.6488, -0.2431, -17.1462, -1.5574, -20.1921, -12.7472, -6.5314, -13.6736, -23.0729, -21.2896, -17.5154, -7.191, -25.2752, -17.3778, -13.5123, -14.358, -16.6237, -10.9241, -7.4614, -22.9198, -10.4891, -22.5004, -17.317, -9.7939, -13.6152, -10.6571, -19.752, -16.2532, -20.3311, -23.4023, -19.2793, -23.3312, -20.7484, -13.852, -21.1582, -17.0661, -22.8134, -26.6356, -16.1126, -13.8723, -24.3023, -12.0077, -22.3679, -26.62, -21.1611, -24.7307, -20.6922, -20.8324, -24.7743, -12.2144, -20.6007, -22.0134, -12.2794, -24.1329, -14.0639, -12.0394, -26.4052, -25.4315], [-3.143, -7.1481, -20.7313, -2.7686, -10.3803, -2.3332, -10.3015, -5.0439, -2.0522, -9.3768, -6.0284, -10.051, -7.1697, -4.3313, -0.4482, -6.6964, -13.9984, -20.9539, -6.2332, -7.0872, -11.8122, -12.1571, -14.2402, -13.0927, -17.4919, -13.8416, -11.3257, -14.0442, -14.3029, -20.3127, -22.426, -13.7949, -17.7339, -11.9875, -6.5863, -18.5422, -13.0044, -10.9833, -17.8913, -19.5759, -17.4316, -23.8281, -13.3397, -15.7888, -23.3744, -13.7703, -9.3044, -10.0861, -18.2786, -23.225, -13.8751, -20.7459, -15.7439, -9.8601, -12.3286, -19.6833, -20.9469, -17.114, -13.8458, -14.1077, -7.6142, -17.3686, -13.5023, -26.5139, -15.2109, -15.7787, -14.6239, -17.5651], [-1.5417, -7.9208, -14.0934, -11.3952, -13.4027, -7.4167, -14.0017, -10.146, -8.3144, -4.3053, -5.1953, -13.4352, -10.2959, -11.9234, -2.9089, -0.4376, -19.4718, -15.5877, -13.4686, -2.7714, -6.1723, -21.3956, -15.562, -11.2773, -19.2541, -9.5633, -10.2231, -18.3022, -17.9796, -14.4508, -24.0366, -13.6606, -12.6033, -13.4169, -9.9217, -16.912, -14.4457, -10.6822, -21.2923, -9.639, -20.2221, -17.7307, -20.1368, -18.3994, -18.3775, -19.0585, -7.7539, -11.2626, -23.749, -25.4477, -17.8806, -15.7524, -12.1347, -8.9728, -19.0285, -15.833, -14.0935, -19.7522, -17.1125, -12.931, -11.4541, -20.369, -12.1756, -18.461, -13.0692, -13.9275, -14.7232, -16.6745], [-11.5746, -12.8144, -15.8212, -9.0374, -16.4925, -12.4314, -21.9067, -13.4373, -20.8593, -13.8998, -11.5499, -17.7792, -11.5777, -9.7706, -7.608, -0.001, -16.1537, -19.3231, -16.4319, -9.8306, -15.9735, -20.2868, -17.4435, -10.9136, -22.2349, -19.8327, -10.3609, -18.041, -13.3422, -17.4302, -22.6531, -19.6392, -9.0005, -20.0413, -13.4816, -20.8846, -14.9128, -13.0582, -22.7481, -10.8999, -20.6003, -23.4194, -14.9901, -18.8998, -18.9616, -13.0896, -18.248, -10.1961, -23.8549, -18.8171, -15.6738, -16.2665, -12.3635, -15.5222, -20.1533, -19.7233, -18.2687, -18.1027, -18.9104, -17.0788, -14.6772, -20.7978, -17.2385, -19.2634, -15.0606, -16.1745, -17.8595, -18.3832], [-10.07, -16.1884, -27.1974, -0.0004, -15.95, -12.9871, -16.6855, -8.6643, -17.4327, -25.2632, -22.7512, -27.5718, -18.152, -11.266, -10.2663, -15.0662, -15.8804, -29.2195, -10.1129, -14.0853, -22.2589, -13.0752, -13.9082, -19.8814, -30.5347, -27.9703, -24.1673, -22.3243, -21.3324, -30.3845, -28.1089, -26.3711, -23.3841, -25.7207, -12.8624, -29.314, -22.2825, -15.8532, -17.7213, -25.8335, -25.7692, -33.9364, -9.4028, -23.4755, -26.9892, -18.0229, -18.1021, -14.1305, -21.9619, -20.7784, -12.6111, -30.4083, -20.9618, -16.6976, -17.5341, -23.5581, -34.722, -18.7926, -16.2027, -23.4239, -20.2628, -21.0055, -28.324, -35.3471, -27.4295, -23.9861, -23.29, -25.7242], [-0.0024, -13.5267, -28.221, -6.9429, -10.4709, -11.2176, -6.7001, -9.7974, -9.1347, -16.015, -17.7129, -14.5789, -24.5754, -14.2416, -16.1127, -18.6488, -14.3954, -21.6506, -17.5871, -16.1228, -11.9501, -13.6215, -19.0618, -22.0745, -26.2001, -16.3926, -25.0453, -21.5395, -25.602, -30.0066, -24.5461, -24.7074, -28.768, -16.0528, -17.0488, -19.7503, -27.1811, -20.2197, -19.2906, -26.252, -30.758, -26.2255, -21.7389, -23.2458, -26.6126, -28.8944, -14.8293, -25.7899, -23.2974, -25.0191, -22.6942, -27.9867, -27.8464, -21.6079, -21.3794, -23.8699, -30.2556, -27.1954, -22.9247, -15.8568, -23.4471, -25.4685, -23.4209, -34.7602, -25.8885, -19.4277, -27.0841, -29.3051], [-5.3551, -11.9869, -26.9762, -0.0125, -5.9599, -5.6552, -6.7275, -11.3614, -15.8269, -21.9672, -14.6509, -12.4791, -22.7417, -8.5429, -9.4898, -13.1319, -16.6962, -22.687, -15.3368, -18.0391, -17.0139, -10.4608, -18.0934, -22.4379, -26.2577, -18.3641, -17.8522, -16.3868, -17.7658, -30.3934, -17.5251, -20.6198, -21.1147, -10.6076, -10.8265, -18.2565, -24.6173, -14.7789, -14.7391, -20.2222, -24.4045, -28.7649, -12.1944, -16.9539, -24.8783, -17.9357, -17.0823, -18.239, -14.4338, -15.0569, -14.1878, -20.703, -16.451, -20.6554, -11.4001, -21.6306, -30.3084, -17.2313, -16.697, -13.5623, -15.5003, -18.0603, -21.1696, -27.4085, -23.4491, -12.8555, -20.9476, -23.9486], [-8.8599, -4.112, -22.938, -9.2153, -9.5898, -4.6795, -4.5558, -17.8652, -10.5413, -16.5605, -11.101, -3.2362, -19.203, -9.0512, -14.2938, -14.5053, -17.0702, -17.548, -15.4673, -17.7035, -12.5724, -10.3617, -24.9332, -20.901, -15.8659, -13.657, -15.241, -10.1706, -14.4283, -22.5986, -9.7615, -12.8506, -19.8678, -0.0823, -12.1494, -10.1404, -19.7858, -16.7983, -14.5718, -17.2427, -18.3608, -18.7338, -17.8174, -10.2193, -20.791, -17.2724, -15.1957, -22.7455, -9.8481, -12.9738, -16.7651, -12.2454, -14.9026, -21.5966, -11.8077, -17.2461, -20.7579, -14.0791, -17.3092, -10.615, -12.7315, -17.554, -13.7271, -18.8832, -16.1643, -5.9161, -18.8773, -18.964], [-11.0008, -0.0, -21.3037, -15.6895, -20.1175, -14.8766, -13.5163, -20.2415, -11.3561, -14.6122, -20.5969, -17.1454, -17.8208, -17.4661, -21.5275, -19.3293, -17.0482, -22.5557, -14.09, -15.0779, -11.9288, -13.8008, -25.5723, -18.0804, -18.5394, -21.4878, -26.9207, -15.8985, -21.7136, -19.2498, -17.2248, -19.7306, -24.8174, -11.8818, -21.72, -17.1236, -19.3439, -23.071, -18.9587, -21.9931, -23.4103, -18.8944, -22.1203, -15.4663, -20.3742, -25.3608, -14.948, -26.9095, -21.6887, -19.8937, -20.2106, -22.1494, -22.841, -21.9335, -24.3049, -18.4681, -20.9887, -19.0301, -21.3816, -20.9129, -27.0997, -24.9604, -20.5494, -26.1368, -19.6204, -14.3863, -26.521, -24.375], [-12.1588, -18.1924, -17.2917, -13.3001, -11.7473, -11.4665, -11.7477, -0.0027, -11.5664, -14.5235, -23.8533, -21.7771, -19.2888, -16.9006, -14.323, -16.971, -9.2189, -21.4992, -12.9496, -9.7399, -6.0579, -19.2846, -8.9881, -14.405, -19.9644, -12.36, -17.7616, -22.1352, -23.9259, -18.9317, -30.142, -30.3919, -23.3529, -25.3582, -20.2446, -19.8034, -19.8824, -18.2969, -11.7756, -26.3409, -29.9053, -17.6205, -16.2325, -25.1276, -18.5891, -22.3626, -13.9809, -17.8008, -27.5363, -22.9957, -24.5695, -32.5967, -30.1198, -13.8, -19.8555, -24.0561, -20.6689, -26.4228, -18.1866, -17.8147, -23.555, -22.3295, -24.7202, -29.1975, -25.02, -22.2467, -23.2026, -25.1016], [-8.127, -13.6181, -11.952, -19.6966, -12.0999, -17.2668, -15.787, -11.041, -8.113, -0.0066, -6.1763, -7.2625, -11.0001, -8.9736, -12.2757, -8.4146, -7.4495, -8.4143, -23.69, -11.0658, -8.394, -18.7454, -16.7431, -8.9647, -12.5772, -6.7881, -9.1187, -21.4797, -14.3507, -12.9015, -20.9097, -21.3383, -13.9861, -17.603, -17.5797, -10.2426, -14.4256, -13.7688, -24.4705, -17.9232, -18.9588, -15.8405, -25.2309, -20.0072, -15.5751, -20.4822, -15.2921, -18.8815, -27.2944, -24.9864, -26.6323, -15.282, -21.7577, -16.3894, -26.3767, -21.6471, -8.461, -26.2626, -25.4301, -13.7284, -18.8883, -25.6612, -9.8677, -19.2136, -9.8384, -18.9681, -20.7506, -20.796], [-7.1787, -13.78, -25.0591, -17.2527, -14.9933, -9.0224, -11.5288, -14.6839, -3.9746, -11.2493, -8.7174, -0.0204, -13.8777, -8.1587, -17.823, -14.4448, -13.016, -16.1886, -19.3807, -16.6738, -15.7512, -13.8263, -26.2163, -19.6463, -12.6209, -11.6612, -14.6323, -12.0568, -14.1936, -22.7722, -20.8805, -18.5996, -22.4163, -13.7806, -12.9131, -18.2311, -19.3788, -19.5181, -25.4377, -28.5042, -22.561, -22.1253, -28.1806, -19.3441, -28.09, -19.9983, -19.7847, -26.553, -21.58, -28.1132, -29.0261, -18.9932, -29.2236, -21.812, -20.5391, -29.1041, -20.9998, -28.1685, -24.9301, -13.4327, -13.6432, -22.2481, -11.4196, -29.4887, -16.7417, -19.1487, -23.1051, -23.9615], [-8.8456, -8.4018, -20.5807, -14.9666, -14.0466, -10.1598, -8.3966, -11.0586, -0.038, -9.7015, -13.0035, -3.3586, -10.728, -8.0666, -18.6113, -16.5227, -7.239, -13.1825, -13.1258, -11.3868, -13.2796, -7.35, -21.9695, -17.2534, -10.4532, -10.1419, -15.1895, -11.058, -13.8962, -19.3, -19.5787, -19.7192, -22.3439, -14.4048, -11.2301, -17.9295, -16.1139, -15.3256, -19.3808, -30.6965, -20.2859, -18.5934, -22.878, -17.2295, -22.7877, -17.3786, -16.8203, -25.7282, -19.428, -23.4268, -25.3449, -19.4398, -28.9634, -17.3916, -18.8276, -25.8308, -18.2158, -23.4158, -20.8657, -15.4429, -16.3657, -19.5605, -12.2509, -29.1888, -16.2488, -19.1277, -22.2584, -22.0361], [-5.4082, -7.1604, -20.6138, -17.4368, -16.8286, -12.3123, -4.2538, -9.4485, -0.021, -10.6024, -22.2872, -11.4253, -17.5289, -15.7855, -24.9219, -23.1103, -8.2219, -15.2452, -11.8719, -8.6531, -7.4913, -8.7425, -20.3213, -19.771, -13.4201, -10.6702, -25.5186, -14.7817, -22.4055, -19.7585, -23.2039, -24.2263, -29.2552, -16.4433, -16.5387, -18.8939, -20.6912, -19.7805, -14.6317, -32.9768, -26.6643, -15.1266, -25.1627, -20.284, -21.7645, -26.445, -12.7653, -31.1678, -21.7386, -24.2929, -27.5415, -26.0779, -34.8466, -16.81, -22.9428, -23.3031, -21.1662, -25.7558, -20.71, -17.4849, -25.3057, -22.4769, -18.7683, -32.9164, -22.4234, -20.2357, -27.1579, -26.382], [-6.6451, -9.6672, -26.2332, -15.439, -12.7344, -9.2357, -0.0277, -11.8216, -3.6779, -18.0014, -23.2626, -8.6888, -24.6485, -15.6604, -25.7386, -24.5578, -13.0892, -16.9354, -15.5021, -13.2652, -10.5753, -8.0833, -23.7891, -26.9307, -17.2809, -9.9511, -24.8751, -14.4198, -23.1442, -26.5594, -21.9979, -25.5383, -31.119, -12.613, -13.4927, -19.5235, -26.4509, -19.2317, -13.34, -34.8747, -29.7207, -19.5823, -24.8594, -20.6543, -25.4461, -26.2444, -16.1084, -34.0676, -17.5837, -22.344, -29.2526, -25.1837, -33.6653, -20.8011, -18.4714, -26.3198, -26.8735, -25.1639, -20.8213, -15.6408, -23.6075, -21.166, -20.3636, -33.859, -26.452, -17.1571, -27.8813, -28.4354], [-9.491, -12.2957, -24.3799, -18.6475, -18.6229, -10.6222, -10.2503, -10.5723, -0.0002, -12.7294, -16.695, -10.9705, -15.15, -15.0343, -18.5249, -20.9295, -15.7349, -20.2519, -12.657, -11.7629, -10.4777, -16.4528, -21.7247, -19.8577, -14.5457, -12.3853, -20.5662, -17.1048, -22.5493, -21.0162, -26.3371, -19.7975, -28.782, -16.7853, -14.6362, -20.8156, -19.0998, -20.6062, -20.4976, -31.3374, -24.5901, -19.0009, -25.9509, -22.1039, -26.4123, -24.2502, -13.8183, -25.5463, -23.1105, -31.1694, -28.0429, -27.0491, -31.1404, -16.2549, -21.0761, -25.1429, -21.7603, -26.6026, -20.9887, -17.9881, -17.2013, -23.1996, -17.4005, -31.8779, -20.995, -21.7275, -22.696, -23.4331], [-9.5523, -10.9095, -21.6928, -20.454, -14.5386, -10.5228, -7.9364, -13.9198, -0.1085, -7.3516, -10.108, -2.3015, -14.4014, -11.2287, -17.0277, -17.5238, -14.1387, -13.8733, -17.8965, -13.1915, -10.6527, -14.6849, -24.9387, -20.0037, -11.8358, -6.5187, -13.9942, -15.9282, -17.9183, -19.8658, -21.3539, -17.9227, -24.6885, -10.5518, -13.4538, -14.5039, -18.811, -16.9267, -22.3756, -28.4494, -21.1614, -17.5268, -28.5215, -18.7886, -24.1188, -22.3885, -15.278, -27.0408, -20.8897, -28.1593, -29.5561, -18.634, -27.3982, -17.8787, -20.4209, -25.2488, -16.3751, -25.6648, -23.5332, -14.7095, -14.9504, -23.1165, -11.2095, -26.3516, -15.8309, -17.9658, -21.7057, -22.4895], [-6.781, -5.9636, -21.9665, -12.0243, -9.7468, -7.1487, -7.6898, -17.1973, -8.0541, -12.1455, -8.5139, -0.0088, -15.686, -8.1412, -14.9755, -12.7008, -13.3425, -14.4351, -17.2464, -17.3679, -14.1242, -9.8743, -25.4661, -19.0522, -14.1405, -11.549, -14.0378, -8.9776, -12.4536, -21.5392, -12.5859, -16.0508, -18.749, -5.9249, -12.692, -13.2169, -18.8826, -16.2437, -19.4147, -21.1865, -20.1151, -19.8066, -22.0224, -12.7666, -22.4169, -17.6371, -17.6277, -24.5336, -16.1385, -17.862, -22.0121, -13.1342, -20.2919, -21.9642, -15.3538, -22.9875, -19.0055, -20.7236, -21.1421, -11.2821, -15.1679, -18.7147, -10.9194, -22.6489, -15.0058, -11.0786, -20.9314, -21.2739], [-9.9401, -11.5352, -23.9274, -0.0014, -13.3349, -10.0534, -16.4826, -8.7328, -15.4148, -21.043, -18.1233, -20.8313, -13.6614, -8.488, -8.3745, -12.3644, -12.1087, -27.2906, -7.9349, -15.5818, -20.7462, -9.5711, -14.1046, -15.0528, -24.5662, -26.4896, -20.0221, -15.4025, -15.5223, -25.6444, -21.7997, -21.9315, -19.0174, -20.4068, -14.2451, -24.2495, -17.2934, -16.1032, -16.3015, -22.2447, -21.6717, -29.4669, -8.3587, -17.6661, -23.5716, -13.8854, -17.225, -12.3231, -19.6956, -16.2166, -10.7973, -26.3352, -19.0698, -17.0191, -14.5141, -22.1574, -28.9523, -16.9303, -15.0426, -20.0862, -17.8957, -17.9298, -23.3276, -30.7515, -22.0003, -19.5048, -20.6214, -22.4875], [-0.0244, -7.4337, -22.4834, -4.1666, -13.1933, -6.2199, -12.0033, -9.0335, -5.7078, -11.6666, -9.9021, -14.3608, -11.7993, -9.4811, -6.2052, -10.7838, -15.3468, -22.7461, -8.0456, -10.2993, -13.753, -11.6924, -15.5754, -14.3866, -20.4969, -19.2185, -20.3659, -14.3565, -17.5239, -22.1508, -21.8859, -15.7659, -20.3432, -14.4949, -11.9039, -21.032, -16.4502, -16.3916, -18.6279, -20.1943, -21.3068, -24.8138, -15.9071, -16.9285, -24.4243, -19.0767, -9.9233, -14.5287, -20.4902, -23.311, -14.3645, -23.7464, -19.3981, -13.5971, -16.0021, -19.5917, -24.7891, -20.0786, -15.636, -15.7161, -15.0437, -18.9751, -16.9402, -29.463, -18.3488, -17.4157, -18.9682, -21.0211], [-4.8481, -13.0937, -18.5355, -1.7683, -8.2444, -6.5144, -12.6989, -4.5141, -9.859, -11.7602, -9.5568, -17.2762, -11.6608, -8.6477, -0.2144, -7.5089, -14.2674, -20.5741, -8.9137, -8.8972, -13.8404, -13.146, -9.5468, -13.4361, -22.6396, -15.9496, -12.5933, -18.0714, -16.6183, -21.4351, -23.3032, -17.4972, -15.8084, -16.8509, -9.7451, -19.8517, -15.7065, -10.3196, -15.6819, -16.7047, -19.2634, -24.8403, -10.3535, -17.8431, -20.6335, -14.4348, -10.2757, -7.9452, -19.5781, -19.8879, -11.283, -22.1948, -14.0631, -9.9161, -11.9607, -18.7575, -22.0224, -16.9747, -13.0305, -15.2396, -11.5527, -16.4625, -17.2442, -24.7415, -18.0623, -17.6423, -14.7699, -18.409], [-17.4767, -12.2009, -15.9021, -7.0121, -10.3819, -5.233, -13.4704, -8.5234, -11.0059, -12.4399, -8.6769, -12.746, -8.443, -6.674, -0.2121, -4.2496, -16.92, -17.726, -10.2393, -7.3956, -14.5215, -15.6354, -15.6275, -15.4734, -18.5728, -11.4217, -1.9244, -17.1325, -12.8126, -18.3421, -21.7177, -14.9405, -12.1906, -11.7715, -5.827, -17.6261, -12.8909, -6.0934, -16.7374, -15.2528, -14.1275, -21.9517, -10.8158, -15.3007, -19.0424, -7.4745, -14.2173, -7.8004, -15.4889, -17.7671, -13.1436, -14.8085, -8.7538, -9.2048, -9.3268, -19.2364, -15.8752, -11.7025, -13.0409, -15.9797, -4.1703, -15.5278, -13.6427, -17.1099, -14.3456, -13.9788, -10.8006, -13.8182], [-6.8203, -0.0013, -25.7137, -9.2264, -21.0447, -12.4829, -14.9716, -19.9316, -14.5809, -17.4793, -17.2128, -14.5318, -17.2844, -10.2289, -18.673, -11.5321, -17.9022, -25.418, -16.4237, -16.1337, -12.4827, -17.0423, -28.0277, -15.9398, -21.2594, -24.9682, -24.5913, -16.8847, -18.5224, -22.6367, -16.0923, -17.162, -22.2376, -9.8489, -18.4214, -15.7375, -19.4643, -23.6931, -23.2928, -15.9975, -22.9537, -23.5524, -21.0026, -16.0768, -23.5598, -23.7154, -17.4175, -23.6095, -20.3149, -20.4407, -18.1066, -19.7195, -18.5491, -24.8872, -26.444, -17.6431, -24.9984, -17.9743, -23.3503, -18.6495, -21.609, -27.7663, -21.6383, -25.9268, -18.3802, -11.5047, -26.6247, -24.5213], [-7.2609, -0.0009, -19.2023, -12.1475, -17.3143, -18.2265, -10.331, -17.2877, -14.6739, -15.597, -23.4171, -17.3247, -20.6552, -14.1528, -24.8512, -19.262, -9.8078, -18.8625, -16.0987, -16.7652, -10.2317, -9.9246, -21.3429, -14.5333, -17.4692, -21.897, -29.345, -15.6448, -18.6192, -18.5717, -11.4981, -21.6451, -22.3541, -12.0226, -22.3698, -11.4579, -19.1647, -22.4521, -14.2264, -18.645, -22.0759, -16.6177, -18.2964, -14.4406, -15.2902, -25.2661, -14.9236, -26.5474, -18.1686, -12.31, -17.8117, -19.7126, -22.218, -23.627, -25.5325, -14.5376, -20.5705, -16.6596, -20.6508, -17.7715, -30.5924, -24.2305, -21.8164, -23.5045, -18.3774, -11.454, -28.1297, -24.8789], [-9.2663, -7.1989, -20.1159, -9.5495, -12.9028, -13.2557, -5.9195, -15.4348, -10.8206, -21.1732, -21.4139, -11.6572, -18.4649, -11.7339, -23.11, -20.7956, -9.8387, -14.7808, -10.7857, -16.6385, -18.8598, -0.0056, -18.2383, -20.6301, -13.8758, -18.225, -24.5028, -6.471, -12.0703, -20.882, -10.5844, -19.2382, -19.6419, -13.4788, -10.5382, -18.511, -18.5517, -14.952, -9.6097, -25.6295, -17.604, -18.7497, -13.1453, -12.4236, -18.4092, -14.8681, -16.5106, -23.9139, -9.2325, -9.1254, -16.3217, -16.4659, -21.6971, -18.59, -12.377, -19.1948, -23.3535, -13.4096, -13.097, -15.2586, -21.627, -11.5231, -16.3114, -24.5827, -19.4269, -13.355, -21.3488, -20.7316], [-0.6454, -7.3631, -21.8229, -11.3083, -13.6133, -9.6869, -2.7513, -7.6571, -0.8959, -13.2088, -17.6543, -8.3286, -17.8773, -11.2667, -21.6998, -20.6498, -7.5446, -15.4633, -11.2624, -12.0061, -6.8215, -7.9937, -16.8552, -16.2989, -11.6861, -12.8595, -24.6334, -11.6708, -18.6156, -19.3386, -16.4512, -18.0601, -25.8559, -12.026, -13.7637, -13.5681, -18.4236, -20.1494, -12.3631, -25.7848, -22.3611, -14.4611, -19.9804, -16.6972, -20.0343, -23.567, -10.6215, -25.4768, -15.4296, -19.7238, -21.6263, -22.5461, -28.6306, -17.5921, -18.8351, -17.7902, -21.7506, -21.2525, -17.23, -11.7857, -19.7916, -19.278, -16.7889, -28.1428, -18.9265, -14.5987, -23.1248, -22.0829], [-11.6924, -8.8365, -23.5475, -14.5628, -18.6657, -7.6331, -8.1157, -14.6636, -0.0161, -12.9225, -9.6831, -4.8332, -11.6229, -8.262, -14.1135, -17.6319, -17.9647, -18.0974, -11.2354, -12.5873, -13.8278, -12.9095, -24.0992, -20.0022, -10.5311, -13.4935, -14.7626, -13.3142, -15.3966, -19.5801, -16.552, -8.6239, -23.3382, -5.4941, -8.3836, -13.5751, -14.718, -16.7097, -19.2874, -23.3537, -12.8871, -17.8223, -21.0192, -13.8155, -24.1501, -16.6064, -12.4094, -19.9732, -10.3875, -23.1725, -18.8187, -15.6043, -18.5558, -15.0048, -14.6783, -17.4742, -18.5094, -14.2125, -16.3275, -14.9992, -6.1809, -18.553, -11.5988, -21.9881, -13.754, -13.4462, -15.9019, -15.9461], [-10.7098, -0.0023, -30.3002, -11.9405, -23.1811, -11.5467, -10.6228, -22.1772, -11.282, -22.9016, -21.9603, -15.6019, -21.4248, -13.852, -22.6079, -22.8389, -22.5472, -29.7895, -13.4329, -19.8173, -15.1513, -14.5725, -29.7396, -23.156, -20.0769, -26.5019, -30.8615, -15.7247, -21.9966, -25.595, -15.1531, -15.2545, -29.9863, -6.1354, -18.8428, -16.0306, -21.7709, -26.798, -18.9149, -23.1884, -21.8785, -23.2282, -20.9541, -14.5082, -26.1311, -25.9626, -15.7007, -27.2502, -14.2783, -19.9299, -17.7017, -22.7168, -21.1532, -25.0956, -22.1657, -16.8068, -28.8051, -14.7739, -20.1534, -20.6531, -21.6109, -25.5807, -23.4914, -28.2711, -22.0551, -11.1337, -27.0287, -24.8594], [-8.5436, -0.0003, -20.5049, -13.3775, -21.3733, -13.7819, -12.4094, -16.957, -11.3731, -15.5702, -23.3348, -20.8683, -17.5318, -16.8435, -20.8279, -18.5019, -16.5897, -23.4806, -11.1457, -10.4186, -11.293, -13.6033, -22.3274, -18.1027, -19.7091, -21.8241, -29.2107, -16.4376, -22.4265, -19.4553, -20.0237, -21.6664, -25.0027, -14.9904, -19.4058, -19.9859, -19.4219, -21.5, -16.1546, -23.1634, -24.7187, -19.7554, -19.768, -16.9415, -20.6288, -25.0763, -13.158, -25.1702, -21.6822, -19.8533, -18.8475, -24.1205, -23.5127, -18.504, -24.2065, -17.7428, -23.1684, -18.1676, -18.9262, -22.0231, -27.7205, -23.8932, -22.8859, -28.1781, -21.7442, -15.8315, -26.924, -24.9933], [-17.408, -14.8364, -12.7304, -15.9032, -21.5565, -12.4503, -17.2493, -6.837, -10.112, -13.9949, -22.0601, -27.0981, -11.0587, -19.5826, -11.7553, -13.6436, -17.3303, -19.4089, -6.332, -0.0078, -10.2332, -20.4946, -11.3546, -14.8224, -18.5271, -15.5236, -16.0001, -21.1023, -23.1959, -13.6014, -30.6618, -21.2505, -18.764, -25.046, -12.975, -26.1238, -13.9679, -13.0276, -13.4213, -21.9289, -21.6223, -15.946, -14.4475, -22.0498, -17.8907, -16.1585, -11.0228, -12.1506, -23.2616, -23.8886, -17.2334, -25.5326, -20.2295, -5.3427, -17.5382, -17.7766, -16.7236, -17.2077, -12.1351, -22.8018, -16.2687, -17.701, -21.5733, -23.1502, -21.2033, -22.8279, -15.8566, -16.2677], [-12.4216, -16.1053, -29.1451, -9.0337, -11.8207, -0.0009, -8.6505, -7.5879, -10.0877, -22.7512, -19.2431, -13.7531, -20.8961, -14.4762, -10.8671, -15.7603, -21.4039, -29.3653, -10.651, -13.1023, -14.5152, -17.3762, -21.254, -25.8284, -24.3182, -15.3529, -16.0656, -15.846, -23.3182, -29.935, -30.5978, -24.7313, -27.4084, -15.8459, -12.5954, -27.1376, -24.8943, -18.8542, -15.8377, -31.1534, -31.7958, -27.5254, -18.8091, -22.7685, -31.5725, -19.4969, -17.6864, -21.3915, -21.704, -25.9106, -24.4082, -31.0024, -28.0276, -17.2936, -11.2161, -30.6075, -31.1321, -25.2863, -17.6013, -17.5303, -13.4664, -19.4692, -23.7558, -34.9868, -29.0176, -19.218, -21.6642, -26.029], [-3.0836, -11.1404, -14.8919, -7.7812, -8.5873, -2.8416, -7.9187, -1.2263, -0.8384, -4.9418, -5.6652, -7.9001, -8.2687, -6.6189, -2.4886, -5.1772, -10.7569, -14.3351, -8.7137, -3.0775, -4.2517, -15.6165, -10.746, -9.8711, -13.8624, -5.6772, -6.5559, -15.6423, -15.2044, -14.9285, -23.3742, -14.836, -15.4184, -12.3902, -7.6443, -14.3057, -12.3669, -9.7948, -15.4702, -17.0101, -18.7781, -15.8887, -15.657, -17.4488, -18.3007, -14.6266, -7.6423, -10.5243, -19.5447, -23.4676, -18.1327, -19.0919, -17.4839, -7.4446, -13.4103, -17.8808, -14.2511, -19.8338, -14.2306, -10.3992, -7.1998, -17.1758, -11.6108, -21.3457, -13.3126, -15.0745, -12.9874, -15.5052], [-7.9868, -15.4103, -16.8513, -13.4917, -15.0484, -13.9397, -22.5354, -17.794, -17.8933, -9.6195, -2.2252, -9.3662, -11.3363, -8.0452, -7.2448, -0.1169, -17.2633, -15.0399, -22.6545, -14.7754, -17.6584, -21.3282, -20.6122, -10.2137, -18.9553, -17.004, -8.7555, -17.0948, -10.5532, -17.3049, -19.0779, -15.6084, -7.8645, -16.4988, -13.3464, -16.7177, -14.6946, -14.1254, -28.4332, -9.9, -17.9151, -23.5627, -21.259, -18.2105, -20.5169, -14.822, -18.7088, -12.3657, -23.9319, -22.5714, -19.7998, -11.6299, -12.3009, -18.5748, -21.3208, -20.9145, -15.2292, -22.2576, -22.6946, -12.8705, -12.1863, -21.7272, -10.3876, -16.9829, -9.7555, -15.6186, -16.9797, -17.5205], [-0.0005, -14.5657, -22.492, -8.7515, -13.2294, -10.9451, -14.1387, -13.1712, -14.7828, -16.2566, -8.9443, -10.7783, -18.9471, -10.4379, -12.8462, -10.3339, -15.3794, -19.9567, -17.7954, -19.3354, -13.7002, -17.1503, -16.4414, -12.1036, -18.4002, -20.5079, -20.7407, -13.505, -14.8802, -20.9547, -14.9571, -14.5075, -16.154, -13.2388, -15.8919, -14.0017, -17.9937, -21.3268, -19.5608, -12.4198, -20.9681, -20.9421, -18.2813, -17.0681, -21.2429, -20.7445, -13.738, -15.689, -18.032, -18.9775, -17.1648, -18.3295, -17.924, -20.8698, -18.1493, -16.594, -22.7223, -21.8319, -18.6172, -9.1037, -15.5387, -19.4642, -15.6726, -21.3156, -15.0869, -12.4865, -19.2078, -19.4157], [-0.0001, -16.984, -21.5055, -11.8447, -12.0854, -15.3331, -14.0876, -13.8501, -13.981, -13.6969, -10.8497, -13.2444, -21.0097, -14.6334, -14.9321, -14.7672, -15.0091, -17.4736, -20.1177, -19.6008, -14.9093, -15.628, -14.9487, -14.5987, -19.9071, -18.3271, -22.7283, -16.6607, -18.2314, -21.5799, -16.9098, -17.2415, -18.3797, -16.5486, -17.9335, -15.5248, -20.3519, -20.318, -20.0336, -15.8835, -22.3365, -20.8197, -20.5559, -19.0399, -20.3997, -23.9803, -13.299, -18.3739, -20.4504, -20.5669, -18.5473, -20.0512, -20.7019, -20.2041, -19.8436, -17.8092, -22.0861, -24.1319, -19.9407, -11.3458, -19.9481, -19.7521, -16.2428, -23.211, -17.0918, -16.6031, -20.7498, -21.6803], [-0.0, -17.1071, -23.5494, -12.953, -13.9378, -16.4269, -13.1326, -15.8903, -16.1134, -18.211, -15.6813, -15.4734, -24.7758, -17.0952, -19.6722, -18.096, -16.947, -19.2707, -20.4694, -20.8727, -16.9919, -14.5632, -16.0521, -18.1356, -21.084, -20.3339, -27.6928, -15.601, -19.6547, -23.5451, -17.045, -19.1711, -20.5509, -17.9552, -18.1125, -18.2221, -23.0217, -21.9091, -18.4166, -18.5844, -24.6448, -21.6979, -20.9728, -19.7739, -21.6755, -25.6546, -14.3602, -21.3206, -19.1922, -19.4332, -19.6199, -21.5367, -22.8759, -21.6474, -20.0896, -18.4825, -25.5764, -23.9693, -19.5282, -12.6485, -23.1808, -18.8814, -18.8164, -25.3059, -20.4708, -16.8564, -23.1196, -23.7652], [-0.003, -11.5165, -16.0764, -10.3643, -9.1534, -10.1014, -6.3984, -10.5082, -8.3872, -12.4593, -11.1903, -9.1744, -17.3829, -11.8836, -14.3821, -13.4913, -12.3396, -11.9384, -13.565, -12.5165, -11.1002, -8.8777, -11.1599, -14.4585, -13.0127, -11.0822, -18.2881, -9.8342, -13.6718, -16.0534, -12.3695, -12.987, -14.8985, -11.5473, -9.7296, -13.1035, -16.1597, -13.3044, -11.3557, -15.0617, -16.769, -13.912, -15.0726, -13.5833, -15.2507, -17.2183, -9.0175, -15.7318, -11.5052, -13.7536, -15.0384, -14.2378, -16.3617, -13.1835, -12.3045, -13.2061, -17.0609, -15.947, -12.3622, -8.3553, -14.6705, -11.4317, -11.8786, -17.6636, -14.4317, -11.373, -15.2084, -16.0309], [-0.0, -20.0676, -20.817, -14.1267, -13.4091, -16.9972, -12.8867, -12.8508, -16.4415, -17.9756, -16.6695, -17.1983, -24.9212, -17.5865, -19.5439, -17.8816, -15.906, -17.6157, -20.604, -18.9217, -14.7203, -16.3294, -11.5575, -16.6162, -19.728, -17.8353, -26.7412, -16.7181, -19.6941, -20.8832, -18.3315, -20.2285, -19.0632, -20.7024, -17.3256, -17.7332, -22.1284, -20.7336, -16.1553, -17.6203, -24.3333, -19.2522, -19.5215, -21.0567, -19.3732, -24.994, -12.947, -18.9283, -19.2262, -19.4651, -20.1784, -21.9543, -22.7896, -18.9875, -19.8219, -17.2925, -23.8396, -23.9762, -17.8404, -11.7115, -22.9069, -17.6411, -18.7701, -23.3177, -20.4167, -17.4289, -21.6423, -22.565]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_2245": {
                "variable": {
                    "value": "mytargets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 13, 14, 15, 3, 3, 11, 8, 6, 1, 7, 9, 11, 8, 21, 8, 11, 1, 8, 8, 6, 1, 21, 4, 13, 37, 4, 8, 11, 13, 14, 15, 3, 3, 11, 33, 1, 7, 9, 11, 8, 21, 8, 11, 1, 3, 3, 14, 26, 1, 21, 8, 11, 1, 19, 5, 3, 10, 10, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_799": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.height, self.width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_800": {
                "variable": {
                    "value": "self.tb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.height, self.width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_132": {
                "input": {
                    "value": "pathLogProbs_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.getPathLogProbs(log_probs_, pathWithBlanks_)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_847": {
                "input": {
                    "value": "log_probs_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "any_847": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_printoptions_985": {
                "sci_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_printoptions_1077": {
                "sci_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/augment.py": {
        "torch": {
            "linspace_60": {
                "variable": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "image_height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ],
                        [
                            "spec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linspace_61": {
                "variable": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "image_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ],
                        [
                            "spec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_62": {
                "variable": {
                    "value": "(y_grid, x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, image_height - 1, image_height, device=device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(0, image_height - 1, image_height, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, image_width - 1, image_width, device=device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(0, image_width - 1, image_width, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_71": {
                "variable": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "image_height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ],
                        [
                            "spec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linspace_72": {
                "variable": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "image_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "image_width",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ],
                        [
                            "spec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_73": {
                "variable": {
                    "value": "(y_grid, x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, image_height - 1, image_height, device=device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(0, image_height - 1, image_height, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, image_width - 1, image_width, device=device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(0, image_width - 1, image_width, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_103": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c[:, :, :1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_points.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ],
                        [
                            "spec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_104": {
                "variable": {
                    "value": "matrix_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "left_block",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(matrix_a, torch.transpose(matrix_b, 2, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "right_block",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(matrix_b, lhs_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "lhs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left_block, right_block)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "rhs_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, d + 1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_points.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ],
                        [
                            "spec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_118": {
                "variable": {
                    "value": "rhs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f, rhs_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_139": {
                "variable": {
                    "value": "x_norm_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x, x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_139": {
                "variable": {
                    "value": "x_norm_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_140": {
                "variable": {
                    "value": "y_norm_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(y, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_140": {
                "variable": {
                    "value": "y_norm_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_142": {
                "variable": {
                    "value": "x_y_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "EPSILON",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "r.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_199": {
                "variable": {
                    "value": "rbf_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi_pairwise_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phi(pairwise_dists, order)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[:, :n, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_203": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "query_points_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query_points, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_208": {
                "variable": {
                    "value": "linear_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((query_points, ones), 2).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[:, n:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "meshgrid_245": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(width, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(height, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_248": {
                "variable": {
                    "value": "stacked_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_y, grid_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_254": {
                "variable": {
                    "value": "query_points_flattened",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points_on_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_grid - flow",
                            "BinOp"
                        ],
                        [
                            "query_points_on_grid.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height * width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interpolated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate_bilinear(image, query_points_flattened)",
                            "Call"
                        ],
                        [
                            "torch.reshape(interpolated, [batch_size, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_333": {
                "variable": {
                    "value": "flattened_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * height * width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_334": {
                "variable": {
                    "value": "batch_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(batch_size, device=grid_device) * height * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_63": {
                "tensors": {
                    "value": "(y_grid, x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "input": {
                    "value": "grid_locations",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[image_height * image_width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_74": {
                "tensors": {
                    "value": "(y_grid, x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "input": {
                    "value": "[image_height * image_width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "input": {
                    "value": "flattened_flows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate_spline(dest_control_point_locations, control_point_flows, flattened_grid_locations, interpolation_order, regularization_weight)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, image_height, image_width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_164": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_165": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_311": {
                "variable": {
                    "value": "max_floor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "size_in_indexing_dimension - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "grid_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_312": {
                "variable": {
                    "value": "min_floor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "grid_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_313": {
                "variable": {
                    "value": "maxx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_floor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0, dtype=query_type, device=grid_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_314": {
                "variable": {
                    "value": "floor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(min_floor, torch.floor(queries))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_323": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "queries - floor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "grid_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_324": {
                "variable": {
                    "value": "min_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "grid_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_325": {
                "variable": {
                    "value": "max_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "grid_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "min_326": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(min_alpha, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_330": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(queries - floor, dtype=grid_type, device=grid_device)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(min_alpha, alpha), max_alpha)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(alpha, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_343": {
                "variable": {
                    "value": "gathered_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flattened_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(grid, [batch_size * height * width, channels])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "linear_coordinates.expand(-1, channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_246": {
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ],
                        [
                            "spec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_344": {
                "input": {
                    "value": "gathered_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(flattened_grid, 0, linear_coordinates.expand(-1, channels))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_queries, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_448": {
                "data": {
                    "value": "[src_pts]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ],
                        [
                            "spec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_449": {
                "data": {
                    "value": "[dest_pts]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ],
                        [
                            "spec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "transpose_107": {
                "input": {
                    "value": "matrix_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((c, ones), 2).float()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_113": {
                "*size": {
                    "value": "(b, num_b_cols, num_b_cols)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ],
                        [
                            "spec.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "floor_313": {
                "input": {
                    "value": "queries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unstacked_query_points[dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_326": {
                "input": {
                    "value": "min_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0, dtype=grid_type, device=grid_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_139": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_140": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_168": {
                "input": {
                    "value": "torch.max(r, EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_172": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_175": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_334": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "grid_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_168": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_170": {
                "input": {
                    "value": "torch.max(r, EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_176": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5 * order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_170": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_170": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_173": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_173": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5 * order",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/checkpoints.py": {
        "torch": {
            "load_39": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_240": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_state(model)",
                            "Call"
                        ],
                        [
                            "{'current_iteration': current_iteration, 'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'lr_scheduler': lr_scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "temp_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.create_path('.{}.pkl.temporary'.format(filename))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distsup/configuration/__init__.py": {
        "torch": {
            "is_available_138": {
                "variable": {
                    "value": "cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "distsup/data.py": {
        "torch": {
            "pad_388": {
                "variable": {
                    "value": "result[field]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "result[field]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, 0, 0, 0, 0, ali_size - fea_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/logger/tensor_logger.py": {
        "torch": {}
    },
    "distsup/models/adversarial.py": {
        "torch": {
            "cross_entropy_65": {
                "variable": {
                    "value": "friendloss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "friendly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clf(output.detach(), features_len, targets_len)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_81": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_83": {
                "input": {
                    "value": "-torch.sum(p * log_p, dim=1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_68": {
                "input": {
                    "value": "adversarial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clf(output, features_len, targets_len)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_73": {
                "input": {
                    "value": "(friendly.detach().argmax(dim=1) == y).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "p * log_p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/models/base.py": {
        "torch": {}
    },
    "distsup/models/distribution_matching.py": {
        "torch": {
            "zeros_53": {
                "variable": {
                    "value": "observed_lm_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, len(lm_probs))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_199": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_214": {
                "variable": {
                    "value": "pair_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_logits / self.temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mse_loss_215": {
                "variable": {
                    "value": "loss_fs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_log_probs[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "pair_log_probs[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_233": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(torch.tensor([features]))",
                            "Call"
                        ],
                        [
                            "model.forward(torch.tensor([features]))",
                            "Call"
                        ],
                        [
                            "self.classifier(sampled_features)",
                            "Call"
                        ],
                        [
                            "self(input_features.view((orig_shape[0] * orig_shape[1],) + orig_shape[2:]))",
                            "Call"
                        ],
                        [
                            "logits.view((orig_shape[0], orig_shape[1], len(self.dataset.outputs)))",
                            "Call"
                        ],
                        [
                            "self(batch[self.dataset.feature_field])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['target']",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_272": {
                "variable": {
                    "value": "loglikes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(torch.tensor([features]))",
                            "Call"
                        ],
                        [
                            "model.forward(torch.tensor([features]))",
                            "Call"
                        ],
                        [
                            "self.classifier(sampled_features)",
                            "Call"
                        ],
                        [
                            "self(input_features.view((orig_shape[0] * orig_shape[1],) + orig_shape[2:]))",
                            "Call"
                        ],
                        [
                            "logits.view((orig_shape[0], orig_shape[1], len(self.dataset.outputs)))",
                            "Call"
                        ],
                        [
                            "self(batch[self.dataset.feature_field])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(s) for s in open(args.use_prior).readline().split()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_271": {
                "data": {
                    "value": "[features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_softmax_291": {
                "variable": {
                    "value": "loglikes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(torch.tensor([features]))",
                            "Call"
                        ],
                        [
                            "model.forward(torch.tensor([features]))",
                            "Call"
                        ],
                        [
                            "self.classifier(sampled_features)",
                            "Call"
                        ],
                        [
                            "self(input_features.view((orig_shape[0] * orig_shape[1],) + orig_shape[2:]))",
                            "Call"
                        ],
                        [
                            "logits.view((orig_shape[0], orig_shape[1], len(self.dataset.outputs)))",
                            "Call"
                        ],
                        [
                            "self(batch[self.dataset.feature_field])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_234": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(torch.tensor([features]))",
                            "Call"
                        ],
                        [
                            "model.forward(torch.tensor([features]))",
                            "Call"
                        ],
                        [
                            "self.classifier(sampled_features)",
                            "Call"
                        ],
                        [
                            "self(input_features.view((orig_shape[0] * orig_shape[1],) + orig_shape[2:]))",
                            "Call"
                        ],
                        [
                            "logits.view((orig_shape[0], orig_shape[1], len(self.dataset.outputs)))",
                            "Call"
                        ],
                        [
                            "self(batch[self.dataset.feature_field])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_290": {
                "data": {
                    "value": "[features]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/models/generators_autoregressive.py": {
        "torch": {
            "ModuleDict_68": {
                "variable": {
                    "value": "self.reconstructors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{name: utils.construct_from_kwargs(rec, additional_parameters=rec_params) for (name, rec) in reconstructor.items()}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "one_hot_75": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alignment.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_alignment_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_54": {
                "*size": {
                    "value": "(1, 100, 1, num_alignment_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/models/minitest.py": {
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "maj_ali",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(ali_num == num_classes).sum(axis=1).argmax(axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_47": {
                "input": {
                    "value": "logits.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "maj_ali",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy((ali_num == num_classes).sum(axis=1).argmax(axis=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(num_inputs)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(logits.size(1)).reshape(1, 1, logits.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "LogSoftmax_72": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/models/probednet.py": {
        "torch": {
            "ModuleDict_111": {
                "variable": {
                    "value": "self.probes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_213": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/models/representation_learners.py": {
        "torch": {
            "ModuleDict_125": {
                "variable": {
                    "value": "self.reconstructors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{name: utils.construct_from_kwargs(rec, additional_parameters=rec_params) for (name, rec) in reconstructor.items()}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "pad_158": {
                "variable": {
                    "value": "batch[features]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['features']",
                            "Subscript"
                        ],
                        [
                            "batch[rec_field]",
                            "Subscript"
                        ],
                        [
                            "batch['features']",
                            "Subscript"
                        ],
                        [
                            "batch['features']",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, 0, 0, padded_size - feats.size(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Normal_407": {
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fea.size(1) // indices.size(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_439": {
                "variable": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[t] * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_535": {
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fea.size(1) // indices.size(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_567": {
                "variable": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[t] * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_280": {
                "*size": {
                    "value": "batch['alignment'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_452": {
                "variable": {
                    "value": "y_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[t] * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_468": {
                "input": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_mini_batch_mask(y, y_lens).to(y.device.type)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_595": {
                "input": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_mini_batch_mask(x, x_lens).to(x.device.type)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_85": {
                "*size": {
                    "value": "(1, 500, image_height, in_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_98": {
                "*size": {
                    "value": "(1, 500, 1, bottleneck_latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_379": {
                "*size": {
                    "value": "(1, 500, 1, bottleneck_latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_488": {
                "*size": {
                    "value": "(1, 100, 1, bottleneck_latent_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/models/sequential.py": {
        "torch": {
            "Linear_40": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dataloader.metadata['targets']['num_categories']",
                            "Subscript"
                        ],
                        [
                            "len(self.dataset.alphabet)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CTCLoss_42": {
                "variable": {
                    "value": "self.ctc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "zero_infinity": {
                    "value": "allow_too_long_transcripts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_60": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(encoded)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(log_probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "utils.safe_squeeze(log_probs, 2).permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.projection(encoded)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(log_probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "utils.safe_squeeze(log_probs, 2).permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "utils.safe_squeeze(log_probs, 2).permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dataloader.metadata['targets']['num_categories']",
                            "Subscript"
                        ],
                        [
                            "len(self.dataset.alphabet)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CTCLoss_143": {
                "variable": {
                    "value": "self.ctc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "blank": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                },
                "zero_infinity": {
                    "value": "allow_too_long_transcripts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_156": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(encoded)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(log_probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "utils.safe_squeeze(log_probs, 2).permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.projection(encoded)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(log_probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "utils.safe_squeeze(log_probs, 2).permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "utils.safe_squeeze(log_probs, 2).permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "data": {
                    "value": "cer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.error_rate(decodes, [t[:tl] for (t, tl) in zip(targets.to('cpu').numpy(), targets_len)])",
                            "Call"
                        ],
                        [
                            "utils.error_rate(decodes, [t[:tl] for (t, tl) in zip(targets.to('cpu'), targets_len)])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_196": {
                "data": {
                    "value": "cer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.error_rate(decodes, [t[:tl] for (t, tl) in zip(targets.to('cpu').numpy(), targets_len)])",
                            "Call"
                        ],
                        [
                            "utils.error_rate(decodes, [t[:tl] for (t, tl) in zip(targets.to('cpu'), targets_len)])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distsup/models/simple.py": {
        "torch": {
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * 4 * 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_85": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2, 2)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 4 * 4 * 50)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_37": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(batch['features'])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "batch['targets']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(num_inputs)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_62": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/models/vqvae.py": {
        "torch": {
            "Sequential_117": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.encoder",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Embedding_146": {
                "variable": {
                    "value": "self.embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.dataset.alphabet)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "adv_class_embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_157": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_204": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m(z, y_emb)",
                            "Call"
                        ],
                        [
                            "m(z)",
                            "Call"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "F.unfold(z, (zh, aggreg_width), stride=(1, self.stride or aggreg_width))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(zh, aggreg_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, self.stride or aggreg_width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "fold_212": {
                "variable": {
                    "value": "zq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.fold(zq, output_size=(zh, zw), kernel_size=(zh, aggreg_width), stride=(1, self.stride or aggreg_width))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(zh, zw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(zh, aggreg_width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, self.stride or aggreg_width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l1_loss_269": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2 * mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['features']",
                            "Subscript"
                        ],
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, os], dim=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "os",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*x.shape[0:3]",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "self.align_upsampling - x.shape[3] % self.align_upsampling",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, os]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask, os]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "num_features": {
                    "value": "conv['out_channels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_153": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_242": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/bert.py": {
        "torch": {
            "Parameter_90": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_135": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_151": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_166": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_184": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_225": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ger_258": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_34": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_97": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_141": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_188": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_254": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/conditioning.py": {
        "torch": {
            "Linear_46": {
                "variable": {
                    "value": "self.make_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cond_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.make_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cond_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_88": {
                "variable": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(cond, size=x.shape[2:], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "cond_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.initial(cond)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/convolutional.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_86": {
                "variable": {
                    "value": "self.in_to_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels * image_height",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.preproc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(hid_channels, hid_channels, 3, padding=1) for _ in range(num_preproc)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.strided_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*strided",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.dil_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(hid_channels, hid_channels, 3, dilation=2 ** i, padding=2 ** i) for i in range(num_dilated)] + [nn.Conv1d(hid_channels, hid_channels, 3, padding=1) for _ in range(num_postdil)] + [nn.Conv1d(hid_channels, hid_channels, 1) for _ in range(num_postproc)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(N, W, H * C).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.in_to_hid(x)",
                            "Call"
                        ],
                        [
                            "x + l(torch.relu(x))",
                            "BinOp"
                        ],
                        [
                            "self.strided_layers(x)",
                            "Call"
                        ],
                        [
                            "x + l(torch.relu(x))",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_channels if i == 0 else hid_channels",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[min(i, len(strides) - 1)]",
                            "Subscript"
                        ],
                        [
                            "strides[min(i, len(strides) - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_88": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConstantPad1d_96": {
                "padding": {
                    "value": "(stride, stride - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_102": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernels[i]",
                            "Subscript"
                        ],
                        [
                            "2 * stride",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides[min(i, len(strides) - 1)]",
                            "Subscript"
                        ],
                        [
                            "strides[min(i, len(strides) - 1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv1d_112": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_122": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(N, W, H * C).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.in_to_hid(x)",
                            "Call"
                        ],
                        [
                            "x + l(torch.relu(x))",
                            "BinOp"
                        ],
                        [
                            "self.strided_layers(x)",
                            "Call"
                        ],
                        [
                            "x + l(torch.relu(x))",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_125": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(N, W, H * C).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.in_to_hid(x)",
                            "Call"
                        ],
                        [
                            "x + l(torch.relu(x))",
                            "BinOp"
                        ],
                        [
                            "self.strided_layers(x)",
                            "Call"
                        ],
                        [
                            "x + l(torch.relu(x))",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_105": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_109": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/cpc_module.py": {
        "torch": {
            "GRU_27": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.encoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_37": {
                "variable": {
                    "value": "packedSeq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.contiguous().view(features.size(0), features.size(1), -1)",
                            "Call"
                        ],
                        [
                            "f.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "features_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(features.size(0), dtype=torch.int32, device=features.device) * features.size(1)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_41": {
                "variable": {
                    "value": "(ogru, ogru_l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_108": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_31": {
                "*size": {
                    "value": "features.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bilinear_90": {
                "in1_features": {
                    "value": "self.gru_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "self.gru_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "(in_feats_z, noise_feats_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "(in_feats_c, noise_feats_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bilinear_211": {
                "variable": {
                    "value": "f_x_t_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input1": {
                    "value": "torch.cat((in_feats[1].unsqueeze(0), noise_f[1]), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "input2": {
                    "value": "torch.cat((in_feats[0].unsqueeze(0), noise_f[0]), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.W[k].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.W[k].bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "data": {
                    "value": "nbErr / nbEx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_212": {
                "tensors": {
                    "value": "(in_feats[1].unsqueeze(0), noise_f[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "(in_feats[0].unsqueeze(0), noise_f[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_197": {
                "input": {
                    "value": "fxt_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W[k](torch.cat((in_feats_z, noise_feats_z), 0), torch.cat((in_feats_c, noise_feats_c), 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/encoders.py": {
        "torch": {
            "Dropout_201": {
                "variable": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.modules.Dropout(p=rnn_dropout)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_275": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_",
                            "variable"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "x[::2]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, (lengths + 1) // 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), 2, -1).sum(2).view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(N, W, H * C)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, lens, batch_first=True, enforce_sorted=True)",
                            "Call"
                        ],
                        [
                            "self.rnns(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, 0, 0, 0, 0, x_in.shape[1] - x.shape[1]))",
                            "Call"
                        ],
                        [
                            "batch['features'].permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(bsz, w, h * c)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((N,), dtype=torch.int64).fill_(W)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_278": {
                "variable": {
                    "value": "(x, lens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_",
                            "variable"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "x[::2]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, (lengths + 1) // 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), 2, -1).sum(2).view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(N, W, H * C)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, lens, batch_first=True, enforce_sorted=True)",
                            "Call"
                        ],
                        [
                            "self.rnns(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, 0, 0, 0, 0, x_in.shape[1] - x.shape[1]))",
                            "Call"
                        ],
                        [
                            "batch['features'].permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(bsz, w, h * c)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_350": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, num_input_channels, 100, input_height)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_401": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_448": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[:, ::self.length_reduction]",
                            "Subscript"
                        ],
                        [
                            "torch.ones((1, num_input_channels, 100, input_height))",
                            "Call"
                        ],
                        [
                            "features.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv(features)",
                            "Call"
                        ],
                        [
                            "features.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.post_conv(features)",
                            "Call"
                        ],
                        [
                            "features.permute(1, 0, 3, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "features.view(num_timestp, batch_size, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(features, features_lens.data.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.rnns(features)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "features_lens.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_454": {
                "variable": {
                    "value": "(features, features_lens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[:, ::self.length_reduction]",
                            "Subscript"
                        ],
                        [
                            "torch.ones((1, num_input_channels, 100, input_height))",
                            "Call"
                        ],
                        [
                            "features.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv(features)",
                            "Call"
                        ],
                        [
                            "features.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.post_conv(features)",
                            "Call"
                        ],
                        [
                            "features.permute(1, 0, 3, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "features.view(num_timestp, batch_size, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(features, features_lens.data.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.rnns(features)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_465": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels, d, kernel_size=3, stride=2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_481": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_",
                            "variable"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "x[::2]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, (lengths + 1) // 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), 2, -1).sum(2).view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(N, W, H * C)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, lens, batch_first=True, enforce_sorted=True)",
                            "Call"
                        ],
                        [
                            "self.rnns(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, 0, 0, 0, 0, x_in.shape[1] - x.shape[1]))",
                            "Call"
                        ],
                        [
                            "batch['features'].permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(bsz, w, h * c)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_522": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ret_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size() + (self.num_embeddings,)",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_134": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_152": {
                "variable": {
                    "value": "(x, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_",
                            "variable"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "x[::2]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, (lengths + 1) // 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), 2, -1).sum(2).view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(N, W, H * C)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, lens, batch_first=True, enforce_sorted=True)",
                            "Call"
                        ],
                        [
                            "self.rnns(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, 0, 0, 0, 0, x_in.shape[1] - x.shape[1]))",
                            "Call"
                        ],
                        [
                            "batch['features'].permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(bsz, w, h * c)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_154": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_",
                            "variable"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "x[::2]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, (lengths + 1) // 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), 2, -1).sum(2).view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(N, W, H * C)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, lens, batch_first=True, enforce_sorted=True)",
                            "Call"
                        ],
                        [
                            "self.rnns(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, 0, 0, 0, 0, x_in.shape[1] - x.shape[1]))",
                            "Call"
                        ],
                        [
                            "batch['features'].permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(bsz, w, h * c)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "(lengths + 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "x_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.data + res.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PackedSequence_177": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(x.data)",
                            "Call"
                        ],
                        [
                            "x.data.view(x.data.size(0), 2, -1).sum(1).view(x.data.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(x.data + res.data)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "x.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_274": {
                "variable": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_281": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_",
                            "variable"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "x[::2]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, (lengths + 1) // 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), 2, -1).sum(2).view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.PackedSequence(x_data, x.batch_sizes)",
                            "Call"
                        ],
                        [
                            "x.view(N, W, H * C)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(x, lens, batch_first=True, enforce_sorted=True)",
                            "Call"
                        ],
                        [
                            "self.rnns(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, 0, 0, 0, 0, x_in.shape[1] - x.shape[1]))",
                            "Call"
                        ],
                        [
                            "batch['features'].permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "torch.mean(x, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(bsz, w, h * c)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, 0, 0, x_in.shape[1] - x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_413": {
                "variable": {
                    "value": "features_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "features.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_66": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PackedSequence_158": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(x.data)",
                            "Call"
                        ],
                        [
                            "x.data.view(x.data.size(0), 2, -1).sum(1).view(x.data.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(x.data + res.data)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "x.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_172": {
                "variable": {
                    "value": "(res, lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "res[::2]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(res, (lengths + 1) // 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_174": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "res[::2]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(res, (lengths + 1) // 2)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "(lengths + 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_466": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_467": {
                "num_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_468": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_469": {
                "in_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_470": {
                "num_features": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_471": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_472": {
                "in_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_74": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PackedSequence_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.projection(x.data)",
                            "Call"
                        ],
                        [
                            "x.data.view(x.data.size(0), 2, -1).sum(1).view(x.data.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.relu(x.data + res.data)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "x.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_384": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Hardtanh_385": {
                "min_val": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max_val": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_386": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_76": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PackedSequence_101": {
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x.data)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "x.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_394": {
                "in_channels": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "((ks[0] - 1) // 2, (ks[1] - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/fst_utils.py": {
        "torch": {
            "full_90": {
                "variable": {
                    "value": "terminal_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "nc_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-fst.Weight.Zero(g.weight_type())",
                            "UnaryOp"
                        ],
                        [
                            "float(nc_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1e+20",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_111": {
                "variable": {
                    "value": "states_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_112": {
                "variable": {
                    "value": "ilabels_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_113": {
                "variable": {
                    "value": "weights_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "nc_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-fst.Weight.Zero(g.weight_type())",
                            "UnaryOp"
                        ],
                        [
                            "float(nc_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "-1e+20",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_186": {
                "variable": {
                    "value": "lalpha",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(bs, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "neg_inf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1e+20",
                            "Method Argument"
                        ],
                        [
                            "-np.inf",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "log_probs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_236": {
                "variable": {
                    "value": "lalpha",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(bs, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "neg_inf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1e+20",
                            "Method Argument"
                        ],
                        [
                            "-np.inf",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "log_probs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_240": {
                "variable": {
                    "value": "lalphas",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(T, bs, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "neg_inf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1e+20",
                            "Method Argument"
                        ],
                        [
                            "-np.inf",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "log_probs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_260": {
                "variable": {
                    "value": "logprobs_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "safe_squeeze(log_probs, 2).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "log_probs.detach()",
                            "Call"
                        ],
                        [
                            "safe_squeeze(log_probs, 2).transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_184": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i.view(_bs, n * k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_234": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "i.view(_bs, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_289": {
                "input": {
                    "value": "log_cost - log_cost0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_323": {
                "size": {
                    "value": "(bs, max_n, max_ks[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0 if m.dtype == torch.int64 else nc_weight",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "m.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_179": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(last_iter_end, iter_end)",
                            "Call"
                        ],
                        [
                            "range(last_iter_end, iter_end)",
                            "Call"
                        ],
                        [
                            "range(last_iter_end - 1, iter_end - 1, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distsup/modules/masking.py": {
        "torch": {
            "Conv1d_51": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneck_latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_52": {
                "variable": {
                    "value": "self.input_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "image_height * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.attn_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_132": {
                "variable": {
                    "value": "pos_emb_arange",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-mask_pos - mask_len2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-mask_pos - mask_len2 + x_lens[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x_lens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, cond]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_225": {
                "variable": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([self.max_seq_len]).to(x_lens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_68": {
                "size": {
                    "value": "(features.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "features.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_72": {
                "input": {
                    "value": "features_len == targets_len",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "data": {
                    "value": "[self.max_seq_len]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/misc.py": {
        "torch": {
            "Linear_47": {
                "variable": {
                    "value": "self.lin_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.lin_hidden_to_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.lin_hidden_to_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_51": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.lin_gate_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "transition_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.lin_gate_hidden_to_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "transition_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.lin_proposed_mean_z_to_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "transition_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.lin_proposed_mean_hidden_to_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "transition_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.lin_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.lin_z_to_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_88": {
                "variable": {
                    "value": "self.lin_z_to_loc.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "self.lin_z_to_loc.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin_gate_hidden_to_z(_gate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/mixers.py": {
        "torch": {
            "arange_35": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bernoulli_36": {
                "variable": {
                    "value": "change",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index * 0 + self.prob * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x, dim=1, index=index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, W).to(x)",
                            "Call"
                        ],
                        [
                            "index + change * shift",
                            "BinOp"
                        ],
                        [
                            "index.long().clamp(0, W - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_37": {
                "input": {
                    "value": "index * 0 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/pixcnn.py": {
        "torch": {
            "ModuleList_41": {
                "variable": {
                    "value": "self.cond_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(cc['cond_dim'], out_channels, 1, bias=False) for cc in cond_channels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.v_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels * 2, in_channels, K2, K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.v_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, out_channels * 2, *bias_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.h_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels * 2, in_channels, 1, K2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.h_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, out_channels * 2, *bias_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.v_to_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_130": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(v, (K2 * dil_h, K2 * dil_h, K2 * dil_w, 0))",
                            "Call"
                        ],
                        [
                            "F.conv2d(v, self.v_kernel * self.v_mask, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "v + self.v_bias",
                            "BinOp"
                        ],
                        [
                            "self.cond_to_v(v, cond)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gv1) * torch.tanh(gv2)",
                            "BinOp"
                        ],
                        [
                            "res",
                            "variable"
                        ],
                        [
                            "res",
                            "variable"
                        ]
                    ]
                },
                "pad": {
                    "value": "(K2 * dil_h, K2 * dil_h, K2 * dil_w, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_131": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(v, (K2 * dil_h, K2 * dil_h, K2 * dil_w, 0))",
                            "Call"
                        ],
                        [
                            "F.conv2d(v, self.v_kernel * self.v_mask, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "v + self.v_bias",
                            "BinOp"
                        ],
                        [
                            "self.cond_to_v(v, cond)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gv1) * torch.tanh(gv2)",
                            "BinOp"
                        ],
                        [
                            "res",
                            "variable"
                        ],
                        [
                            "res",
                            "variable"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.v_kernel * self.v_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_136": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(h, (K2 * dil_h, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, self.h_kernel * self.h_mask, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "h + self.v_to_h(v) + self.h_bias",
                            "BinOp"
                        ],
                        [
                            "self.cond_to_h(h, cond)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gh1) * torch.tanh(gh2)",
                            "BinOp"
                        ],
                        [
                            "h_orig + self.h_to_h_res(h)",
                            "BinOp"
                        ],
                        [
                            "res",
                            "variable"
                        ],
                        [
                            "res",
                            "variable"
                        ]
                    ]
                },
                "pad": {
                    "value": "(K2 * dil_h, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_137": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(h, (K2 * dil_h, 0, 0, 0))",
                            "Call"
                        ],
                        [
                            "F.conv2d(h, self.h_kernel * self.h_mask, dilation=self.dilation)",
                            "Call"
                        ],
                        [
                            "h + self.v_to_h(v) + self.h_bias",
                            "BinOp"
                        ],
                        [
                            "self.cond_to_h(h, cond)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gh1) * torch.tanh(gh2)",
                            "BinOp"
                        ],
                        [
                            "h_orig + self.h_to_h_res(h)",
                            "BinOp"
                        ],
                        [
                            "res",
                            "variable"
                        ],
                        [
                            "res",
                            "variable"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.h_kernel * self.h_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_172": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_191": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, [pad_w, pad_w, pad_h, 0])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w, pad_w, pad_h, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_272": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_310": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((1, 2 * hid_channels) + in_bias_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_316": {
                "variable": {
                    "value": "self.res_to_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(2 * hid_channels, hid_channels, 1) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_319": {
                "variable": {
                    "value": "self.hid_to_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MaskedConv2D(hid_channels, hid_channels, kernel_size, mask_self=False) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_323": {
                "variable": {
                    "value": "self.cond_to_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConditioningAdder(cond_channels, hid_channels) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_326": {
                "variable": {
                    "value": "self.hid_to_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(hid_channels, 2 * hid_channels, 1) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_330": {
                "variable": {
                    "value": "self.res_to_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(2 * hid_channels, 2 * hid_channels, 1) for _ in range(out_n_layers - 1)] + [nn.Conv2d(2 * hid_channels, self.quantizer.num_levels, 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_364": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((1, hid_channels) + in_bias_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_370": {
                "variable": {
                    "value": "self.gated_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GatedMaskedStack2D(hid_channels, hid_channels, kernel_size, bias_shape=in_bias_shape, cond_channels=cond_channels, mask_self='v')] + [GatedMaskedStack2D(hid_channels, hid_channels, kernel_size, bias_shape=in_bias_shape, cond_channels=cond_channels, dilation=(dilation_base[0] ** (l % len_dilation_stage), dilation_base[1] ** (l % len_dilation_stage)), mask_self=False) for l in range(n_layers - 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_384": {
                "variable": {
                    "value": "self.hid_to_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(hid_channels, hid_channels, 1) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_388": {
                "variable": {
                    "value": "self.res_to_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(hid_channels, hid_channels, 1) for _ in range(out_n_layers - 1)] + [nn.Conv2d(hid_channels, self.quantizer.num_levels, 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_465": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res_past_future",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.h_to_h_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_192": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(input, [pad_w, pad_w, pad_h, 0])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "self.v_kernel.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*bias_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_96": {
                "*size": {
                    "value": "self.h_kernel.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*bias_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_148": {
                "input": {
                    "value": "gv1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_148": {
                "input": {
                    "value": "gv2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_152": {
                "input": {
                    "value": "gh1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_152": {
                "input": {
                    "value": "gh2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_311": {
                "*size": {
                    "value": "(1, 2 * hid_channels) + in_bias_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_365": {
                "*size": {
                    "value": "(1, hid_channels) + in_bias_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flip_453": {
                "variable": {
                    "value": "x_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "F.pad(x, (0, 0, nframes, 0))[:, :, :-nframes, :]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(x_shift, dims=[2, 3])",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, 0, nframes))[:, :, nframes:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv1d_42": {
                "in_channels": {
                    "value": "cc['cond_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_317": {
                "in_channels": {
                    "value": "2 * hid_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * hid_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_385": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_407": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_to_res(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "res + hid_to_res(activation(hid))",
                            "BinOp"
                        ],
                        [
                            "res_to_out(activation(res))",
                            "Call"
                        ],
                        [
                            "self.in_to_res(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "res + hid_to_res(torch.relu(skip))",
                            "BinOp"
                        ],
                        [
                            "res_to_out(torch.relu(res))",
                            "Call"
                        ],
                        [
                            "torch.cat(res_past_future, dim=1)",
                            "Call"
                        ],
                        [
                            "res_to_out(torch.relu(res))",
                            "Call"
                        ],
                        [
                            "self.in_to_res(x_shift) + self.bias",
                            "BinOp"
                        ],
                        [
                            "res + hid_to_res(torch.relu(skip))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_467": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_to_res(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "res + hid_to_res(activation(hid))",
                            "BinOp"
                        ],
                        [
                            "res_to_out(activation(res))",
                            "Call"
                        ],
                        [
                            "self.in_to_res(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "res + hid_to_res(torch.relu(skip))",
                            "BinOp"
                        ],
                        [
                            "res_to_out(torch.relu(res))",
                            "Call"
                        ],
                        [
                            "torch.cat(res_past_future, dim=1)",
                            "Call"
                        ],
                        [
                            "res_to_out(torch.relu(res))",
                            "Call"
                        ],
                        [
                            "self.in_to_res(x_shift) + self.bias",
                            "BinOp"
                        ],
                        [
                            "res + hid_to_res(torch.relu(skip))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_331": {
                "in_channels": {
                    "value": "2 * hid_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * hid_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_333": {
                "in_channels": {
                    "value": "2 * hid_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.quantizer.num_levels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_389": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_391": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.quantizer.num_levels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_405": {
                "input": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_448": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + cond",
                            "BinOp"
                        ],
                        [
                            "x[:, :, :, self.reconstruction_channel].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "input.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, nframes, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_462": {
                "input": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_450": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + cond",
                            "BinOp"
                        ],
                        [
                            "x[:, :, :, self.reconstruction_channel].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "input.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, nframes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/predictors.py": {
        "torch": {
            "Conv1d_30": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "aggreg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_38": {
                "variable": {
                    "value": "vq_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vq_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(vq_output, (0, self.pred.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(vq_output, (0, self.kernel_size - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(vq_output, (0, self.conv.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.pred.kernel_size[0] - 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cross_entropy_56": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(self.input, features_len)",
                            "Call"
                        ],
                        [
                            "self.conv(vq_output)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.pad(in_, (0, self.conv.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "out.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(out, in_lens_.data.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.rnns(out)",
                            "Call"
                        ],
                        [
                            "self.projectOutput(out)",
                            "Call"
                        ],
                        [
                            "self.proj(emb)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.long()",
                            "Call"
                        ],
                        [
                            "targets.long()",
                            "Call"
                        ],
                        [
                            "targets[mask, :]",
                            "Subscript"
                        ],
                        [
                            "targets[:, :targets_len.max()].contiguous()",
                            "Call"
                        ],
                        [
                            "new_targets",
                            "variable"
                        ]
                    ]
                }
            },
            "mean_58": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(targets == predicted).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleDict_79": {
                "variable": {
                    "value": "self.predictors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'linear': nn.Sequential(utils.Permute(0, 2, 1), nn.Conv1d(input_dim, output_dim, kernel_size=aggreg, padding=aggreg // 2), utils.Permute(0, 2, 1), utils.Reshape(-1, 1, output_dim)), 'mlp': nn.Sequential(utils.Permute(0, 2, 1), nn.Conv1d(input_dim, 128, kernel_size=aggreg, padding=aggreg // 2), nn.BatchNorm1d(128), nn.ReLU(inplace=True), nn.Conv1d(128, output_dim, 1), utils.Permute(0, 2, 1), utils.Reshape(-1, 1, output_dim)), 'lstm': LstmClf_(input_dim, output_dim)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "pad_274": {
                "variable": {
                    "value": "vq_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vq_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(vq_output, (0, self.pred.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(vq_output, (0, self.kernel_size - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(vq_output, (0, self.conv.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.kernel_size - 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cross_entropy_340": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.safe_squeeze(hidden, 2).permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.long()",
                            "Call"
                        ],
                        [
                            "targets.long()",
                            "Call"
                        ],
                        [
                            "targets[mask, :]",
                            "Subscript"
                        ],
                        [
                            "targets[:, :targets_len.max()].contiguous()",
                            "Call"
                        ],
                        [
                            "new_targets",
                            "variable"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CTCLoss_380": {
                "variable": {
                    "value": "self.ctc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reds.get(loss_reduction, loss_reduction)",
                    "type": "Call",
                    "possible_values": []
                },
                "zero_infinity": {
                    "value": "zero_infinity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_524": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "aggreg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_525": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_530": {
                "variable": {
                    "value": "vq_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vq_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(vq_output, (0, self.pred.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(vq_output, (0, self.kernel_size - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(vq_output, (0, self.conv.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "vq_output.contiguous().view(vq_output.size(0), vq_output.size(1), -1).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.conv.kernel_size[0] - 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_533": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(self.input, features_len)",
                            "Call"
                        ],
                        [
                            "self.conv(vq_output)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.pad(in_, (0, self.conv.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "out.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(out, in_lens_.data.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.rnns(out)",
                            "Call"
                        ],
                        [
                            "self.projectOutput(out)",
                            "Call"
                        ],
                        [
                            "self.proj(emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_535": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(self.input, features_len)",
                            "Call"
                        ],
                        [
                            "self.conv(vq_output)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.pad(in_, (0, self.conv.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "out.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(out, in_lens_.data.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.rnns(out)",
                            "Call"
                        ],
                        [
                            "self.projectOutput(out)",
                            "Call"
                        ],
                        [
                            "self.proj(emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_585": {
                "variable": {
                    "value": "self.projectOutput",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_592": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, self.conv.kernel_size[0] - 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "leaky_relu_596": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(self.input, features_len)",
                            "Call"
                        ],
                        [
                            "self.conv(vq_output)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.pad(in_, (0, self.conv.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "out.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(out, in_lens_.data.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.rnns(out)",
                            "Call"
                        ],
                        [
                            "self.projectOutput(out)",
                            "Call"
                        ],
                        [
                            "self.proj(emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_602": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(self.input, features_len)",
                            "Call"
                        ],
                        [
                            "self.conv(vq_output)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.pad(in_, (0, self.conv.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "out.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(out, in_lens_.data.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.rnns(out)",
                            "Call"
                        ],
                        [
                            "self.projectOutput(out)",
                            "Call"
                        ],
                        [
                            "self.proj(emb)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "in_lens_.data.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_608": {
                "variable": {
                    "value": "(out, out_lens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(self.input, features_len)",
                            "Call"
                        ],
                        [
                            "self.conv(vq_output)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.pad(in_, (0, self.conv.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "out.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(out, in_lens_.data.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.rnns(out)",
                            "Call"
                        ],
                        [
                            "self.projectOutput(out)",
                            "Call"
                        ],
                        [
                            "self.proj(emb)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_622": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(self.input, features_len)",
                            "Call"
                        ],
                        [
                            "self.conv(vq_output)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.pad(in_, (0, self.conv.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "out.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(out, in_lens_.data.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.rnns(out)",
                            "Call"
                        ],
                        [
                            "self.projectOutput(out)",
                            "Call"
                        ],
                        [
                            "self.proj(emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_644": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_645": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_657": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(self.input, features_len)",
                            "Call"
                        ],
                        [
                            "self.conv(vq_output)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ],
                        [
                            "F.pad(in_, (0, self.conv.kernel_size[0] - 1, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "out.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(out, in_lens_.data.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "self.rnns(out)",
                            "Call"
                        ],
                        [
                            "self.projectOutput(out)",
                            "Call"
                        ],
                        [
                            "self.proj(emb)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_159": {
                "variable": {
                    "value": "features_len",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(features.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "features.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_217": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "utils.safe_squeeze(pred, 2).permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.long()",
                            "Call"
                        ],
                        [
                            "targets.long()",
                            "Call"
                        ],
                        [
                            "targets[mask, :]",
                            "Subscript"
                        ],
                        [
                            "targets[:, :targets_len.max()].contiguous()",
                            "Call"
                        ],
                        [
                            "new_targets",
                            "variable"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(input_dim, 128, kernel_size=self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_268": {
                "variable": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_310": {
                "variable": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(features.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "features.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_406": {
                "variable": {
                    "value": "features_len",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(features.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "features.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_464": {
                "variable": {
                    "value": "new_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.long()",
                            "Call"
                        ],
                        [
                            "targets.long()",
                            "Call"
                        ],
                        [
                            "targets[mask, :]",
                            "Subscript"
                        ],
                        [
                            "targets[:, :targets_len.max()].contiguous()",
                            "Call"
                        ],
                        [
                            "new_targets",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_like_465": {
                "variable": {
                    "value": "new_targets_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_472": {
                "variable": {
                    "value": "new_targets[i, :len(tgt)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets[i].to('cpu').numpy()",
                            "Call"
                        ],
                        [
                            "tgt[:targets_len[i]]",
                            "Subscript"
                        ],
                        [
                            "utils.remove_reps_blanks(tgt) or [0]",
                            "BoolOp"
                        ]
                    ]
                }
            },
            "isnan_488": {
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "log_probs[:log_prob_lens.max()].contiguous()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(out, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_488": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_506": {
                "data": {
                    "value": "cer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100.0",
                            "float"
                        ],
                        [
                            "utils.error_rate(decodes, [t[:tlen] for (t, tlen) in zip(targets.to('cpu'), targets_len)])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_80": {
                "*args": {
                    "value": "utils.Permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "*args": {
                    "value": "utils.Permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_185": {
                "input": {
                    "value": "features_len == targets_len",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Conv1d_262": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_263": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_265": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_305": {
                "input": {
                    "value": "features_len == targets_len",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_48": {
                "condition": {
                    "value": "out_conv == 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.get_mask1d(features_len, mask_length=out_conv.size(2))",
                            "Call"
                        ],
                        [
                            "utils.get_mask1d(features_len.to(losses.device), mask_length=losses.size(1))",
                            "Call"
                        ],
                        [
                            "mask / mask.sum()",
                            "BinOp"
                        ],
                        [
                            "utils.get_mask1d(lens, mask_length=losses.size(1))",
                            "Call"
                        ],
                        [
                            "mask / mask.sum()",
                            "BinOp"
                        ],
                        [
                            "targets_len > 0",
                            "Compare"
                        ]
                    ]
                },
                "y": {
                    "value": "out_conv.min()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_48": {
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_76": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(x, lens)[0]",
                            "Subscript"
                        ],
                        [
                            "self.lin(F.relu(x, inplace=True))",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), x.size(1), -1)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_84": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "aggreg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "aggreg // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_92": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "aggreg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "aggreg // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_93": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_95": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_357": {
                "input": {
                    "value": "hidden.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_454": {
                "data": {
                    "value": "cer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100.0",
                            "float"
                        ],
                        [
                            "utils.error_rate(decodes, [t[:tlen] for (t, tlen) in zip(targets.to('cpu'), targets_len)])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_504": {
                "input": {
                    "value": "log_probs.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_234": {
                "input": {
                    "value": "pred.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/quantizers.py": {
        "torch": {
            "softmax_81": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "softmax_92": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_93": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim)",
                            "Call"
                        ],
                        [
                            "probs * self.levels.view(*ndim)",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, -1).view(-1, softmax_dim)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim)",
                            "Call"
                        ],
                        [
                            "torch.softmax(logits, -1).view(-1, softmax_dim)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_100": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "min_112": {
                "variable": {
                    "value": "(_, targets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "(x.unsqueeze(-1) - self.levels) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_120": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "softmax_128": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_129": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim)",
                            "Call"
                        ],
                        [
                            "probs * self.levels.view(*ndim)",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, -1).view(-1, softmax_dim)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim)",
                            "Call"
                        ],
                        [
                            "torch.softmax(logits, -1).view(-1, softmax_dim)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_136": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_158": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_234": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "safe_squeeze(scale, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_85": {
                "start": {
                    "value": "self.num_levels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "probs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_154": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_165": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x * self.num_levels).clamp(0, self.num_levels - 1).long()",
                            "Call"
                        ],
                        [
                            "targets.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "targets.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Laplace_185": {
                "loc": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l1_loss_190": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x * self.num_levels).clamp(0, self.num_levels - 1).long()",
                            "Call"
                        ],
                        [
                            "targets.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "targets.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Normal_209": {
                "loc": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mse_loss_214": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 4, 1, 2, 3)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(logits, -1)",
                            "Call"
                        ],
                        [
                            "logits.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "logits.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x * self.num_levels).clamp(0, self.num_levels - 1).long()",
                            "Call"
                        ],
                        [
                            "targets.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "targets.expand(B, 3, H, W)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Normal_235": {
                "loc": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "safe_squeeze(loc, -1)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(safe_squeeze(scale, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "l1_loss_273": {
                "input": {
                    "value": "self.vgg(logits * 2 - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "self.vgg(targets * 2 - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "data": {
                    "value": "levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_like_159": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim)",
                            "Call"
                        ],
                        [
                            "probs * self.levels.view(*ndim)",
                            "BinOp"
                        ],
                        [
                            "torch.softmax(logits, -1).view(-1, softmax_dim)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim)",
                            "Call"
                        ],
                        [
                            "torch.softmax(logits, -1).view(-1, softmax_dim)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distsup/modules/reconstructors.py": {
        "torch": {
            "BatchNorm2d_326": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_100": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_vq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_channels[0]['cond_dim']",
                            "Subscript"
                        ],
                        [
                            "cond_channels[0]['cond_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "image_height // scale * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.decoder",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_321": {
                "in_channels": {
                    "value": "ni",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "ks // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_330": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_354": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[conv_layer(ni, nh, 1), conv_layer(nh, nh, 3, stride=stride), conv_layer(nh, nf, 1, zero_bn=True, act=False)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_400": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_vq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cond_channels[0]['cond_dim']",
                            "Subscript"
                        ],
                        [
                            "cond_channels[0]['cond_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "(image_height + scale - 1) // scale * 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_472": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.decoder",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_563": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * image_height",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_579": {
                "variable": {
                    "value": "self.conv_stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv_stack",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_649": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'lin0')(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_682": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "stack_out_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "image_height * out_channels * self.quantizer.num_levels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_704": {
                "variable": {
                    "value": "c_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(c_inputs, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_724": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :, :, self.reconstruction_channel].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "safe_squeeze(x, 3).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), self.hid_channels, self.image_height, x.size(-1))",
                            "Call"
                        ],
                        [
                            "x[:, :, :, self.reconstruction_channel].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.flip(x, dims=(1,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_190": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wave_net.forward(x, conds)",
                            "Call"
                        ],
                        [
                            "logits.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "logits.reshape([logits.size(0), logits.size(1), -1, 1, self.quantizer.num_levels])",
                            "Call"
                        ],
                        [
                            "self(gen, conds)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_348": {
                "input": {
                    "value": "self.convs(x) + self.idconv(self.pool(x))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_365": {
                "input": {
                    "value": "self.convs(x) + self.idconv(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_635": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_636": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_size, image_height)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_639": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_651": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, 'lin%d' % i)(z) + getattr(self, 'skip%d' % i)(tmp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flip_737": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reconstructor.get_mean_field_preds(logits)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_741": {
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reconstructor.loss(logits, targets)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_107": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.quantizer.num_levels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_329": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_346": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_574": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * self.quantizer.num_levels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_732": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conds",
                            "variable"
                        ],
                        [
                            "c.repeat_interleave(x_len // c_len, 1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_111": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_115": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_466": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels * self.quantizer.num_levels * (stride * stride)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_467": {
                "upscale_factor": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_571": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_577": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_630": {
                "in_features": {
                    "value": "i_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_636": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "image_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_446": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_632": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([c['cond_dim'] for c in cond_channels])",
                            "Call"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_681": {
                "*size": {
                    "value": "(1, 100, 1, in_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_454": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PixelShuffle_460": {
                "upscale_factor": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_463": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/recurrent/encoders.py": {
        "torch": {
            "arange_62": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "maxlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(max(lengths))",
                            "Call"
                        ],
                        [
                            "xs.size(length_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_340": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "81",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_341": {
                "variable": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[20.0, 10.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_188": {
                "variable": {
                    "value": "xs_pack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([20.0, 10.0]).long()",
                            "Call"
                        ],
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_196": {
                "variable": {
                    "value": "(ys_pad, ilens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_198": {
                "variable": {
                    "value": "projected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_last(ys_pad.contiguous().view(-1, ys_pad.size(2)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_225": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_226": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_248": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_1(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_249": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_2(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_250": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_252": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_1(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_253": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_2(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_254": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_134": {
                "variable": {
                    "value": "xs_pack",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([20.0, 10.0]).long()",
                            "Call"
                        ],
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_142": {
                "variable": {
                    "value": "(ys_pad, ilens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_150": {
                "variable": {
                    "value": "xs_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.l_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cdim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.l_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cdim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_255": {
                "obj": {
                    "value": "ilens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([20.0, 10.0]).long()",
                            "Call"
                        ],
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_168": {
                "*args": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                }
            },
            "GRU_170": {
                "*args": {
                    "value": "idim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                }
            },
            "ModuleList_291": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VGG2L(in_channel), RNNP(get_vgg2l_odim(idim, in_channel=in_channel), elayers, eunits, eprojs, subsample, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_297": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VGG2L(in_channel), RNN(get_vgg2l_odim(idim, in_channel=in_channel), elayers, eunits, eprojs, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_304": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RNNP(idim, elayers, eunits, eprojs, subsample, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_308": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RNN(idim, elayers, eunits, eprojs, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTM_106": {
                "*args": {
                    "value": "inputdim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_108": {
                "*args": {
                    "value": "inputdim",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "2 * cdim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_114": {
                "in_features": {
                    "value": "cdim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/modules/segment.py": {
        "torch": {
            "from_numpy_93": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1, 0], [1, 2], [2, 1.5]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(D)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "distsup/modules/wavenet.py": {
        "torch": {
            "pad_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (self.pad, 0))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv1d_43": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (self.pad, 0))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_92": {
                "variable": {
                    "value": "self.res_to_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "res_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "skip_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.res_to_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GatedCConv1D(res_channels, hid_channels, kernel_size, cond_channels, dilation=2 ** (i % num_stages), mask_self=False) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_99": {
                "variable": {
                    "value": "self.hid_to_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(hid_channels, skip_channels, 1, bias=False) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_103": {
                "variable": {
                    "value": "self.hid_to_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(hid_channels, res_channels, 1, bias=False) for _ in range(num_layers - 1)] + [None]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.skip_to_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(skip_channels, skip_channels, 1) for _ in range(num_output_layers - 1)] + [nn.Conv1d(skip_channels, out_channels, 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_122": {
                "variable": {
                    "value": "x_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_to_hid(x_res, conds)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_hid, self.dropout, self.training, True)",
                            "Call"
                        ],
                        [
                            "res_to_hid(x_res, conds)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_hid, self.dropout, self.training, True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "x_skip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_to_skip(x_res)",
                            "Call"
                        ],
                        [
                            "x_skip + hid_to_skip(x_hid)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x_skip)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_skip, self.dropout, self.training, True)",
                            "Call"
                        ],
                        [
                            "skip_to_out(x_skip)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.relu(x_skip)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_skip, self.dropout, self.training, True)",
                            "Call"
                        ],
                        [
                            "skip_to_out(x_skip)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_130": {
                "variable": {
                    "value": "x_skip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_to_skip(x_res)",
                            "Call"
                        ],
                        [
                            "x_skip + hid_to_skip(x_hid)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x_skip)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_skip, self.dropout, self.training, True)",
                            "Call"
                        ],
                        [
                            "skip_to_out(x_skip)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.relu(x_skip)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_skip, self.dropout, self.training, True)",
                            "Call"
                        ],
                        [
                            "skip_to_out(x_skip)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Bernoulli_166": {
                "variable": {
                    "value": "ber",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.tensor([1.0 - self.ahead_corruption], device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_207": {
                "variable": {
                    "value": "x_skip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_to_skip(x_res)",
                            "Call"
                        ],
                        [
                            "x_skip + hid_to_skip(x_hid)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x_skip)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_skip, self.dropout, self.training, True)",
                            "Call"
                        ],
                        [
                            "skip_to_out(x_skip)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.relu(x_skip)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_skip, self.dropout, self.training, True)",
                            "Call"
                        ],
                        [
                            "skip_to_out(x_skip)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_208": {
                "variable": {
                    "value": "x_skip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.res_to_skip(x_res)",
                            "Call"
                        ],
                        [
                            "x_skip + hid_to_skip(x_hid)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x_skip)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_skip, self.dropout, self.training, True)",
                            "Call"
                        ],
                        [
                            "skip_to_out(x_skip)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.relu(x_skip)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_skip, self.dropout, self.training, True)",
                            "Call"
                        ],
                        [
                            "skip_to_out(x_skip)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "input": {
                    "value": "g1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "x_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_shift, x_corrupt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_192": {
                "variable": {
                    "value": "x_shift",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "F.pad(x, (nframes, 0))[:, :, :-nframes]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([x_shift, x_corrupt], dim=1)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, nframes))[:, :, nframes:]",
                            "Subscript"
                        ],
                        [
                            "torch.flip(x_shift, dims=[2])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_199": {
                "variable": {
                    "value": "x_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res_to_hid(x_res, conds)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_hid, self.dropout, self.training, True)",
                            "Call"
                        ],
                        [
                            "res_to_hid(x_res, conds)",
                            "Call"
                        ],
                        [
                            "F.dropout(x_hid, self.dropout, self.training, True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_100": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "skip_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_167": {
                "data": {
                    "value": "[1.0 - self.ahead_corruption]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_104": {
                "in_channels": {
                    "value": "hid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "res_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_108": {
                "in_channels": {
                    "value": "skip_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "skip_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_110": {
                "in_channels": {
                    "value": "skip_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_184": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (self.pad, 0))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(nframes, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_186": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (self.pad, 0))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, nframes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/summary.py": {
        "torch": {
            "prod_61": {
                "input": {
                    "value": "torch.LongTensor(list(module.weight.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_64": {
                "input": {
                    "value": "torch.LongTensor(list(module.bias.size()))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/tests/test_data.py": {
        "torch": {}
    },
    "distsup/trainer.py": {
        "torch": {
            "clip_grad_norm__60": {
                "variable": {
                    "value": "unclipped_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "model.get_parameters_for_optimizer()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_519": {
                "input": {
                    "value": "final_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_534": {
                "input": {
                    "value": "parameter.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_device_name_214": {
                "device": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_551": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "distsup/utils.py": {
        "torch": {
            "arange_384": {
                "variable": {
                    "value": "arange",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "mask_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_399": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_572": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([math.sqrt(stddev)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_578": {
                "variable": {
                    "value": "untruncated_sampled_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "middle + sample",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_583": {
                "variable": {
                    "value": "reversed_mini_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_593": {
                "variable": {
                    "value": "(rnn_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "rnn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_599": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mini_batch.shape[0:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_607": {
                "variable": {
                    "value": "z_means",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_608": {
                "variable": {
                    "value": "var_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(means, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_608": {
                "variable": {
                    "value": "var_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_684": {
                "variable": {
                    "value": "flipped_padded_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Bernoulli_691": {
                "variable": {
                    "value": "ber",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.tensor([1.0 - p], device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_579": {
                "input": {
                    "value": "torch.max(starts, untruncated_sampled_positions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_586": {
                "variable": {
                    "value": "time_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "T - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "mini_batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_587": {
                "variable": {
                    "value": "reversed_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mini_batch[b, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "time_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(T - 1, -1, -1, device=mini_batch.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_601": {
                "variable": {
                    "value": "mask[b, 0:seq_lengths[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_lengths[b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_654": {
                "variable": {
                    "value": "self.lift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(_make_liftering(input_dim, input_dim - 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_655": {
                "variable": {
                    "value": "self.dct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(_make_dct(input_dim, input_dim, inv=False, normalize=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_686": {
                "sequences": {
                    "value": "sequences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[flipped_padded_sequence[i, num_timesteps - length:] for (i, length) in enumerate(sequence_lengths)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_tensor_68": {
                "obj": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_573": {
                "data": {
                    "value": "[math.sqrt(stddev)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_579": {
                "input": {
                    "value": "starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.r_[0, where(~np.isclose(x[1:], x[:-1], equal_nan=True)) + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_692": {
                "data": {
                    "value": "[1.0 - p]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_62": {
                "obj": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_402": {
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_654": {
                "ndarray": {
                    "value": "_make_liftering(input_dim, input_dim - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_655": {
                "ndarray": {
                    "value": "_make_dct(input_dim, input_dim, inv=False, normalize=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_660": {
                "input": {
                    "value": "x[:, :, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.dct",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_452": {
                "start": {
                    "value": "table.permute(2, 0, 1).size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_609": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "z_means.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "egs/mnist/custom_data.py": {
        "torch": {
            "from_numpy_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.xtr[item]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_46": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(self.ytr[item]).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.xte[item]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_49": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(self.yte[item]).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "self.ytr[item]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "ndarray": {
                    "value": "self.yte[item]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "egs/scribblelens/data.py": {
        "torch": {}
    },
    "egs/scribblelens/data_v2.py": {
        "torch": {}
    },
    "egs/scribblelens/tools/readAlignment.py": {
        "torch": {}
    },
    "egs/scribblelens/tools/splitAlignment.py": {
        "torch": {}
    },
    "egs/scribblelens/tools/visualizeAlignment.py": {
        "torch": {}
    },
    "evaluate.py": {
        "torch": {
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_streamtokenizer.py": {
        "torch": {
            "bernoulli_51": {
                "input": {
                    "value": "mask * self.error_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "zeros_123": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_125": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_131": {
                "seed": {
                    "value": "args.rng_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}