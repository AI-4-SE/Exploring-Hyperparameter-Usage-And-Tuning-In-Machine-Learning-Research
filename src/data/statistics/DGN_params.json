{
    "GCNII_Cora.py": {
        "torch": {
            "device_131": {
                "variable": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "[dict(params=model.reg_params, weight_decay=weight_decay1), dict(params=model.non_reg_params, weight_decay=weight_decay2)]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            },
            "manual_seed_all_42": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.layers_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_116": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "con(x, edge_index, alpha, _hidden[0], beta, edge_weight)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[-1](x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.6",
                            "Constant"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_118": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "con(x, edge_index, alpha, _hidden[0], beta, edge_weight)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[-1](x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_126": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "con(x, edge_index, alpha, _hidden[0], beta, edge_weight)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[-1](x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.6",
                            "Constant"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_144": {
                "variable": {
                    "value": "loss_train",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "model()[data.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data.y[data.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_154": {
                "variable": {
                    "value": "loss_val",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[data.val_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data.y[data.val_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_31": {
                "start": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x.size(0)",
                            "Call"
                        ],
                        [
                            "data.x.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_121": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "con(x, edge_index, alpha, _hidden[0], beta, edge_weight)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[-1](x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.6",
                            "Constant"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "con(x, edge_index, alpha, _hidden[0], beta, edge_weight)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[-1](x)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_128": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[0](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "con(x, edge_index, alpha, _hidden[0], beta, edge_weight)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.convs[-1](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1433",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "7",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "GCNII_layer.py": {
        "torch": {
            "ones_25": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.weight2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_68": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_102": {
                "input": {
                    "value": "h0",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight2",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_15": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/GAT.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.layers_GCN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.layers_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers_GCN[i](x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_52": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers_GCN[i](x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/GCN.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "self.layers_GCN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_18": {
                "variable": {
                    "value": "self.layers_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers_GCN[i](x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_48": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.layers_GCN[i](x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/common_blocks.py": {
        "torch": {
            "BatchNorm1d_15": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_hidden",
                    "type": "Name",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_17": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_hidden * self.num_groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.group_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_hidden",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "score_cluster",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group_func(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "x_temp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_cluster[:, group].unsqueeze(dim=1) * x for group in range(self.num_groups)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/simpleGCN.py": {
        "torch": {
            "ModuleList_27": {
                "variable": {
                    "value": "self.layers_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_feats, self.num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_39": {
                "variable": {
                    "value": "edge_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_54": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x_conv)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_55": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.weight)",
                            "Call"
                        ],
                        [
                            "self.layers_bn[i](x_conv)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "max_70": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "correct",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "indices[mask] == labels[mask]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_77": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{args.cuda_num}' if args.cuda else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_104": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_211": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[self.data.train_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_225": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(self.data.x, self.data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits[self.data.train_mask], 1)",
                            "Call"
                        ],
                        [
                            "self.model(self.data.x, self.data.edge_index)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "train_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "val_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "test_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_61": {
                "start": {
                    "value": "num_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.x.size(0)",
                            "Call"
                        ],
                        [
                            "data.x.size(0)",
                            "Call"
                        ],
                        [
                            "data.x.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_281": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'{filetype}_{type_model}_{type_norm}L{num_layers}M{miss_rate}S{seed}G{group}S{skip_weight}.pth.tar'",
                            "JoinedStr"
                        ],
                        [
                            "f'{filetype}_{type_model}_{type_norm}L{num_layers}M{miss_rate}S{seed}.pth.tar'",
                            "JoinedStr"
                        ],
                        [
                            "os.path.join(filedir, filename)",
                            "Call"
                        ],
                        [
                            "self.filename(filetype='params', type_model=type_model, dataset=dataset)",
                            "Call"
                        ],
                        [
                            "self.filename(filetype='params', type_model=type_model, dataset=dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_47": {
                "variable": {
                    "value": "perm",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "index.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_274": {
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'{filetype}_{type_model}_{type_norm}L{num_layers}M{miss_rate}S{seed}G{group}S{skip_weight}.pth.tar'",
                            "JoinedStr"
                        ],
                        [
                            "f'{filetype}_{type_model}_{type_norm}L{num_layers}M{miss_rate}S{seed}.pth.tar'",
                            "JoinedStr"
                        ],
                        [
                            "os.path.join(filedir, filename)",
                            "Call"
                        ],
                        [
                            "self.filename(filetype='params', type_model=type_model, dataset=dataset)",
                            "Call"
                        ],
                        [
                            "self.filename(filetype='params', type_model=type_model, dataset=dataset)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}