{
    "compute_feats.py": {
        "sklearn": {
            "shuffle_254": {
                "variable": {
                    "value": "bags_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "bags_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_55": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "transformed_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BagDataset(csv_file=csv_file_path, transform=Compose([ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_165": {
                "variable": {
                    "value": "resnet.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_178": {
                "variable": {
                    "value": "state_dict_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join('simclr', 'runs', args.weights_high, 'checkpoints', 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join('simclr', 'runs', args.weights, 'checkpoints', 'model.pth')",
                            "Call"
                        ],
                        [
                            "glob.glob('simclr/runs/*/checkpoints/*.pth')[-1]",
                            "Subscript"
                        ],
                        [
                            "os.path.join('simclr', 'runs', args.weights_low, 'checkpoints', 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_191": {
                "variable": {
                    "value": "state_dict_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join('simclr', 'runs', args.weights_high, 'checkpoints', 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join('simclr', 'runs', args.weights, 'checkpoints', 'model.pth')",
                            "Call"
                        ],
                        [
                            "glob.glob('simclr/runs/*/checkpoints/*.pth')[-1]",
                            "Subscript"
                        ],
                        [
                            "os.path.join('simclr', 'runs', args.weights_low, 'checkpoints', 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_188": {
                "obj": {
                    "value": "new_state_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join('embedder', args.dataset, 'embedder-high.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "new_state_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join('embedder', args.dataset, 'embedder-low.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_218": {
                "variable": {
                    "value": "state_dict_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join('simclr', 'runs', args.weights_high, 'checkpoints', 'model.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join('simclr', 'runs', args.weights, 'checkpoints', 'model.pth')",
                            "Call"
                        ],
                        [
                            "glob.glob('simclr/runs/*/checkpoints/*.pth')[-1]",
                            "Subscript"
                        ],
                        [
                            "os.path.join('simclr', 'runs', args.weights_low, 'checkpoints', 'model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_228": {
                "obj": {
                    "value": "new_state_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join('embedder', args.dataset, 'embedder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_mil.py": {
        "sklearn": {
            "roc_curve_88": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "bag_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "np.clip(data[0], 0, 1) + bag_labels",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "bag_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "this_class_label",
                            "Name"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_90": {
                "variable": {
                    "value": "auc_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "bag_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "np.clip(data[0], 0, 1) + bag_labels",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "bag_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "this_class_label",
                            "Name"
                        ]
                    ]
                }
            },
            "precision_recall_fscore_support_95": {
                "variable": {
                    "value": "(precision, recall, fscore, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "bag_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "np.clip(data[0], 0, 1) + bag_labels",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "bag_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "this_class_label",
                            "Name"
                        ]
                    ]
                },
                "average": {
                    "value": "binary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shuffle_150": {
                "variable": {
                    "value": "bag_ins_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "bag_ins_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_46": {
                "variable": {
                    "value": "data_bag_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shuffle_155": {
                "variable": {
                    "value": "bag_ins_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "bag_ins_list",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "data_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(data_bag_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(int(np.clip(data[0], 0, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_51": {
                "variable": {
                    "value": "(max_prediction, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_172": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "compute_pos_weight(bags_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_173": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(compute_pos_weight(bags_list))",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "milnet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_175": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(milnet.parameters(), lr=args.lr, betas=(0.5, 0.9), weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.num_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "data_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(data[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(int(np.clip(data[0], 0, 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_72": {
                "variable": {
                    "value": "(max_prediction, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_77": {
                "input": {
                    "value": "bag_prediction",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_tcga.py": {
        "sklearn": {
            "shuffle_22": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_35": {
                "variable": {
                    "value": "csvs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_df",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_67": {
                "variable": {
                    "value": "csvs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test_df",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "roc_curve_120": {
                "variable": {
                    "value": "(fpr, tpr, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(args.num_classes)",
                            "Call"
                        ],
                        [
                            "labels[:, c]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predictions[:, c]",
                            "Subscript"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_122": {
                "variable": {
                    "value": "c_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(args.num_classes)",
                            "Call"
                        ],
                        [
                            "labels[:, c]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "predictions[:, c]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shuffle_180": {
                "variable": {
                    "value": "train_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shuffle_181": {
                "variable": {
                    "value": "test_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "BCEWithLogitsLoss_162": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "milnet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_165": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(milnet.parameters(), lr=args.lr, betas=(0.5, 0.9), weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.num_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "5e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_47": {
                "variable": {
                    "value": "(max_prediction, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_prediction",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_160": {
                "variable": {
                    "value": "state_dict_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "init.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_79": {
                "variable": {
                    "value": "(max_prediction, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ins_prediction",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "milnet.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_path, str(run + 1) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_86": {
                "input": {
                    "value": "bag_prediction",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "attention_map.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "transformed_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BagDataset(csv_file=csv_file_path, transform=Compose([ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_146": {
                "variable": {
                    "value": "resnet.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "state_dict_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.aggregator_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_152": {
                "variable": {
                    "value": "state_dict_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.embedder_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "bag_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.vstack(feats_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "ins_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "classes_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.vstack(classes_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_86": {
                "variable": {
                    "value": "bag_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bag_prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(bag_prediction).squeeze().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(bag_prediction)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "bag_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_104": {
                "variable": {
                    "value": "attentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dsmil.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_size, out_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_class",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(dropout_v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_43": {
                "variable": {
                    "value": "self.fcc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "output_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sort_52": {
                "variable": {
                    "value": "(_, m_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(feats.view(feats.shape[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_53": {
                "variable": {
                    "value": "m_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.feature_extractor(x)",
                            "Call"
                        ],
                        [
                            "self.lin(feats)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "m_indices[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_55": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.q(feats).view(feats.shape[0], -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "q_max.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A / torch.sqrt(torch.tensor(Q.shape[1], dtype=torch.float32, device=device))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_57": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.v(feats)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_35": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_38": {
                "p": {
                    "value": "dropout_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_56": {
                "input": {
                    "value": "torch.tensor(Q.shape[1], dtype=torch.float32, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "Q.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "feats.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "simclr/data_aug/dataset_wrapper.py": {
        "torch": {
            "SubsetRandomSampler_70": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_71": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(csv_file='all_patches.csv', transform=SimCLRDataTransform(data_augment))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset(csv_file='all_patches.csv', transform=SimCLRDataTransform(data_augment))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "simclr/loss/nt_xent.py": {
        "torch": {
            "Softmax_12": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_15": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "diag + l1 + l2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensordot_34": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "y.T.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "representations",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zjs, zis]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_53": {
                "variable": {
                    "value": "l_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.similarity_function(representations, representations)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_54": {
                "variable": {
                    "value": "r_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.similarity_function(representations, representations)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-self.batch_size",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "positives",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l_pos, r_pos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(positives, negatives)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CosineSimilarity_19": {
                "variable": {
                    "value": "self._cosine_similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "simclr/models/baseline_encoder.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_14": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_22": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.l1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.l1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.l1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.l1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_37": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.l1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "self.l1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "simclr/models/resnet_simclr.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet.children())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resnet.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resnet.fc.in_features",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resnet.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.l1(h)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "simclr/simclr.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_36": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_54": {
                "variable": {
                    "value": "zis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(zis, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_55": {
                "variable": {
                    "value": "zjs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zjs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(zjs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "eval(self.config['weight_decay'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_77": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), 1e-05, weight_decay=eval(self.config['weight_decay']))",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "self.config['epochs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "DataParallel_67": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ResNetSimCLR(**self.config['model'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=range(device_n))",
                            "Call"
                        ],
                        [
                            "self._load_pre_trained_weights(model)",
                            "Call"
                        ],
                        [
                            "model.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "range(device_n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_136": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoints_folder, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_122": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_checkpoints_folder, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "testing_c16.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "transformed_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BagDataset(csv_file=csv_file_path, transform=Compose([ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_116": {
                "variable": {
                    "value": "resnet.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_120": {
                "variable": {
                    "value": "state_dict_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('test-c16', 'weights', 'embedder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_129": {
                "variable": {
                    "value": "state_dict_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('test-c16', 'weights', 'aggregator.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "bag_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.vstack(feats_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_83": {
                "variable": {
                    "value": "ins_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "classes_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.vstack(classes_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_85": {
                "variable": {
                    "value": "bag_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bag_prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(bag_prediction).squeeze().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_85": {
                "variable": {
                    "value": "bag_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "testing_tcga.py": {
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "transformed_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "BagDataset(csv_file=csv_file_path, transform=Compose([ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_121": {
                "variable": {
                    "value": "resnet.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_126": {
                "variable": {
                    "value": "state_dict_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('test', 'weights', 'embedder.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_135": {
                "variable": {
                    "value": "state_dict_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('test', 'weights', 'aggregator.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "bag_feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "feats_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.vstack(feats_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "ins_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "classes_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.vstack(classes_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_84": {
                "variable": {
                    "value": "bag_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bag_prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(bag_prediction).squeeze().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "bag_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}