{
    "mmdet/apis/env.py": {
        "torch": {
            "device_count_29": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_42": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_30": {
                "device": {
                    "value": "rank % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_43": {
                "device": {
                    "value": "proc_id % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_57": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/apis/inference.py": {
        "torch": {
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/apis/train.py": {
        "torch": {}
    },
    "mmdet/core/anchor/anchor_generator.py": {
        "torch": {
            "Tensor_8": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_9": {
                "variable": {
                    "value": "self.ratios",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_27": {
                "variable": {
                    "value": "h_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ratios",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_36": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_36": {
                "variable": {
                    "value": "base_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_xx, shift_yy, shift_xx, shift_yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "valid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "valid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_57": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_58": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "feat_h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/anchor/anchor_target.py": {
        "torch": {
            "stack_84": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(target, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_127": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_128": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_anchors[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_41": {
                "variable": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/anchor/anchor_target_rbbox.py": {
        "torch": {
            "stack_92": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(target, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_valid_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_valid_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "gt_obbs_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_obbs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_mask_bp_obbs(gt_masks, with_module)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_46": {
                "variable": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/anchor/guided_anchor_target.py": {
        "torch": {
            "round_20": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * bbox[0] + ratio * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_21": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - ratio) * bbox[1] + ratio * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_22": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * bbox[0] + (1 - ratio) * bbox[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_23": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ratio * bbox[1] + (1 - ratio) * bbox[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_208": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(target, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_267": {
                "variable": {
                    "value": "bbox_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_268": {
                "variable": {
                    "value": "bbox_gts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_269": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_squares[inside_flags, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "img_per_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(gt_bboxes_list)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_bboxes_list[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_like_71": {
                "variable": {
                    "value": "loc_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(img_per_gpu, 1, h, w, device=gt_bboxes_list[0].device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_72": {
                "variable": {
                    "value": "ignore_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(img_per_gpu, 1, h, w, device=gt_bboxes_list[0].device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_78": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt_bboxes[:, 2] - gt_bboxes[:, 0] + 1) * (gt_bboxes[:, 3] - gt_bboxes[:, 1] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_83": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale) - torch.log2(min_anchor_size) + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "inside_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "approx_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_172": {
                "tensors": {
                    "value": "square_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_84": {
                "input": {
                    "value": "min_anchor_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.new_full((1,), float(anchor_scale * anchor_strides[0]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/approx_max_iou_assigner.py": {
        "torch": {
            "transpose_90": {
                "variable": {
                    "value": "approxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "approxs.view(num_squares, approxs_per_octave, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_97": {
                "variable": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(overlaps, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/assign_result.py": {
        "torch": {
            "arange_13": {
                "variable": {
                    "value": "self_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(gt_labels) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "gt_labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_15": {
                "variable": {
                    "value": "self.gt_inds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self_inds, self.gt_inds]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_16": {
                "variable": {
                    "value": "self.max_overlaps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.max_overlaps.new_ones(self.num_gts), self.max_overlaps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_labels, self.labels]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/max_iou_assigner.py": {
        "torch": {
            "nonzero_144": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/max_iou_assigner_hbb_cy.py": {
        "torch": {
            "nonzero_144": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/assigners/max_iou_assigner_rbbox.py": {
        "torch": {
            "nonzero_143": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_143": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/bbox_target.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bbox_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 4)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_71": {
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/bbox_target_rbbox.py": {
        "torch": {
            "from_numpy_90": {
                "variable": {
                    "value": "pos_gt_obbs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "polygonToRotRectangle_batch(pos_gt_bp_polys, with_module)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ],
                        [
                            "pos_rbboxes.new_zeros(num_samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_rbboxes.new_zeros(num_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 5)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ],
                        [
                            "pos_rbboxes.new_zeros(num_samples, 5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bbox_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 5)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_rbboxes.new_zeros(num_samples, 5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels, 0)",
                            "Call"
                        ],
                        [
                            "pos_rbboxes.new_zeros(num_samples, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples)",
                            "Call"
                        ],
                        [
                            "torch.cat(label_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_rbboxes.new_zeros(num_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 5)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_targets, 0)",
                            "Call"
                        ],
                        [
                            "pos_rbboxes.new_zeros(num_samples, 5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bbox_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_bboxes.new_zeros(num_samples, 5)",
                            "Call"
                        ],
                        [
                            "torch.cat(bbox_weights, 0)",
                            "Call"
                        ],
                        [
                            "pos_rbboxes.new_zeros(num_samples, 5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_206": {
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_206": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/geometry.py": {
        "torch": {
            "from_numpy_232": {
                "variable": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_cython(boxes_np, query_boxes_np)",
                            "Call"
                        ],
                        [
                            "overlap / (area1 + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1[:, None] + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1[:, None]",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1 + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1[:, None] + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(ious).to(box_device)",
                            "Call"
                        ],
                        [
                            "overlap / (area1 + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1[:, None] + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1[:, None]",
                            "BinOp"
                        ],
                        [
                            "bbox_overlaps_cython(h_bboxes_np, h_query_bboxes_np)",
                            "Call"
                        ],
                        [
                            "bbox_overlaps_cython(h_bboxes_np, h_query_bboxes_np)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_13": {
                "ndarray": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_cython(boxes_np, query_boxes_np)",
                            "Call"
                        ],
                        [
                            "overlap / (area1 + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1[:, None] + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1[:, None]",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1 + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1[:, None] + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(ious).to(box_device)",
                            "Call"
                        ],
                        [
                            "overlap / (area1 + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1[:, None] + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1[:, None]",
                            "BinOp"
                        ],
                        [
                            "bbox_overlaps_cython(h_bboxes_np, h_query_bboxes_np)",
                            "Call"
                        ],
                        [
                            "bbox_overlaps_cython(h_bboxes_np, h_query_bboxes_np)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((n_, k_), dtype=np.float)",
                            "Call"
                        ],
                        [
                            "iw * ih / ua",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_145": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_146": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_160": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_161": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_276": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1_fp16[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_277": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1_fp16[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_291": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1_fp16[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_292": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bboxes1_fp16[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_354": {
                "ndarray": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_overlaps_cython(boxes_np, query_boxes_np)",
                            "Call"
                        ],
                        [
                            "overlap / (area1 + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1[:, None] + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1[:, None]",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1 + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1[:, None] + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1[:, None]",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(ious).to(box_device)",
                            "Call"
                        ],
                        [
                            "overlap / (area1 + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1",
                            "BinOp"
                        ],
                        [
                            "overlap / (area1[:, None] + area2 - overlap)",
                            "BinOp"
                        ],
                        [
                            "overlap / area1[:, None]",
                            "BinOp"
                        ],
                        [
                            "bbox_overlaps_cython(h_bboxes_np, h_query_bboxes_np)",
                            "Call"
                        ],
                        [
                            "bbox_overlaps_cython(h_bboxes_np, h_query_bboxes_np)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/geometry_test.py": {
        "torch": {
            "from_numpy_53": {
                "variable": {
                    "value": "self.bboxes1_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.bboxes1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "self.bboxes2_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.bboxes2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "boxlist1_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxlist1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((xs[:, np.newaxis], ys[:, np.newaxis], ws[:, np.newaxis], hs[:, np.newaxis], Theta[:, np.newaxis]), axis=1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((xs[:, np.newaxis], ys[:, np.newaxis], ws[:, np.newaxis], hs[:, np.newaxis], Theta[:, np.newaxis]), axis=1).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "boxlist2_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxlist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((xs2[:, np.newaxis], ys2[:, np.newaxis], ws2[:, np.newaxis], hs2[:, np.newaxis], Theta2[:, np.newaxis]), axis=1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((xs2[:, np.newaxis], ys2[:, np.newaxis], ws2[:, np.newaxis], hs2[:, np.newaxis], Theta2[:, np.newaxis]), axis=1).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_216": {
                "variable": {
                    "value": "boxlist1_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxlist1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((xs[:, np.newaxis], ys[:, np.newaxis], ws[:, np.newaxis], hs[:, np.newaxis], Theta[:, np.newaxis]), axis=1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((xs[:, np.newaxis], ys[:, np.newaxis], ws[:, np.newaxis], hs[:, np.newaxis], Theta[:, np.newaxis]), axis=1).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_217": {
                "variable": {
                    "value": "boxlist2_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxlist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((xs2[:, np.newaxis], ys2[:, np.newaxis], ws2[:, np.newaxis], hs2[:, np.newaxis], Theta2[:, np.newaxis]), axis=1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.concatenate((xs2[:, np.newaxis], ys2[:, np.newaxis], ws2[:, np.newaxis], hs2[:, np.newaxis], Theta2[:, np.newaxis]), axis=1).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/base_sampler.py": {
        "torch": {
            "cat_61": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "gt_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_ones, gt_flags]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/instance_balanced_pos_sampler.py": {
        "torch": {
            "nonzero_10": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sampled_inds)",
                            "Call"
                        ],
                        [
                            "torch.cat([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "self.random_choice(sampled_inds, num_expected)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_21": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == i.item()",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "extra_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "extra_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(list(set(pos_inds.cpu()) - set(sampled_inds.cpu())))",
                            "Call"
                        ],
                        [
                            "self.random_choice(extra_inds, num_extra)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(extra_inds).to(assign_result.gt_inds.device).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_38": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_inds, extra_inds]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/iou_balanced_neg_sampler.py": {
        "torch": {
            "nonzero_76": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(sampled_inds)",
                            "Call"
                        ],
                        [
                            "np.concatenate([sampled_inds, extra_inds])",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_floor_inds, iou_sampled_inds))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sampled_inds).long().to(assign_result.gt_inds.device)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled_inds, extra_inds))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/ohem_sampler.py": {
        "torch": {
            "nonzero_50": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_66": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/pseudo_sampler.py": {
        "torch": {
            "nonzero_19": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_19": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_19": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_21": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_21": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unique_21": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/random_sampler.py": {
        "torch": {
            "nonzero_37": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_47": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cands[:num]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rand_inds).long().to(gallery.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/rbbox_base_sampler.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "rbboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_rbboxes, rbboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "gt_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_ones, gt_flags]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/rbbox_random_sampler.py": {
        "torch": {
            "nonzero_37": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_47": {
                "variable": {
                    "value": "neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rand_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cands[:num]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rand_inds).long().to(gallery.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/samplers/sampling_result.py": {
        "torch": {
            "cat_24": {
                "tensors": {
                    "value": "[self.pos_bboxes, self.neg_bboxes]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/transforms.py": {
        "torch": {
            "log_23": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gw / pw",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_24": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gh / ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_25": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dx, dy, dw, dh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "addcmul_56": {
                "variable": {
                    "value": "gx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proposals[..., 0] + proposals[..., 2]) * 0.5",
                            "BinOp"
                        ],
                        [
                            "((rois[:, 0] + rois[:, 2]) * 0.5).unsqueeze(1).expand_as(dx)",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[..., 2] - proposals[..., 0] + 1.0",
                            "BinOp"
                        ],
                        [
                            "(rois[:, 2] - rois[:, 0] + 1.0).unsqueeze(1).expand_as(dw)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gx - px) / pw",
                            "BinOp"
                        ],
                        [
                            "denorm_deltas[:, 0::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "addcmul_57": {
                "variable": {
                    "value": "gy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "py",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(proposals[..., 1] + proposals[..., 3]) * 0.5",
                            "BinOp"
                        ],
                        [
                            "((rois[:, 1] + rois[:, 3]) * 0.5).unsqueeze(1).expand_as(dy)",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[..., 3] - proposals[..., 1] + 1.0",
                            "BinOp"
                        ],
                        [
                            "(rois[:, 3] - rois[:, 1] + 1.0).unsqueeze(1).expand_as(dh)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gy - py) / ph",
                            "BinOp"
                        ],
                        [
                            "denorm_deltas[:, 1::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_67": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rois_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_130": {
                "variable": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_179": {
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_inds, bboxes[:, :4]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/bbox/transforms_rbbox.py": {
        "torch": {
            "log_34": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / proposals_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_35": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / proposals_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_37": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dx, dy, dw, dh, dangle)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gx, gy, gw, gh, gangle]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_124": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / proposals_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_125": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / proposals_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dx, dy, dw, dh, dangle)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_191": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gx, gy, gw, gh, gangle]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_214": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / roi_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_215": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / roi_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_218": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_dangle % (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.min(dist, np.pi * 2 - dist)",
                            "Call"
                        ],
                        [
                            "dist / (np.pi / 2.0)",
                            "BinOp"
                        ],
                        [
                            "(Rroi_angles - gt_angle_extent) % (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.min(dist, np.pi * 2 - dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_229": {
                "variable": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh, dist)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_276": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gx, gy, gw, gh, gangle]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "gt_angle_extent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_angles[:, np.newaxis], (gt_angles + np.pi / 2.0)[:, np.newaxis], (gt_angles + np.pi)[:, np.newaxis], (gt_angles + np.pi * 3 / 2.0)[:, np.newaxis])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_299": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_dangle % (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.min(dist, np.pi * 2 - dist)",
                            "Call"
                        ],
                        [
                            "dist / (np.pi / 2.0)",
                            "BinOp"
                        ],
                        [
                            "(Rroi_angles - gt_angle_extent) % (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.min(dist, np.pi * 2 - dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_300": {
                "variable": {
                    "value": "min_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_dangle % (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.min(dist, np.pi * 2 - dist)",
                            "Call"
                        ],
                        [
                            "dist / (np.pi / 2.0)",
                            "BinOp"
                        ],
                        [
                            "(Rroi_angles - gt_angle_extent) % (2 * np.pi)",
                            "BinOp"
                        ],
                        [
                            "torch.min(dist, np.pi * 2 - dist)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "gt_rois_extent1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_xs.unsqueeze(1), gt_ys.unsqueeze(1), gt_hs.unsqueeze(1), gt_ws.unsqueeze(1), gt_angles.unsqueeze(1) + np.pi / 2.0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "gt_rois_extent2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_xs.unsqueeze(1), gt_ys.unsqueeze(1), gt_ws.unsqueeze(1), gt_hs.unsqueeze(1), gt_angles.unsqueeze(1) + np.pi)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "gt_rois_extent3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_xs.unsqueeze(1), gt_ys.unsqueeze(1), gt_hs.unsqueeze(1), gt_ws.unsqueeze(1), gt_angles.unsqueeze(1) + np.pi * 3 / 2.0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "gt_rois_extent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gt_rois_extent0.unsqueeze(1), gt_rois_extent1.unsqueeze(1), gt_rois_extent2.unsqueeze(1), gt_rois_extent3.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_314": {
                "variable": {
                    "value": "gt_rois_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "xys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bboxes[..., 0::5].view(-1, 1), bboxes[..., 1::5].view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_447": {
                "variable": {
                    "value": "norm_rotated_xys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_xys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xys - center",
                            "BinOp"
                        ],
                        [
                            "xys - center",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rotate_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[np.cos(angle / 180 * np.pi), np.sin(angle / 180 * np.pi)], [-np.sin(angle / 180 * np.pi), np.cos(angle / 180 * np.pi)]]).to(bboxes.device)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[np.cos(angle / 180 * np.pi), np.sin(angle / 180 * np.pi)], [-np.sin(angle / 180 * np.pi), np.cos(angle / 180 * np.pi)]]).to(bboxes.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_453": {
                "variable": {
                    "value": "rotated_dbboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bboxes.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_491": {
                "variable": {
                    "value": "xys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_bboxes[..., 0::4].view(-1, 1), c_bboxes[..., 1::4].view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_497": {
                "variable": {
                    "value": "norm_rotated_xys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_xys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xys - center",
                            "BinOp"
                        ],
                        [
                            "xys - center",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rotate_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([[np.cos(angle / 180 * np.pi), np.sin(angle / 180 * np.pi)], [-np.sin(angle / 180 * np.pi), np.cos(angle / 180 * np.pi)]]).to(bboxes.device)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[np.cos(angle / 180 * np.pi), np.sin(angle / 180 * np.pi)], [-np.sin(angle / 180 * np.pi), np.cos(angle / 180 * np.pi)]]).to(bboxes.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_503": {
                "variable": {
                    "value": "rotated_cbboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bboxes.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_730": {
                "variable": {
                    "value": "dbboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_bboxes, initial_angles)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_745": {
                "variable": {
                    "value": "c_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ex_ctr_x.unsqueeze(1), ex_ctr_y.unsqueeze(1), ex_widths.unsqueeze(1), ex_heights.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_748": {
                "variable": {
                    "value": "dbboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_bboxes, initial_angles)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_860": {
                "variable": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dboxes[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_861": {
                "variable": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dboxes[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_877": {
                "variable": {
                    "value": "polys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1.unsqueeze(1), y1.unsqueeze(1), x2.unsqueeze(1), y2.unsqueeze(1), x3.unsqueeze(1), y3.unsqueeze(1), x4.unsqueeze(1), y4.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_926": {
                "variable": {
                    "value": "drois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "drois_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_931": {
                "variable": {
                    "value": "img_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drois[:, 0].cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_666": {
                "tensors": {
                    "value": "(ex_ctr_x.unsqueeze(1), ex_ctr_y.unsqueeze(1), ex_widths.unsqueeze(1), ex_heights.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_700": {
                "tensors": {
                    "value": "(xmins.unsqueeze(1), ymins.unsqueeze(1), xmaxs.unsqueeze(1), ymaxs.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_760": {
                "tensors": {
                    "value": "(rois[:, 0].unsqueeze(1), obbs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_977": {
                "tensors": {
                    "value": "[x1, y1, x2, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_225": {
                "input": {
                    "value": "targets_dangle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_angle - roi_angle",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_921": {
                "variable": {
                    "value": "drois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_inds, dbboxes[:, :5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_30": {
                "input": {
                    "value": "proposals[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_31": {
                "input": {
                    "value": "proposals[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_33": {
                "input": {
                    "value": "proposals[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_82": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_83": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_84": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_85": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_120": {
                "input": {
                    "value": "proposals[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_121": {
                "input": {
                    "value": "proposals[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_123": {
                "input": {
                    "value": "proposals[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_176": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_177": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_178": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_179": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_212": {
                "input": {
                    "value": "roi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[..., 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_212": {
                "input": {
                    "value": "roi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[..., 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_213": {
                "input": {
                    "value": "roi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[..., 4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cos_263": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_264": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_265": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_266": {
                "input": {
                    "value": "Rroi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ],
                        [
                            "Rrois[:, 4].unsqueeze(1).expand_as(dangle)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_32": {
                "input": {
                    "value": "proposals[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_122": {
                "input": {
                    "value": "proposals[..., 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_213": {
                "input": {
                    "value": "roi_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[..., 4]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/bbox/transforms_rbbox_test.py": {
        "torch": {
            "from_numpy_111": {
                "variable": {
                    "value": "drois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "drois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 2, 3, 39, 30, np.pi / 2], [0, 3.2, 3, 30, 20, np.pi / 3], [1, 1, 3, 39, 30, np.pi / 2], [1, 5.2, 3, 30, 20, np.pi / 3]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(drois)",
                            "Call"
                        ],
                        [
                            "roi2droi(rois)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "Rrois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Rrois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[3, 4, 2, 10, np.pi / 6.0], [3, 4, 10, 2, np.pi / 6.0 + np.pi / 2.0], [3, 4, 2, 10, np.pi / 6.0 + np.pi], [3, 4, 10, 2, np.pi / 6.0 + np.pi + np.pi / 2.0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Rrois).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_178": {
                "variable": {
                    "value": "boxlist1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxlist1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.DoubleTensor([[1, 1, 10, 5, 0], [1, 1, 10, 5, np.pi / 10], [1, 1, 10, 5, 0], [30, 100, 60, 34, np.pi / 2]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1, 10, 5, 0], [1, 1, 10, 5, np.pi / 10], [1, 1, 10, 5, 0], [30, 100, 60, 34, np.pi / 2]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 10, 5, 0], [1, 1, 10, 5, 0], [1, 1, 10, 5, np.pi - np.pi / 10.0], [1, 1, 10, 5, np.pi - np.pi / 10.0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(boxlist1).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1, 10, 5, 0], [1, 1, 10, 5, np.pi / 10], [1, 1, 10, 5, 0], [30, 100, 60, 34, np.pi / 2]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1, 10, 5, 0], [1, 1, 10, 5, np.pi / 10], [1, 1, 10, 5, 0], [30, 100, 60, 34, np.pi / 2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_179": {
                "variable": {
                    "value": "boxlist2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxlist2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.DoubleTensor([[1, 1, 5, 8, np.pi / 16], [1, 1, 5, 8, np.pi / 16 + np.pi / 10], [1, 1, 10, 5, 0], [30, 90, 12, 45, np.pi / 10]])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1, 5, 8, np.pi / 16], [1, 1, 5, 8, np.pi / 16 + np.pi / 10], [1, 1, 10, 5, 0], [30, 90, 12, 45, np.pi / 10]])",
                            "Call"
                        ],
                        [
                            "np.array([[1, 1, 5, 10, -np.pi / 10.0 + np.pi / 2.0], [1, 1, 10, 5, np.pi / 10 + np.pi], [1, 1, 5, 10, np.pi - np.pi / 10.0 - np.pi / 20.0 - np.pi / 2.0], [1, 1, 10, 5, np.pi - np.pi / 10.0 - np.pi / 20.0 + 10 * np.pi]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(boxlist2).float().cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([[1, 1, 5, 8, np.pi / 16], [1, 1, 5, 8, np.pi / 16 + np.pi / 10], [1, 1, 10, 5, 0], [30, 90, 12, 45, np.pi / 10]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/evaluation/eval_hooks.py": {
        "torch": {
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/loss/losses.py": {
        "torch": {
            "nll_loss_13": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_20": {
                "variable": {
                    "value": "raw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_76": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_85": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_86": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * diff * diff / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "diff - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_114": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_116": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha / b * (b * diff + 1) * torch.log(b * diff / beta + 1) - alpha * diff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma * diff + gamma / b - alpha * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "loss_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[loss_dx, loss_dy, loss_dw, loss_dh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_183": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "loss_comb < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * loss_comb * loss_comb / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "loss_comb - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_204": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight[:, 0] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_243": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_243": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_48": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_78": {
                "input": {
                    "value": "pred_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[inds, label].squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.type_as(pred)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_170": {
                "input": {
                    "value": "(target_w - 2 * dx.abs()) / (target_w + 2 * dx.abs() + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_173": {
                "input": {
                    "value": "(target_h - 2 * dy.abs()) / (target_h + 2 * dy.abs() + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_176": {
                "input": {
                    "value": "target_w / (pred_w + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_178": {
                "input": {
                    "value": "target_h / (pred_h + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_12": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_14": {
                "input": {
                    "value": "raw * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_19": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_32": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "sigmoid_focal_loss(pred, target, gamma, alpha, 'none') * weight.view(-1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "loss * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "loss * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ctrx - pred_ctrx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_175": {
                "input": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ctry - pred_ctry",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_22": {
                "input": {
                    "value": "raw * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_118": {
                "input": {
                    "value": "b * diff / beta + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "weight > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/mask/mask_target.py": {
        "torch": {
            "cat_11": {
                "variable": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(mask_targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(mask_targets)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/post_processing/bbox_nms.py": {
        "torch": {
            "cat_46": {
                "variable": {
                    "value": "cls_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_bboxes, _scores[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bboxes)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0, 5))",
                            "Call"
                        ],
                        [
                            "bboxes[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_54": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0,), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels[inds]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/post_processing/merge_augs.py": {
        "torch": {
            "cat_31": {
                "variable": {
                    "value": "aug_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_60": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_64": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_71": {
                "input": {
                    "value": "torch.stack(aug_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_71": {
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/post_processing/merge_augs_rotate.py": {
        "torch": {
            "cat_38": {
                "variable": {
                    "value": "aug_proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "recovered_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_91": {
                "input": {
                    "value": "torch.stack(aug_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_91": {
                "tensors": {
                    "value": "aug_scores",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/core/post_processing/rbbox_nms.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "RotBox2Polys(_bboxes.cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "cls_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_bboxes, _scores[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bboxes)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0, 9))",
                            "Call"
                        ],
                        [
                            "bboxes[inds]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(bboxes)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0, 9))",
                            "Call"
                        ],
                        [
                            "bboxes[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0,), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels[inds]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0,), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "RotBox2Polys(_bboxes.cpu().numpy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "cls_dets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_bboxes, _scores[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(bboxes)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0, 9))",
                            "Call"
                        ],
                        [
                            "bboxes[inds]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(bboxes)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0, 9))",
                            "Call"
                        ],
                        [
                            "bboxes[inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_130": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0,), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels[inds]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ],
                        [
                            "multi_bboxes.new_zeros((0,), dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "labels[inds]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/core/utils/dist_utils.py": {
        "torch": {}
    },
    "mmdet/datasets/concat_dataset.py": {
        "torch": {}
    },
    "mmdet/datasets/custom.py": {
        "torch": {}
    },
    "mmdet/datasets/loader/build_loader.py": {
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * imgs_per_gpu",
                            "BinOp"
                        ],
                        [
                            "imgs_per_gpu",
                            "Name"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupSampler(dataset, imgs_per_gpu) if shuffle else None",
                            "IfExp"
                        ],
                        [
                            "DistributedGroupSampler(dataset, imgs_per_gpu, world_size, rank)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset, world_size, rank, shuffle=False)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_gpus * workers_per_gpu",
                            "BinOp"
                        ],
                        [
                            "workers_per_gpu",
                            "Name"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "partial(collate, samples_per_gpu=imgs_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/datasets/loader/sampler.py": {
        "torch": {
            "from_numpy_70": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(len(self.dataset), generator=g).tolist()",
                            "Call"
                        ],
                        [
                            "torch.arange(len(self.dataset)).tolist()",
                            "Call"
                        ],
                        [
                            "indices + indice",
                            "BinOp"
                        ],
                        [
                            "indices[self.rank:self.total_size:self.num_replicas]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(indices)",
                            "Call"
                        ],
                        [
                            "[indices[i * self.samples_per_gpu:(i + 1) * self.samples_per_gpu] for i in np.random.permutation(range(len(indices) // self.samples_per_gpu))]",
                            "ListComp"
                        ],
                        [
                            "np.concatenate(indices)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).long()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[indices[j] for i in list(torch.randperm(len(indices) // self.samples_per_gpu, generator=g)) for j in range(i * self.samples_per_gpu, (i + 1) * self.samples_per_gpu)]",
                            "ListComp"
                        ],
                        [
                            "indices[offset:offset + self.num_samples]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Generator_121": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Generator_21": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_23": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_25": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_142": {
                "n": {
                    "value": "len(indices) // self.samples_per_gpu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_129": {
                "n": {
                    "value": "int(size)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ],
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/datasets/transforms.py": {
        "torch": {
            "from_numpy_145": {
                "ndarray": {
                    "value": "args[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "ndarray": {
                    "value": "np.array(array)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/datasets/utils.py": {
        "torch": {
            "from_numpy_24": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/anchor_head.py": {
        "torch": {
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_263": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_266": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/anchor_head_rbbox.py": {
        "torch": {
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_278": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_281": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/fcos_head.py": {
        "torch": {
            "ModuleList_42": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.fcos_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.cls_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.fcos_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.fcos_centerness",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(1.0) for _ in self.strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_cls_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cls_score.permute(0, 2, 3, 1).reshape(-1, self.cls_out_channels) for cls_score in cls_scores]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_cls_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_132": {
                "variable": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_bbox_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox_pred.permute(0, 2, 3, 1).reshape(-1, 4) for bbox_pred in bbox_preds]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_bbox_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_133": {
                "variable": {
                    "value": "flatten_centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flatten_centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[centerness.permute(0, 2, 3, 1).reshape(-1) for centerness in centernesses]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(flatten_centerness)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_134": {
                "variable": {
                    "value": "flatten_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_labels[min_area_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_135": {
                "variable": {
                    "value": "flatten_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((left, top, right, bottom), -1)",
                            "Call"
                        ],
                        [
                            "bbox_targets[range(num_points), min_area_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_137": {
                "variable": {
                    "value": "flatten_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points.repeat(num_imgs, 1) for points in all_level_points]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_241": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_243": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "mlvl_centerness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_centerness)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_274": {
                "variable": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_276": {
                "variable": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_278": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, h * stride, stride, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, w * stride, stride, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_292": {
                "variable": {
                    "value": "concat_regress_ranges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "expanded_regress_ranges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[points[i].new_tensor(self.regress_ranges[i])[None].expand_as(points[i]) for i in range(num_levels)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "concat_points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[topk_inds, :]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((x.reshape(-1), y.reshape(-1)), dim=-1) + stride // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_341": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left, top, right, bottom)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_371": {
                "input": {
                    "value": "centerness_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "left_right.min(dim=-1)[0] / left_right.max(dim=-1)[0] * (top_bottom.min(dim=-1)[0] / top_bottom.max(dim=-1)[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_279": {
                "tensors": {
                    "value": "(x.reshape(-1), y.reshape(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_162": {
                "input": {
                    "value": "pos_centerness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flatten_centerness[pos_inds]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "pos_centerness_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.centerness_target(pos_bbox_targets)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_315": {
                "tensors": {
                    "value": "[labels[i] for labels in labels_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_317": {
                "tensors": {
                    "value": "[bbox_targets[i] for bbox_targets in bbox_targets_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/ga_retina_head.py": {
        "torch": {
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/ga_rpn_head.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.rpn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rpn_conv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposals, scores.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_108": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w >= cfg.min_bbox_size) & (h >= cfg.min_bbox_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/guided_anchor_head.py": {
        "torch": {
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "deformable_groups * offset_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "variable": {
                    "value": "self.conv_loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "variable": {
                    "value": "self.conv_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_366": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_weights[:, 0] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_366": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_581": {
                "variable": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_bboxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_bboxes)",
                            "Call"
                        ],
                        [
                            "mlvl_bboxes / mlvl_bboxes.new_tensor(scale_factor)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_584": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mlvl_scores)",
                            "Call"
                        ],
                        [
                            "torch.cat([padding, mlvl_scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_587": {
                "variable": {
                    "value": "mlvl_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, mlvl_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_261": {
                "tensors": {
                    "value": "inside_flags_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_261": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/retina_head.py": {
        "torch": {
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_35": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.retina_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.retina_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/retina_head_rbbox.py": {
        "torch": {
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.retina_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.retina_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/rpn_head.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.rpn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.rpn_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.rpn_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rpn_conv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_proposals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposals, scores.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_87": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w >= cfg.min_bbox_size) & (h >= cfg.min_bbox_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "valid_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/anchor_heads/ssd_head.py": {
        "torch": {
            "ModuleList_47": {
                "variable": {
                    "value": "self.reg_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "reg_convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.cls_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cls_convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_166": {
                "variable": {
                    "value": "all_cls_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s.permute(0, 2, 3, 1).reshape(num_images, -1, self.cls_out_channels) for s in cls_scores]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "all_label_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "all_bbox_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b.permute(0, 2, 3, 1).reshape(num_images, -1, 4) for b in bbox_preds]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "all_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_targets_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "all_bbox_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "bbox_weights_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_87": {
                "variable": {
                    "value": "anchor_generator.base_anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_generator.base_anchors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.LongTensor(indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_112": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors[i] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors[i] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/hrnet.py": {
        "torch": {
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, self.in_channels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "modules": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_174": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_356": {
                "modules": {
                    "value": "transition_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_361": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_420": {
                "*args": {
                    "value": "*hr_modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_172": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_354": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_322": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, num_channels_pre_layer[i], num_channels_cur_layer[i], kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels, out_channels, kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_137": {
                "scale_factor": {
                    "value": "2 ** (j - i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "*args": {
                    "value": "*conv_downsamples",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_333": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_353": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[i], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "*args": {
                    "value": "build_conv_layer(self.conv_cfg, in_channels[j], in_channels[j], kernel_size=3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_170": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/resnet.py": {
        "torch": {
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_308": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_438": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_439": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "variable": {
                    "value": "self.conv2_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64 * 2 ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * offset_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv2_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations[i]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/backbones/resnext.py": {
        "torch": {
            "Sequential_110": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv2_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.planes",
                            "Attribute"
                        ],
                        [
                            "math.floor(self.planes * (base_width / 64)) * groups",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deformable_groups * offset_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.conv2_stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/backbones/ssd_vgg.py": {
        "torch": {
            "Parameter_124": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "layer(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "outplanes[i + 1]",
                            "Subscript"
                        ],
                        [
                            "outplanes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[num_layers % 2]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "outplanes[i + 1]",
                            "Subscript"
                        ],
                        [
                            "outplanes[i]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_sizes[num_layers % 2]",
                            "Subscript"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/bbox_heads/bbox_head.py": {
        "torch": {
            "AvgPool2d_48": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "roi_feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * (self.roi_feat_size * self.roi_feat_size)",
                            "BinOp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "81",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * (self.roi_feat_size * self.roi_feat_size)",
                            "BinOp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if reg_class_agnostic else 4 * num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "nonzero_170": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0] == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_170": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_206": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label, label + 1, label + 2, label + 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_207": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_reg(x) if self.with_reg else None",
                            "IfExp"
                        ],
                        [
                            "torch.gather(bbox_pred, 1, inds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(rois[:, 0] == i).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.stack((label, label + 1, label + 2, label + 3), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_216": {
                "variable": {
                    "value": "new_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, [0]], bboxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_129": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_cls(x) if self.with_cls else None",
                            "IfExp"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/bbox_heads/convfc_bbox_head.py": {
        "torch": {
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "branch_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_109": {
                "variable": {
                    "value": "branch_fcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.cls_last_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reg_last_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if self.reg_class_agnostic else 4 * self.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/builder.py": {
        "torch": {
            "Sequential_30": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/RoITransformer.py": {
        "torch": {
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_222": {
                "ndarray": {
                    "value": "gt_obbs_best_roi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choose_best_Rroi_batch(gt_obbs[i])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/detectors/base.py": {
        "torch": {}
    },
    "mmdet/models/detectors/base_new.py": {
        "torch": {}
    },
    "mmdet/models/detectors/cascade_rcnn.py": {
        "torch": {
            "ModuleList_47": {
                "variable": {
                    "value": "self.bbox_roi_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.bbox_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.mask_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.mask_roi_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_210": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_215": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/faster_rcnn_hbb_obb.py": {
        "torch": {}
    },
    "mmdet/models/detectors/htc.py": {
        "torch": {
            "cat_109": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_61": {
                "variable": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "bbox_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_91": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_122": {
                "variable": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(bbox_semantic_feat, bbox_feats.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "bbox_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_138": {
                "variable": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_semantic_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.semantic_roi_extractor([semantic_feat], pos_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(mask_semantic_feat, mask_feats.shape[-2:])",
                            "Call"
                        ],
                        [
                            "self.semantic_roi_extractor([semantic_feat], mask_rois)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "mask_feats.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/single_stage.py": {
        "torch": {}
    },
    "mmdet/models/detectors/single_stage_rbbox.py": {
        "torch": {}
    },
    "mmdet/models/detectors/test_mixins.py": {
        "torch": {}
    },
    "mmdet/models/detectors/two_stage.py": {
        "torch": {
            "randn_98": {
                "variable": {
                    "value": "proposals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_198": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_203": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/detectors/two_stage_rbbox.py": {
        "torch": {
            "cat_192": {
                "variable": {
                    "value": "pos_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_177": {
                "*size": {
                    "value": "res.pos_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "*size": {
                    "value": "res.neg_bboxes.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/balanced_l1_loss.py": {
        "torch": {}
    },
    "mmdet/models/losses/cross_entropy_loss.py": {
        "torch": {}
    },
    "mmdet/models/losses/focal_loss.py": {
        "torch": {}
    },
    "mmdet/models/losses/ghm_loss.py": {
        "torch": {
            "nonzero_10": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_10": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_70": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_73": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.sigmoid().detach() - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_150": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff / torch.sqrt(mu * mu + diff * diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(pred.sigmoid().detach() - target)",
                            "Call"
                        ],
                        [
                            "torch.abs(diff / torch.sqrt(mu * mu + diff * diff)).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "self.acc_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "self.acc_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_41": {
                "start": {
                    "value": "bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_92": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(pred)",
                            "Call"
                        ],
                        [
                            "weights / n",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(g)",
                            "Call"
                        ],
                        [
                            "weights / n",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_120": {
                "start": {
                    "value": "bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_147": {
                "input": {
                    "value": "diff * diff + mu * mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_150": {
                "input": {
                    "value": "mu * mu + diff * diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/losses/iou_loss.py": {
        "torch": {}
    },
    "mmdet/models/losses/smooth_l1_loss.py": {
        "torch": {}
    },
    "mmdet/models/mask_heads/fcn_mask_head.py": {
        "torch": {
            "ModuleList_48": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "logits_in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out_channels if self.upsample_method == 'deconv' else upsample_in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if self.class_agnostic else self.num_classes",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_66": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "upsample_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out_channels if self.num_convs > 0 else in_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.conv_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Upsample_72": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.upsample_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.upsample_method",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "det_labels.cpu().numpy() + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/mask_heads/fused_semantic_head.py": {
        "torch": {
            "ModuleList_47": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_58": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_77": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_87": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(feat, size=fused_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "fused_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(x.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/bfp.py": {
        "torch": {
            "adaptive_max_pool2d_79": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_size": {
                    "value": "gather_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[self.refine_level].size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_82": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "gather_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[self.refine_level].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bsf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(feats) / len(feats)",
                            "BinOp"
                        ],
                        [
                            "self.refine(bsf)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_99": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "bsf",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[i].size()[2:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/necks/fpn.py": {
        "torch": {
            "ModuleList_46": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_47": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_123": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_133": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/necks/hrfpn.py": {
        "torch": {
            "ModuleList_54": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inputs[0]]",
                            "List"
                        ],
                        [
                            "[out]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_80": {
                "input": {
                    "value": "inputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/plugins/non_local.py": {
        "torch": {
            "matmul_76": {
                "variable": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ],
                        [
                            "pairwise_weight / pairwise_weight.shape[-1]",
                            "BinOp"
                        ],
                        [
                            "pairwise_weight.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(theta_x, phi_x)",
                            "Call"
                        ],
                        [
                            "pairwise_func(theta_x, phi_x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x).view(n, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/rbbox_heads/convfc_rbbox_head.py": {
        "torch": {
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "branch_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_109": {
                "variable": {
                    "value": "branch_fcs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.cls_last_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.reg_last_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5 if self.reg_class_agnostic else 5 * self.num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "fc_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_layer_dim if i == 0 else self.fc_out_channels",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/rbbox_heads/rbbox_head.py": {
        "torch": {
            "AvgPool2d_54": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "roi_feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * (self.roi_feat_size[0] * self.roi_feat_size[1])",
                            "BinOp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.fc_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels",
                            "Attribute"
                        ],
                        [
                            "in_channels * (self.roi_feat_size[0] * self.roi_feat_size[1])",
                            "BinOp"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5 if reg_class_agnostic else 5 * num_classes",
                            "IfExp"
                        ]
                    ]
                }
            },
            "nonzero_298": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 0] == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_298": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label, label + 1, label + 2, label + 3, label + 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_337": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_reg(x) if self.with_reg else None",
                            "IfExp"
                        ],
                        [
                            "torch.gather(bbox_pred, 1, inds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(rois[:, 0] == i).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.stack((label, label + 1, label + 2, label + 3, label + 4), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_357": {
                "variable": {
                    "value": "new_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rois[:, [0]], bboxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_187": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_cls(x) if self.with_cls else None",
                            "IfExp"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_cls(x) if self.with_cls else None",
                            "IfExp"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ],
                        [
                            "sum(cls_score) / float(len(cls_score))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/registry.py": {
        "torch": {}
    },
    "mmdet/models/roi_extractors/single_level.py": {
        "torch": {
            "ModuleList_48": {
                "variable": {
                    "value": "roi_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer_cls(spatial_scale=1 / s, **cfg) for s in featmap_strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sqrt_67": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(rois[:, 3] - rois[:, 1] + 1) * (rois[:, 4] - rois[:, 2] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_69": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale / self.finest_scale + 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_69": {
                "input": {
                    "value": "scale / self.finest_scale + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/rroi_extractors/rbox_single_level.py": {
        "torch": {
            "ModuleList_51": {
                "variable": {
                    "value": "roi_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer_cls(spatial_scale=1 / s, **cfg) for s in featmap_strides]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sqrt_70": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[:, 3] * rois[:, 4]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_71": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(scale / self.finest_scale + 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_71": {
                "input": {
                    "value": "scale / self.finest_scale + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/shared_heads/res_layer.py": {
        "torch": {}
    },
    "mmdet/models/utils/conv_module.py": {
        "torch": {
            "ReLU_134": {
                "variable": {
                    "value": "self.activate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/utils/conv_ws.py": {
        "torch": {
            "conv2d_18": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(weight - mean) / (std + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/models/utils/norm.py": {
        "torch": {}
    },
    "mmdet/models/utils/scale.py": {
        "torch": {
            "Parameter_9": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(scale, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_9": {
                "data": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/models/utils/weight_init.py": {
        "torch": {}
    },
    "mmdet/ops/dcn/functions/deform_conv.py": {
        "torch": {
            "zeros_like_150": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_151": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_152": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_153": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_154": {
                "variable": {
                    "value": "grad_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/dcn/functions/deform_pool.py": {
        "torch": {
            "zeros_like_56": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_58": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/dcn/modules/deform_conv.py": {
        "torch": {
            "Parameter_41": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 2 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_152": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_154": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/dcn/modules/deform_pool.py": {
        "torch": {
            "Sequential_68": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*offset_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.mask_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size * self.out_size * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "Name"
                        ],
                        [
                            "oc",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size * self.out_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/dcn/setup.py": {
        "torch": {}
    },
    "mmdet/ops/gcb/context_block.py": {
        "torch": {
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_33": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_35": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.channel_add_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, self.planes, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.channel_mul_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, self.planes, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "input_x.view(batch, channel, height * width)",
                            "Call"
                        ],
                        [
                            "input_x.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "context_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_mask(x)",
                            "Call"
                        ],
                        [
                            "context_mask.view(batch, 1, height * width)",
                            "Call"
                        ],
                        [
                            "self.softmax(context_mask)",
                            "Call"
                        ],
                        [
                            "context_mask.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_97": {
                "variable": {
                    "value": "channel_mul_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.channel_mul_conv(context)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_39": {
                "normalized_shape": {
                    "value": "[self.planes, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LayerNorm_47": {
                "normalized_shape": {
                    "value": "[self.planes, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "self.planes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/masked_conv/functions/masked_conv.py": {
        "torch": {
            "nonzero_32": {
                "variable": {
                    "value": "mask_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[0] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "addmm_42": {
                "variable": {
                    "value": "masked_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "mat1": {
                    "value": "bias[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "beta": {
                    "value": "weight.view(out_channel, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "data_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.new_zeros(in_channel * kernel_h * kernel_w, mask_inds.size(0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mmdet/ops/masked_conv/modules/masked_conv.py": {
        "torch": {}
    },
    "mmdet/ops/masked_conv/setup.py": {
        "torch": {}
    },
    "mmdet/ops/nms/nms_wrapper.py": {
        "torch": {
            "range_8": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(dets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "dets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/nms/rnms_wrapper.py": {
        "torch": {
            "range_8": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(dets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_89": {
                "ndarray": {
                    "value": "np.array(keep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_233": {
                "ndarray": {
                    "value": "np.array(keep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "ndarray": {
                    "value": "np.array(final_keep)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/nms/setup.py": {
        "torch": {}
    },
    "mmdet/ops/poly_nms/poly_nms_wrapper.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "dets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/poly_nms/setup.py": {
        "torch": {}
    },
    "mmdet/ops/psroi_align_rotated/functions/psroi_align_rotated.py": {
        "torch": {}
    },
    "mmdet/ops/psroi_align_rotated/gradcheck.py": {
        "torch": {
            "from_numpy_27": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(num_classes * num_group * num_group * feat_height * feat_width).reshape(1, num_classes * num_group * num_group, feat_height, feat_width).astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x1).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 2, 1, 2, 2, np.pi / 2.0], [0, 2, 2, 4, 2, np.pi / 2.0]], dtype='float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x2).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_66": {
                "variable": {
                    "value": "im_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes * num_group * num_group",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "np.int(image_height * spatial_scale)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "feat_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ],
                        [
                            "np.int(image_width * spatial_scale)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "rois_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([num_rois, 6])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rois_data).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "gradcheck_71": {
                "func": {
                    "value": "psroi_align_rotated_pooling",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PSRoIAlignRotated(out_size=num_group, spatial_scale=1.0, sample_num=1, output_dim=num_classes, group_size=num_group)",
                            "Call"
                        ],
                        [
                            "PSRoIAlignRotated(out_size=num_group, spatial_scale=spatial_scale, sample_num=0, output_dim=num_classes, group_size=num_group)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(im_data, rois_data)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/psroi_align_rotated/modules/psroi_align_rotated.py": {
        "torch": {}
    },
    "mmdet/ops/psroi_align_rotated/setup.py": {
        "torch": {}
    },
    "mmdet/ops/roi_align/functions/roi_align.py": {
        "torch": {}
    },
    "mmdet/ops/roi_align/gradcheck.py": {
        "torch": {
            "randn_21": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(num_rois, 4) * img_size * 0.5",
                            "BinOp"
                        ],
                        [
                            "np.hstack((batch_ind, rois))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rois).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "gradcheck_26": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlign(3, spatial_scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_28": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlign(3, spatial_scale, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/roi_align/modules/roi_align.py": {
        "torch": {}
    },
    "mmdet/ops/roi_align/setup.py": {
        "torch": {}
    },
    "mmdet/ops/roi_align_rotated/functions/roi_align_rotated.py": {
        "torch": {}
    },
    "mmdet/ops/roi_align_rotated/gradcheck.py": {
        "torch": {
            "from_numpy_71": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(16).reshape(1, 1, 4, 4).astype('float64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 1.0, 1.0, 2.0, 2.0, -np.pi / 2.0], [0, 1.0, 1.0, 2.0, 2.0, 0], [0, 1.0, 1.0, 2.0, 2.0, np.pi / 2.0], [0, 1.0, 1.0, 2.0, 2.0, np.pi]], dtype='float64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rois).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_104": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0, 6.2, 6.0, 4.0, 4.0, np.pi / 2.0], [0, 6.3, 6.0, 4.0, 4.0, -np.pi / 2.0], [0, 6.0, 6.0, 4.0, 4.0, -np.pi], [0, 6.0, 6.0, 4.3, 4.0, np.pi], [1, 6.0, 6.0, 4.0, 4.0, np.pi / 3.0], [2, 4.1, 4.2, 6.2, 6.0, -np.pi], [1, 6.0, 6.3, 4.0, 4.1, 3 * np.pi / 4.0], [0, 6.2, 6.3, 4.2, 4.4, np.pi / 4.0]], dtype='float64')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x2).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "gradcheck_109": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlignRotated(4, spatial_scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x1, x2)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_111": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlignRotated(4, spatial_scale, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x1, x2)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/roi_align_rotated/modules/roi_align_rotated.py": {
        "torch": {}
    },
    "mmdet/ops/roi_align_rotated/setup.py": {
        "torch": {}
    },
    "mmdet/ops/roi_pool/functions/roi_pool.py": {
        "torch": {}
    },
    "mmdet/ops/roi_pool/gradcheck.py": {
        "torch": {
            "randn_9": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_10": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradcheck_14": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIPool(4, 1.0 / 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mmdet/ops/roi_pool/modules/roi_pool.py": {
        "torch": {}
    },
    "mmdet/ops/roi_pool/setup.py": {
        "torch": {}
    },
    "mmdet/ops/sigmoid_focal_loss/functions/sigmoid_focal_loss.py": {
        "torch": {}
    },
    "mmdet/ops/sigmoid_focal_loss/modules/sigmoid_focal_loss.py": {
        "torch": {}
    },
    "mmdet/ops/sigmoid_focal_loss/setup.py": {
        "torch": {}
    },
    "mmdet/utils/flops_counter.py": {
        "torch": {
            "ones_64": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tools/detectron2pytorch.py": {
        "torch": {
            "from_numpy_12": {
                "variable": {
                    "value": "state_dict[torch_name + .bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "variable": {
                    "value": "state_dict[torch_name + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_s']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "state_dict[torch_name + .running_mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[torch_name + '.weight'].size()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_18": {
                "variable": {
                    "value": "state_dict[torch_name + .running_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "bn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[torch_name + '.weight'].size()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "state_dict[torch_name + .weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_w']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_29": {
                "variable": {
                    "value": "state_dict[torch_name + .bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "blobs[caffe_name + '_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_75": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "dst",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/parse_results.py": {
        "torch": {}
    },
    "tools/publish_model.py": {
        "torch": {
            "load_16": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_22": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file, map_location='cpu')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "full_76": {
                "variable": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "tmpdir",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_85": {
                "tensor": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/test_robustness.py": {
        "torch": {
            "full_170": {
                "variable": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "tmpdir",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_179": {
                "tensor": {
                    "value": "dir_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {}
    },
    "tools/upgrade_model_version.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "in_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_30": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(in_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}