{
    "model/metric.py": {
        "sklearn": {
            "average_precision_score_511": {
                "y_true": {
                    "value": "gt_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(query_masks[ii, :])[0]",
                            "Subscript"
                        ],
                        [
                            "np.squeeze(target_np[ii, :])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.squeeze(scores_np[ii, :])",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_446": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.scores.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_387": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "output.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "output[np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_389": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(target.cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "np.asarray([target])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_412": {
                "input": {
                    "value": "target ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(target.cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "np.asarray([target])",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_448": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.scores.size(0) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_450": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_460": {
                "variable": {
                    "value": "(_, sortind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scores[:, k]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_513": {
                "ndarray": {
                    "value": "np.asarray(ap)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_528": {
                "obj": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "output.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "output[np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_530": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(target.cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "np.asarray([target])",
                            "Call"
                        ]
                    ]
                }
            },
            "FloatStorage_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LongStorage_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FloatStorage_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_386": {
                "obj": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "output.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "output[np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_tensor_388": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "np.atleast_1d(target.cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "np.asarray([target])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_393": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_392": {
                "obj": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_411": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_547": {
                "ndarray": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "output.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "output[np.newaxis]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "topk_547": {
                "input": {
                    "value": "maxk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(topk[-1])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "base/base_data_loader.py": {
        "torch": {}
    },
    "base/base_model.py": {
        "torch": {}
    },
    "base/base_trainer.py": {
        "torch": {
            "device_129": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if n_gpu_use > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_166": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(resume_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_19": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'arch': arch, 'epoch': epoch, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'monitor_best': self.mnt_best, 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(self.checkpoint_dir / 'checkpoint-epoch{}.pth'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_155": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'arch': arch, 'epoch': epoch, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'monitor_best': self.mnt_best, 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "best_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(self.checkpoint_dir / 'model_best.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data_loader/MovieClips_dataset.py": {
        "torch": {
            "from_numpy_150": {
                "variable": {
                    "value": "ftr",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ftr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(self.expert_data[expert][some_entry])",
                            "Call"
                        ],
                        [
                            "self.expert_data[expert][videoid]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(ftr)",
                            "Call"
                        ],
                        [
                            "ftr.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_161": {
                "variable": {
                    "value": "packet[missing]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.max_tokens[expert], dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_156": {
                "variable": {
                    "value": "packet[n_tokens]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model/loss.py": {
        "torch": {
            "randn_144": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_145": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_34": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "diag_40": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.randn(3, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_44": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "max_margin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - (x1 - x2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_126": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_136": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_57": {
                "variable": {
                    "value": "keep_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "th.cat((keep1, keep2), 0).flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_60": {
                "variable": {
                    "value": "x1_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.diag(x)",
                            "Call"
                        ],
                        [
                            "x1.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x1.expand(n, n)",
                            "Call"
                        ],
                        [
                            "x1.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "th.cat((x1, x1), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "keep_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nonzero(th.cat((keep1, keep2), 0).flatten()).flatten()",
                            "Call"
                        ],
                        [
                            "keep_idx.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_61": {
                "variable": {
                    "value": "x2_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "th.cat((x2, x3), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "keep_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.nonzero(th.cat((keep1, keep2), 0).flatten()).flatten()",
                            "Call"
                        ],
                        [
                            "keep_idx.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_62": {
                "variable": {
                    "value": "max_margin",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - (x1_ - x2_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_108": {
                "n": {
                    "value": "scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_54": {
                "n": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "(keep1, keep2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/model.py": {
        "torch": {
            "norm_331": {
                "variable": {
                    "value": "content_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "content",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_331": {
                "variable": {
                    "value": "content_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_332": {
                "variable": {
                    "value": "text_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ftr",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_332": {
                "variable": {
                    "value": "text_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_336": {
                "variable": {
                    "value": "dot_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ad,bd->ab",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "content",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_368": {
                "variable": {
                    "value": "sim_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a / torch.max(a_n, eps * torch.ones_like(a_n))",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "b_norm.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_376": {
                "variable": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 3, 4, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleDict_23": {
                "variable": {
                    "value": "self.aggregation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{expert: get_aggregation(info, self.expert_dims[expert]) for (expert, info) in self.aggregation_method.items() if expert in self.experts_used + ['label']}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleDict_33": {
                "variable": {
                    "value": "self.video_GU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{expert: Gated_Embedding_Unit(self.expert_dims[expert], self.projection_dim, channels=self.n_clips) for expert in self.experts_used}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.clip_GU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Identity() for clip in range(self.n_clips)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleDict_42": {
                "variable": {
                    "value": "self.text_GU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{expert: Gated_Embedding_Unit(self.aggregation['label'].out_dim, self.projection_dim, channels=0) for expert in experts_used}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.text_clip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Identity() for clip in range(self.n_clips)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.moe_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.expert_dims['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(self.experts_used) * self.n_clips",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.moe_fc(text)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "missing",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "missing",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(missing, dim=1).bool()",
                            "Call"
                        ],
                        [
                            "missing.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "missing.repeat(batch_sz, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "video_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "video_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(video_embed, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "text_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "text_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(text_embed, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "video_embed_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "video_embed_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(video_embed_mod, dim=2)",
                            "Call"
                        ],
                        [
                            "F.normalize(video_embed_mod, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "text_embed_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "text_embed_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(text_embed_mod, dim=2)",
                            "Call"
                        ],
                        [
                            "F.normalize(text_embed_mod, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_113": {
                "variable": {
                    "value": "video_embed_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "video_embed_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(video_embed_mod, dim=2)",
                            "Call"
                        ],
                        [
                            "F.normalize(video_embed_mod, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_114": {
                "variable": {
                    "value": "text_embed_mod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_embed_mod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(text_embed_mod, dim=2)",
                            "Call"
                        ],
                        [
                            "F.normalize(text_embed_mod, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_125": {
                "variable": {
                    "value": "norm_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "moe_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_moe_scores(text)",
                            "Call"
                        ],
                        [
                            "moe_weights.view(-1, len(self.experts_used), self.n_clips)",
                            "Call"
                        ],
                        [
                            "moe_weights.unsqueeze(1).repeat(1, batch_sz, 1, 1)",
                            "Call"
                        ],
                        [
                            "moe_weights.masked_fill(missing, 0)",
                            "Call"
                        ],
                        [
                            "torch.div(moe_weights, norm_weights)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_125": {
                "variable": {
                    "value": "norm_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_126": {
                "variable": {
                    "value": "moe_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "moe_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_moe_scores(text)",
                            "Call"
                        ],
                        [
                            "moe_weights.view(-1, len(self.experts_used), self.n_clips)",
                            "Call"
                        ],
                        [
                            "moe_weights.unsqueeze(1).repeat(1, batch_sz, 1, 1)",
                            "Call"
                        ],
                        [
                            "moe_weights.masked_fill(missing, 0)",
                            "Call"
                        ],
                        [
                            "torch.div(moe_weights, norm_weights)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "norm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(moe_weights, dim=(2, 3)).unsqueeze(2).unsqueeze(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_128": {
                "variable": {
                    "value": "embed_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "tecd,vecd->tvec",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[text_embed_mod, video_embed_mod]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.g_reason_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dimension * num_inputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_179": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, t), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, t), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_204": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "bn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ],
                        [
                            "dimension",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimension",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_221": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_clips",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_222": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_clips",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_249": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dimension",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dimension",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_257": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, t), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleDict_264": {
                "variable": {
                    "value": "self.weight_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{key: nn.Conv2d(1, 1, 1, stride=1, bias=False) for key in experts_used}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "Parameter_276": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(len) * init_val",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_348": {
                "variable": {
                    "value": "embed_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ted,ved->tve",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "isnan_370": {
                "input": {
                    "value": "sim_mt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(a_norm, b_norm.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "*args": {
                    "value": "*g_reason_shared",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "glu_214": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, t), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "glu_244": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.cg(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.cg(x, mask)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, t), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_358": {
                "variable": {
                    "value": "embed_stack",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "tecd,vecd->tvec",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_366": {
                "input": {
                    "value": "a_n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_367": {
                "input": {
                    "value": "b_n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Identity_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_265": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_276": {
                "*size": {
                    "value": "len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_337": {
                "input": {
                    "value": "text_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(text, dim=1).pow(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_366": {
                "input": {
                    "value": "a_n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_367": {
                "input": {
                    "value": "b_n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_153": {
                "num_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/net_vlad.py": {
        "torch": {
            "Parameter_38": {
                "variable": {
                    "value": "self.clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_sc * th.randn(feature_size, clusters)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.clusters2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_sc * th.randn(1, feature_size, cluster_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "variable": {
                    "value": "assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.feature_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, max_sample, self.feature_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "variable": {
                    "value": "assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.matmul(x, self.clusters)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(assignment)",
                            "Call"
                        ],
                        [
                            "F.softmax(assignment, dim=1)",
                            "Call"
                        ],
                        [
                            "assignment[:, :self.cluster_size]",
                            "Subscript"
                        ],
                        [
                            "assignment.view(-1, max_sample, self.cluster_size)",
                            "Call"
                        ],
                        [
                            "assignment.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "a_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.matmul(x, self.clusters)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(assignment)",
                            "Call"
                        ],
                        [
                            "F.softmax(assignment, dim=1)",
                            "Call"
                        ],
                        [
                            "assignment[:, :self.cluster_size]",
                            "Subscript"
                        ],
                        [
                            "assignment.view(-1, max_sample, self.cluster_size)",
                            "Call"
                        ],
                        [
                            "assignment.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "vlad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.matmul(x, self.clusters)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(assignment)",
                            "Call"
                        ],
                        [
                            "F.softmax(assignment, dim=1)",
                            "Call"
                        ],
                        [
                            "assignment[:, :self.cluster_size]",
                            "Subscript"
                        ],
                        [
                            "assignment.view(-1, max_sample, self.cluster_size)",
                            "Call"
                        ],
                        [
                            "assignment.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.feature_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, max_sample, self.feature_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_83": {
                "variable": {
                    "value": "vlad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.matmul(assignment, x)",
                            "Call"
                        ],
                        [
                            "vlad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "vlad - a",
                            "BinOp"
                        ],
                        [
                            "F.normalize(vlad)",
                            "Call"
                        ],
                        [
                            "vlad.reshape(-1, self.cluster_size * self.feature_size)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_87": {
                "variable": {
                    "value": "vlad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vlad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.matmul(assignment, x)",
                            "Call"
                        ],
                        [
                            "vlad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "vlad - a",
                            "BinOp"
                        ],
                        [
                            "F.normalize(vlad)",
                            "Call"
                        ],
                        [
                            "vlad.reshape(-1, self.cluster_size * self.feature_size)",
                            "Call"
                        ],
                        [
                            "F.normalize(vlad)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_92": {
                "input": {
                    "value": "th.sum(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_95": {
                "input": {
                    "value": "self.clusters[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_39": {
                "num_features": {
                    "value": "clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cluster_size + ghost_clusters",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_92": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.feature_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, max_sample, self.feature_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_38": {
                "*size": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cluster_size + ghost_clusters",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_41": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cluster_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "total_metrics",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(metrics)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "label_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(label_embeddings, dim=0).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "content_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "content_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(content_embeddings, dim=0).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "moe_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "moe_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(moe_weights, dim=0).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_matrix(label_embeddings, content_embeddings, weights=moe_weights).numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sims)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_166": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sim_matrix(label_embeddings, content_embeddings, weights=moe_weights).numpy()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sims)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_49": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_52": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.initialize('arch', module_arch)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {}
    },
    "trainer/trainer.py": {
        "torch": {
            "cat_143": {
                "variable": {
                    "value": "label_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(label_embeddings, dim=0).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "content_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "content_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(content_embeddings, dim=0).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "moe_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "moe_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(moe_weights, dim=0).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "detect_anomaly_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/visualisation.py": {
        "torch": {
            "Tensor_18": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_20": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_24": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isnan(window)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "inf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "130 * torch.ones_like(grid)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(window).unsqueeze(0).repeat(3, 1, 1) * 255",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(window), inf, grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_54": {
                "tensors": {
                    "value": "grids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_like_22": {
                "input": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((5, 6))",
                            "Call"
                        ],
                        [
                            "window.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_22": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_23": {
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(window).unsqueeze(0).repeat(3, 1, 1) * 255",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.isnan(window), inf, grid)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_24": {
                "input": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((5, 6))",
                            "Call"
                        ],
                        [
                            "window.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_51": {
                "variable": {
                    "value": "tmp_window",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((5, 6))",
                            "Call"
                        ],
                        [
                            "window.cpu()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}