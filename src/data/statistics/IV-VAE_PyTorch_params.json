{
    "lib/datasets.py": {
        "torch": {
            "from_numpy_19": {
                "variable": {
                    "value": "self.imgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_20": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_46": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "data/ + dataset + _im32_ + data_flag + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/dist.py": {
        "torch": {
            "max_35": {
                "variable": {
                    "value": "(_, max_alpha)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "one_hot_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "alpha.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "variable": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[temperature]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_115": {
                "variable": {
                    "value": "inv_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-logsigma",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_200": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logscale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mu_logscale.select(-1, 1).expand(size)",
                            "Call"
                        ],
                        [
                            "self.logscale.expand(size)",
                            "Call"
                        ],
                        [
                            "mu_logscale.select(-1, 1)",
                            "Call"
                        ],
                        [
                            "logscale.type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_215": {
                "variable": {
                    "value": "inv_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-logscale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsigmoid_275": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "presigm_ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._check_inputs(size, params)",
                            "Call"
                        ],
                        [
                            "self._check_inputs(sample.size(), params).type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsigmoid_276": {
                "variable": {
                    "value": "logq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-presigm_ps",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_21": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_46": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_146": {
                "tensors": {
                    "value": "[self.mu, self.logsigma]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "[self.mu, self.logscale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_27": {
                "*size": {
                    "value": "params.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_like_43": {
                "input": {
                    "value": "temperature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor([temperature]).type_as(sample)",
                            "Call"
                        ],
                        [
                            "0.67",
                            "MethodArgument"
                        ],
                        [
                            "0.67",
                            "MethodArgument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float(self.K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "lgamma_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_102": {
                "*size": {
                    "value": "mu.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_175": {},
            "log_248": {
                "input": {
                    "value": "p / (1 - p) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_269": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_270": {
                "input": {
                    "value": "1 - u + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_103": {
                "input": {
                    "value": "logsigma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mu_logsigma.select(-1, 1).expand(size)",
                            "Call"
                        ],
                        [
                            "self.logsigma.expand(size)",
                            "Call"
                        ],
                        [
                            "mu_logsigma[:, outCh:, :, :]",
                            "Subscript"
                        ],
                        [
                            "mu_logsigma.select(-1, 1)",
                            "Call"
                        ],
                        [
                            "logsigma.type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_202": {
                "*size": {
                    "value": "mu.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_203": {
                "input": {
                    "value": "1 - 2 * torch.abs(u) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_216": {
                "input": {
                    "value": "sample - mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_284": {
                "input": {
                    "value": "presigm_ps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._check_inputs(size, params)",
                            "Call"
                        ],
                        [
                            "self._check_inputs(sample.size(), params).type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_285": {
                "input": {
                    "value": "1 - p + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_132": {
                "input": {
                    "value": "sample_logsigma.mul(2) - logsigma.mul(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_203": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.rand(mu.size()).type_as(mu.data)) - 0.5",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.rand(size))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_305": {
                "input": {
                    "value": "self.p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_203": {
                "input": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.rand(mu.size()).type_as(mu.data)) - 0.5",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.rand(size))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/functions.py": {
        "torch": {
            "zeros_8": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils.py": {
        "torch": {
            "save_11": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save, 'checkpt-%04d.pth' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_62": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_69": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(value - m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "torch.sum(torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_70": {
                "input": {
                    "value": "value - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "torch.exp(value0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_74": {
                "input": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.exp(value - m))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_66": {
                "input": {
                    "value": "value0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {}
    },
    "sub_eval.py": {
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "marginal_entropies_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K_z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vae.z_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "joint_entropy_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "marginal_entropies_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "joint_entropy_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "joint_entropy_zy",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_97": {
                "variable": {
                    "value": "qz_params",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_100": {
                "variable": {
                    "value": "qy_params",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "dimwise_kl_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_73": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_80": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_81": {
                "variable": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(value - m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_77": {
                "input": {
                    "value": "torch.sum(torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_81": {
                "input": {
                    "value": "value - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_136": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_params.argmax(dim=1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.nonzero(t == idx_class).squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "torch.exp(value0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_85": {
                "input": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.exp(value - m))",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_15": {
                "n": {
                    "value": "qz_samples.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_77": {
                "input": {
                    "value": "value0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nonzero_136": {
                "input": {
                    "value": "t == idx_class",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sub_function.py": {
        "torch": {
            "zeros_471": {
                "variable": {
                    "value": "x_plot_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sidx_arr_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y_gen.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y_gen.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "y_gen.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_472": {
                "variable": {
                    "value": "x_plot_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sidx_arr_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "y_gen.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y_gen.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "y_gen.shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "indices_ssl_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices_ssl_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack([list(filter(lambda idx: temp_labels[idx] == i, indices_ssl_sup))[:args.labels_per_class] for i in range(args.n_class)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices_ssl_sup)",
                            "Call"
                        ],
                        [
                            "indices_ssl['indices_ssl_sup']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(indices_ssl_sup)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_99": {
                "variable": {
                    "value": "indices_ssl",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.indices_path + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "indices_ssl_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices_ssl_sup",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.hstack([list(filter(lambda idx: temp_labels[idx] == i, indices_ssl_sup))[:args.labels_per_class] for i in range(args.n_class)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices_ssl_sup)",
                            "Call"
                        ],
                        [
                            "indices_ssl['indices_ssl_sup']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(indices_ssl_sup)",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_229": {
                "variable": {
                    "value": "self.crit_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_374": {
                "variable": {
                    "value": "logqy_prodmarginals",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_417": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_424": {
                "variable": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_425": {
                "variable": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(value - m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_526": {
                "variable": {
                    "value": "y_modi",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y_params_test.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_528": {
                "variable": {
                    "value": "temp_onehot_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y_modi.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_528": {
                "variable": {
                    "value": "temp_onehot_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(y_params_test.size(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "args.dataSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_94": {
                "obj": {
                    "value": "indices_ssl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'indices_ssl_sup': indices_ssl_sup, 'labels_per_class': args.labels_per_class, 'n_class': args.n_class, 'rngNum': args.dataSeed}",
                            "Dict"
                        ],
                        [
                            "torch.load(args.indices_path + '.pth')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.indices_path + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': [], 'iteration': []}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "eval_valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "{'state_dict': vae.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_121": {
                "obj": {
                    "value": "{'count_epoch': count_epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "loss_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "temp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ys.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_520": {
                "tensors": {
                    "value": "(y_gen, y_recon_test, y_recon_test_hard, y_recon_train, y_recon_train_hard)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_534": {
                "variable": {
                    "value": "o_collec_modi",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o_collec_modi, y_recon_test[:, :args.imCh, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "loss_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': [], 'iteration': []}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "eval_valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "{'state_dict': vae.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "*size": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "*size": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_421": {
                "input": {
                    "value": "torch.sum(torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_425": {
                "input": {
                    "value": "value - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_543": {
                "tensors": {
                    "value": "(x_plot_test, x_plot_test, x_plot_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_421": {
                "input": {
                    "value": "torch.exp(value0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_429": {
                "input": {
                    "value": "sum_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.exp(value - m))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_421": {
                "input": {
                    "value": "value0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "sub_network.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "imCh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ngf * 2 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc2_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc2_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_21": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + y_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ngf * 2 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_48": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_50": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_51": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "imCh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_z, h_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "imCh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ngf * 2 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.fc2_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "z_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc2_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "y_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_90": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + y_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_114": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ngf * 2 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_116": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_117": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_118": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "imCh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "useBias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_120": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_z, h_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}