{
    "sample_info/modules/visualizations.py": {
        "sklearn": {
            "KernelDensity_64": {
                "variable": {
                    "value": "kde",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "gaussian",
                    "type": "str",
                    "possible_values": []
                },
                "bandwidth": {
                    "value": "bandwidth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0002",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_119": {
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_ys",
                            "Name"
                        ]
                    ]
                }
            },
            "stack_27": {
                "tensors": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "informativeness_scores[groups == g]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "flatten_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_121": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "set_ys",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "sample_info/archive/total_gradient.py": {
        "torch": {
            "norm_120": {
                "input": {
                    "value": "v.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sample_info/methods/classifiers.py": {
        "torch": {
            "one_hot_66": {
                "variable": {
                    "value": "y_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[0].to(self.device)",
                            "Call"
                        ],
                        [
                            "labels[0].to(self.device).float()",
                            "Call"
                        ],
                        [
                            "y.reshape((-1, n_outputs))",
                            "Call"
                        ],
                        [
                            "labels[0].to(self.device).float()",
                            "Call"
                        ],
                        [
                            "y.reshape((-1, n_outputs))",
                            "Call"
                        ],
                        [
                            "labels[0].to(self.device).float()",
                            "Call"
                        ],
                        [
                            "y.reshape((-1, n_outputs))",
                            "Call"
                        ],
                        [
                            "labels[0].to(self.device).float()",
                            "Call"
                        ],
                        [
                            "y.reshape((-1, n_outputs))",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_191": {
                "variable": {
                    "value": "jacobians[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_202": {
                "variable": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_grad.reshape((n, -1))",
                            "Call"
                        ],
                        [
                            "init_grad.reshape((n_samples * n_outputs, -1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "(cur_value - init_value).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_288": {
                "variable": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_grad.reshape((n, -1))",
                            "Call"
                        ],
                        [
                            "init_grad.reshape((n_samples * n_outputs, -1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "(cur_value - init_value).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_96": {
                "input": {
                    "value": "(y - pred) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_96": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "(y - pred) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_139": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "1.0 / n * classifier_loss[sample_idx]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tuple(self.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_173": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_184": {
                "variable": {
                    "value": "cur_jacobians",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "init_preds[idx][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "model_at_init.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "idx != n - 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_224": {
                "input": {
                    "value": "(y - pred) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_224": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_305": {
                "input": {
                    "value": "(y - pred) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_305": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "(v - self.init_params[k]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_315": {
                "input": {
                    "value": "(v - self.init_params[k]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sample_info/modules/data_utils.py": {
        "torch": {
            "one_hot_95": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(y, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "F.one_hot(y, num_classes=self.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.tensor(dataset[idx][1]).item()",
                            "Call"
                        ],
                        [
                            "new_y",
                            "Name"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_168": {
                "input": {
                    "value": "x.unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "sample_info/modules/influence_functions.py": {
        "torch": {
            "grad_58": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_26": {
                "variable": {
                    "value": "grad_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_62": {
                "outputs": {
                    "value": "dot_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "dot_product + torch.sum(grad_elem * v_elem.detach())",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_30": {
                "variable": {
                    "value": "grad_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "flat_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "grad_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(flat_y)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_36": {
                "variable": {
                    "value": "jac[y_idx][x_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "jac[y_idx][x_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "jac[y_idx][x_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y.shape + x.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_61": {
                "input": {
                    "value": "grad_elem * v_elem.detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_80": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "sample_info/modules/misc.py": {
        "torch": {
            "stack_95": {
                "variable": {
                    "value": "quantities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "quantities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(quantities).flatten()",
                            "Call"
                        ],
                        [
                            "utils.to_numpy(quantities)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_95": {
                "variable": {
                    "value": "quantities",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "inverse_126": {
                "variable": {
                    "value": "mid_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A22 + torch.mm(torch.mm(A21, F11_inv), A12)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_141": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F11_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk_inv[keep_indices][:, keep_indices]",
                            "Subscript"
                        ],
                        [
                            "ntk_inv[keep_indices][:, keep_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk[keep_indices][:, remove_indices]",
                            "Subscript"
                        ],
                        [
                            "ntk[keep_indices][:, remove_indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "inverse_142": {
                "variable": {
                    "value": "mid_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A22 + torch.mm(C.T, A12)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_127": {
                "input": {
                    "value": "F11_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk_inv[keep_indices][:, keep_indices]",
                            "Subscript"
                        ],
                        [
                            "ntk_inv[keep_indices][:, keep_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "A12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk[keep_indices][:, remove_indices]",
                            "Subscript"
                        ],
                        [
                            "ntk[keep_indices][:, remove_indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_143": {
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(F11_inv, A12)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "mid_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(A22 + torch.mm(torch.mm(A21, F11_inv), A12))",
                            "Call"
                        ],
                        [
                            "torch.inverse(A22 + torch.mm(C.T, A12))",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_126": {
                "input": {
                    "value": "A21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk[remove_indices][:, keep_indices]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "F11_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk_inv[keep_indices][:, keep_indices]",
                            "Subscript"
                        ],
                        [
                            "ntk_inv[keep_indices][:, keep_indices]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_142": {
                "input": {
                    "value": "C.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk[keep_indices][:, remove_indices]",
                            "Subscript"
                        ],
                        [
                            "ntk[keep_indices][:, remove_indices]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sample_info/modules/nn_utils.py": {
        "torch": {
            "Linear_44": {
                "variable": {
                    "value": "replace",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "layers[-1].in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.get('num_classes', 26)",
                            "Call"
                        ],
                        [
                            "args.get('num_classes', 1000)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "net.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.get('num_classes', 26)",
                            "Call"
                        ],
                        [
                            "args.get('num_classes', 1000)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sample_info/modules/ntk.py": {
        "torch": {
            "eye_222": {
                "variable": {
                    "value": "identity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk.shape[0]",
                            "Subscript"
                        ],
                        [
                            "ntk.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ntk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_239": {
                "variable": {
                    "value": "identity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "ntk.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ntk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_297": {
                "variable": {
                    "value": "identity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "ntk.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ntk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eig_375": {
                "variable": {
                    "value": "(lamb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.zeros((n_test, n_train), dtype=torch.float, device=v_train.device)",
                            "Call"
                        ],
                        [
                            "ntk + torch.mm(v_test_flat, v_train_flat.T)",
                            "BinOp"
                        ],
                        [
                            "compute_ntk(jacobians=train_jacobians)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Subset(dataset, range(n_examples))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "exp_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "exp_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scipy.linalg.expm(-eta * t * utils.to_numpy(ntk))",
                            "Call"
                        ],
                        [
                            "torch.tensor(exp_matrix, device=ntk.device, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.matrix_power(identity_matrix - eta * ntk, t)",
                            "Call"
                        ],
                        [
                            "compute_exp_matrix(t=t, eta=eta, ntk=ntk, continuous=continuous)",
                            "Call"
                        ],
                        [
                            "compute_exp_matrix(t=t, eta=eta, ntk=ntk, continuous=continuous)",
                            "Call"
                        ],
                        [
                            "compute_exp_matrix(t=t, eta=eta, ntk=ntk, continuous=continuous)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "ntk.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_201": {
                "variable": {
                    "value": "identity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk.shape[0]",
                            "Subscript"
                        ],
                        [
                            "ntk.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ntk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matrix_power_202": {
                "variable": {
                    "value": "exp_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "identity_matrix - eta * ntk",
                    "type": "BinOp",
                    "possible_values": []
                },
                "n": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "inverse_231": {
                "variable": {
                    "value": "ntk_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.zeros((n_test, n_train), dtype=torch.float, device=v_train.device)",
                            "Call"
                        ],
                        [
                            "ntk + torch.mm(v_test_flat, v_train_flat.T)",
                            "BinOp"
                        ],
                        [
                            "compute_ntk(jacobians=train_jacobians)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_294": {
                "variable": {
                    "value": "ntk_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.zeros((n_test, n_train), dtype=torch.float, device=v_train.device)",
                            "Call"
                        ],
                        [
                            "ntk + torch.mm(v_test_flat, v_train_flat.T)",
                            "BinOp"
                        ],
                        [
                            "compute_ntk(jacobians=train_jacobians)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_311": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "jacobians[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "jacobians[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "ntk",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_test, n_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v_train.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_176": {
                "input": {
                    "value": "v_test_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_test.reshape((n_test, -1))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v_train_flat.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_195": {
                "input": {
                    "value": "ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.zeros((n_test, n_train), dtype=torch.float, device=v_train.device)",
                            "Call"
                        ],
                        [
                            "ntk + torch.mm(v_test_flat, v_train_flat.T)",
                            "BinOp"
                        ],
                        [
                            "compute_ntk(jacobians=train_jacobians)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_223": {
                "input": {
                    "value": "exp_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scipy.linalg.expm(-eta * t * utils.to_numpy(ntk))",
                            "Call"
                        ],
                        [
                            "torch.tensor(exp_matrix, device=ntk.device, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.matrix_power(identity_matrix - eta * ntk, t)",
                            "Call"
                        ],
                        [
                            "compute_exp_matrix(t=t, eta=eta, ntk=ntk, continuous=continuous)",
                            "Call"
                        ],
                        [
                            "compute_exp_matrix(t=t, eta=eta, ntk=ntk, continuous=continuous)",
                            "Call"
                        ],
                        [
                            "compute_exp_matrix(t=t, eta=eta, ntk=ntk, continuous=continuous)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "init_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_preds.reshape((-1, 1))",
                            "Call"
                        ],
                        [
                            "init_preds.reshape((-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_241": {
                "input": {
                    "value": "ntk_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(ntk)",
                            "Call"
                        ],
                        [
                            "torch.inverse(ntk)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.mm(identity_matrix - exp_matrix, train_init_preds - train_Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_253": {
                "input": {
                    "value": "(pred_t - Y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_253": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_298": {
                "input": {
                    "value": "identity_matrix - exp_matrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "init_preds - Y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_332": {
                "variable": {
                    "value": "cur_jacobians",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(preds * coefficients)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_379": {
                "input": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lamb[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_389": {
                "tensors": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[utils.to_tensor(y, device=ntk.device).view((-1,)) for (x, y) in data]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sum_330": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds * coefficients",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Subset_103": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "range(n_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_116": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_124": {
                "variable": {
                    "value": "cur_jacobians",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "preds[output_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "retain_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_idx != n_outputs - 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "mm_242": {
                "input": {
                    "value": "identity_matrix - exp_matrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "train_init_preds - train_Y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_308": {
                "input": {
                    "value": "v.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "rhs_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.mm(ntk_inv, torch.mm(identity_matrix - exp_matrix, init_preds - Y))",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "set_grad_enabled_325": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_377": {
                "input": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lamb[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_378": {
                "input": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lamb[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "set_grad_enabled_123": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "v_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v[self._random_subset_proj_indices[k]] * np.sqrt(v.shape[0] / n_select)",
                            "BinOp"
                        ],
                        [
                            "self._very_sparse_proj_matrix[k].T.dot(utils.to_numpy(v))",
                            "Call"
                        ],
                        [
                            "torch.tensor(v_proj, dtype=v.dtype, device=v.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sample_info/modules/sgd.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Subset(dataset, range(n_examples))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Subset(dataset, range(n_examples))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "avg_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_params,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "'cpu' if cpu else model.device",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_params, n_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "'cpu' if cpu else model.device",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "grad_58": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "batch_total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([loss for (name, loss) in batch_losses.items()])",
                            "Call"
                        ],
                        [
                            "sum([loss for (name, loss) in batch_losses.items()])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_115": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "batch_total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum([loss for (name, loss) in batch_losses.items()])",
                            "Call"
                        ],
                        [
                            "sum([loss for (name, loss) in batch_losses.items()])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "grad_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grad_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v.flatten() for v in grad]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(grad_flat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_125": {
                "input": {
                    "value": "avg_grad.reshape((-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "avg_grad.reshape((1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Subset_39": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "range(n_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_52": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Subset_95": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "range(n_examples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_109": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_123": {
                "input": {
                    "value": "grad_flat.reshape((-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "grad_flat.reshape((1, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sample_info/modules/stability.py": {
        "torch": {
            "stack_44": {
                "variable": {
                    "value": "losses_without_excluding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses_without_excluding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[compute_training_loss_at_time_t(t=t, eta=eta, ntk=ntk, init_preds=init_preds, Y=Y, continuous=continuous) for t in ts]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(losses_without_excluding)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_120": {
                "variable": {
                    "value": "ntk_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk + l2_reg_coef * torch.eye(ntk.shape[0], dtype=torch.float, device=ntk.device)",
                            "BinOp"
                        ],
                        [
                            "ntk + l2_reg_coef * torch.eye(ntk.shape[0], dtype=torch.float, device=ntk.device)",
                            "BinOp"
                        ],
                        [
                            "ntk + l2_reg_coef * torch.eye(ntk.shape[0], dtype=torch.float, device=ntk.device)",
                            "BinOp"
                        ],
                        [
                            "ntk + l2_reg_coef * torch.eye(ntk.shape[0], dtype=torch.float, device=ntk.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_213": {
                "variable": {
                    "value": "ntk_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ntk + l2_reg_coef * torch.eye(ntk.shape[0], dtype=torch.float, device=ntk.device)",
                            "BinOp"
                        ],
                        [
                            "ntk + l2_reg_coef * torch.eye(ntk.shape[0], dtype=torch.float, device=ntk.device)",
                            "BinOp"
                        ],
                        [
                            "ntk + l2_reg_coef * torch.eye(ntk.shape[0], dtype=torch.float, device=ntk.device)",
                            "BinOp"
                        ],
                        [
                            "ntk + l2_reg_coef * torch.eye(ntk.shape[0], dtype=torch.float, device=ntk.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_66": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[compute_training_loss_at_time_t(t=t, eta=eta * n / (n - 1), ntk=new_ntk, init_preds=new_init_preds, Y=new_Y, continuous=continuous) for t in ts]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_139": {
                "variable": {
                    "value": "jacobians_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "jacobians_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v.view((v.shape[0], -1)) for (k, v) in jacobians.items()]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(jacobians_cat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "steady_state_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "steady_state_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_continuous_lyapunov(a=utils.to_numpy(H), q=utils.to_numpy(sgd_cov))",
                            "Call"
                        ],
                        [
                            "torch.tensor(steady_state_cov, dtype=torch.float, device=ntk.device)",
                            "Call"
                        ],
                        [
                            "steady_state_cov + 1e-10 * torch.eye(steady_state_cov.shape[0], device=steady_state_cov.device, dtype=torch.float)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ntk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_149": {
                "variable": {
                    "value": "steady_state_inv_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "steady_state_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_continuous_lyapunov(a=utils.to_numpy(H), q=utils.to_numpy(sgd_cov))",
                            "Call"
                        ],
                        [
                            "torch.tensor(steady_state_cov, dtype=torch.float, device=ntk.device)",
                            "Call"
                        ],
                        [
                            "steady_state_cov + 1e-10 * torch.eye(steady_state_cov.shape[0], device=steady_state_cov.device, dtype=torch.float)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Subset_175": {
                "variable": {
                    "value": "new_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "indices": {
                    "value": "example_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(n) if i != sample_idx]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(n) if i != sample_idx]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(n) if i != sample_idx]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(n) if i != sample_idx]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cat_197": {
                "variable": {
                    "value": "param_changes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "param_changes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "[v.flatten() for (k, v) in param_changes.items()]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(param_changes, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_199": {
                "variable": {
                    "value": "total_change",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_changes.view((1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.mm(steady_state_inv_cov.cpu(), param_changes.view(-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_69": {
                "input": {
                    "value": "(losses - losses_without_excluding) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "(old_preds[example_indices] - new_preds) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_103": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_140": {
                "input": {
                    "value": "jacobians_cat.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "jacobians_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v.view((v.shape[0], -1)) for (k, v) in jacobians.items()]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(jacobians_cat, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_147": {
                "n": {
                    "value": "steady_state_cov.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "steady_state_cov.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_253": {
                "input": {
                    "value": "(new_preds - old_preds) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_253": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_36": {
                "n": {
                    "value": "ntk.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ntk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_77": {
                "n": {
                    "value": "ntk.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ntk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_118": {
                "n": {
                    "value": "ntk.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ntk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_135": {
                "n": {
                    "value": "sgd_cov.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "sgd_cov.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_140": {
                "n": {
                    "value": "jacobians_cat.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "ntk.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_194": {
                "input": {
                    "value": "param_changes[k] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_200": {
                "input": {
                    "value": "steady_state_inv_cov.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "param_changes.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_211": {
                "n": {
                    "value": "ntk.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "ntk.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sample_info/scripts/aggregate_ground_truth_results.py": {
        "torch": {
            "cat_35": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(flat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "weights_diff_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weights_diff_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(weights_diff_flat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_158": {
                "variable": {
                    "value": "cur_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.sum(x ** 2) for (idx, x) in enumerate(vectors) if mask[idx]]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(cur_norms).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_158": {
                "variable": {
                    "value": "cur_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_157": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sample_info/scripts/compute_influence_functions.py": {
        "torch": {
            "stack_136": {
                "variable": {
                    "value": "cur_pred_influences",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_pred_influences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cur_pred_influences)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_133": {
                "variable": {
                    "value": "val_grad_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "val_grad_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(val_grad_flat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_120": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inv_hvp",
                            "Name"
                        ]
                    ]
                }
            },
            "any_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "[a.flatten() for a in inv_hvp]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "cur_weight_influence ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_138": {
                "input": {
                    "value": "cur_pred_influences ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dot_134": {
                "input": {
                    "value": "cur_weight_influence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / len(train_data) * torch.cat([a.flatten() for a in inv_hvp])",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "val_grad_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(val_grad_flat, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sample_info/scripts/compute_influence_functions_brute_force.py": {
        "torch": {
            "cat_109": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hessian(ys=[total_loss], xs=tuple(model.parameters()))",
                            "Call"
                        ],
                        [
                            "torch.cat(H, dim=0)",
                            "Call"
                        ],
                        [
                            "H + 1e-10 * torch.eye(H.shape[0], dtype=torch.float, device=H.device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_114": {
                "variable": {
                    "value": "H_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hessian(ys=[total_loss], xs=tuple(model.parameters()))",
                            "Call"
                        ],
                        [
                            "torch.cat(H, dim=0)",
                            "Call"
                        ],
                        [
                            "H + 1e-10 * torch.eye(H.shape[0], dtype=torch.float, device=H.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_108": {
                "variable": {
                    "value": "H[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "H[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "train_grad_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "train_grad_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(train_grad_flat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_152": {
                "variable": {
                    "value": "cur_pred_influences",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_pred_influences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cur_pred_influences)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_149": {
                "variable": {
                    "value": "val_grad_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "val_grad_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(val_grad_flat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_112": {
                "n": {
                    "value": "H.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "H.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_138": {
                "input": {
                    "value": "H_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(H)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "train_grad_flat.view((-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "cur_weight_influence ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_154": {
                "input": {
                    "value": "cur_pred_influences ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dot_150": {
                "input": {
                    "value": "cur_weight_influence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / len(train_data) * torch.mm(H_inv, train_grad_flat.view((-1, 1)))",
                            "BinOp"
                        ],
                        [
                            "cur_weight_influence.view((-1,))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "val_grad_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(val_grad_flat, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sample_info/scripts/prepare_informativeness_orders_for_data_summarization.py": {
        "torch": {
            "stack_134": {
                "tensors": {
                    "value": "quantities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "flatten_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sample_info/scripts/synthetic_example_make_informativeness_video.py": {
        "torch": {
            "TensorDataset_71": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(data_X[:half]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_72": {
                "variable": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.tensor(data_X[half:]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_92": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.tensor([y]) for (x, y) in train_data]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(Y).float().to(ntk.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_34": {
                "tensors": {
                    "value": "quantities",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "data_Y[:half]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "input": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "data_Y[half:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "input": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "[y]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_ntk_tools.py": {
        "torch": {
            "randn_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples, n_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples, n_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorDataset_30": {
                "*tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "allclose_83": {
                "input": {
                    "value": "ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ret['ntk']",
                            "Subscript"
                        ],
                        [
                            "ret['test_train_ntk']",
                            "Subscript"
                        ],
                        [
                            "ret['ntk']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "saved_ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_102": {
                "input": {
                    "value": "ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ret['ntk']",
                            "Subscript"
                        ],
                        [
                            "ret['test_train_ntk']",
                            "Subscript"
                        ],
                        [
                            "ret['ntk']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "saved_ntk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_126": {
                "input": {
                    "value": "exp_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_info.modules.ntk.compute_exp_matrix(t=t, eta=eta, ntk=ntk, continuous=continuous)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "saved_exp_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_151": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_info.modules.ntk.get_predictions_at_time_t(t=t, eta=eta, ntk=ret['ntk'], init_preds=ret['train_init_preds'], Y=ret['train_Y'], continuous=continuous)",
                            "Call"
                        ],
                        [
                            "sample_info.modules.ntk.get_test_predictions_at_time_t(t=t, eta=eta, ntk=ret['ntk'], test_train_ntk=ret['test_train_ntk'], train_init_preds=ret['train_init_preds'], test_init_preds=ret['test_init_preds'], train_Y=ret['train_Y'], continuous=continuous)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "saved_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_178": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_info.modules.ntk.get_predictions_at_time_t(t=t, eta=eta, ntk=ret['ntk'], init_preds=ret['train_init_preds'], Y=ret['train_Y'], continuous=continuous)",
                            "Call"
                        ],
                        [
                            "sample_info.modules.ntk.get_test_predictions_at_time_t(t=t, eta=eta, ntk=ret['ntk'], test_train_ntk=ret['test_train_ntk'], train_init_preds=ret['train_init_preds'], test_init_preds=ret['test_init_preds'], train_Y=ret['train_Y'], continuous=continuous)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "saved_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "pickle.load(f)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_stability_tools.py": {
        "torch": {
            "randn_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples, n_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_30": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(n_samples, n_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorDataset_31": {
                "*tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "test/utils.py": {
        "torch": {
            "allclose_12": {
                "input": {
                    "value": "a[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_18": {
                "input": {
                    "value": "a[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "b[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}