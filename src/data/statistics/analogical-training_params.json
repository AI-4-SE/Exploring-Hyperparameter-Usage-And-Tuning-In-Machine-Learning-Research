{
    "Basis.py": {
        "sklearn": {
            "StandardScaler_654": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "with_mean": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "with_std": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_clustering_713": {
                "variable": {
                    "value": "label_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "affinity": {
                    "value": "coefficient_matrix_sym",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coefficient_matrix_abs + np.transpose(coefficient_matrix_abs)",
                            "BinOp"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "self.code_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_715": {
                "variable": {
                    "value": "NMI",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "label_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spectral_clustering(coefficient_matrix_sym, n_clusters=self.code_dim)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "total_labels_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_torch.to_np(total_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_639": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize(X, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_618": {
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Ridge_619": {
                "alpha": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Lasso_620": {
                "alpha": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ElasticNet_621": {
                "alpha": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "l1_ratio": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_629": {
                "X": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_29": {
                "seed": {
                    "value": "2333333",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "second",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "first.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_295": {
                "variable": {
                    "value": "D_fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_D_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D(var_x_fake)[0]",
                            "Subscript"
                        ],
                        [
                            "self.D(var_x_fake)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_388": {
                "variable": {
                    "value": "diff_dims_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "diff_dims_batch_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_494": {
                "variable": {
                    "value": "code_variant",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "61",
                            "int"
                        ],
                        [
                            "61",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "linspace_527": {
                "variable": {
                    "value": "noise_variant",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "61",
                            "int"
                        ],
                        [
                            "61",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "linspace_609": {
                "variable": {
                    "value": "code_variant",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "61",
                            "int"
                        ],
                        [
                            "61",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "BCELoss_71": {
                "variable": {
                    "value": "self.BCE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_72": {
                "variable": {
                    "value": "self.CE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_73": {
                "variable": {
                    "value": "self.MSE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_75": {
                "variable": {
                    "value": "self.BCE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_76": {
                "variable": {
                    "value": "self.CE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_77": {
                "variable": {
                    "value": "self.MSE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_439": {
                "obj": {
                    "value": "self.G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_440": {
                "obj": {
                    "value": "self.D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_560": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_664": {
                "variable": {
                    "value": "part_of_real_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[next(trainloader_iter)[0] for _ in range(200)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_684": {
                "variable": {
                    "value": "total_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_samples_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_685": {
                "variable": {
                    "value": "total_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_labels_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_186": {
                "*size": {
                    "value": "this_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "this_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "batch_x.size()[0]",
                            "Subscript"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_290": {
                "input": {
                    "value": "var_D_real",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_354": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_382": {
                "tensors": {
                    "value": "second_code_batch_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_452": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_453": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_502": {
                "variable": {
                    "value": "this_code",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_visual_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.code_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_535": {
                "variable": {
                    "value": "this_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_visual_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_283": {
                "outputs": {
                    "value": "var_pred_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D(var_x_hat)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "var_x_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(alpha * var_x_real.data + (1 - alpha) * var_x_fake.data, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "var_ones_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_torch.to_var(torch.ones(this_batch_size, 1), gpu_mode=self.gpu_mode)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_324": {
                "input": {
                    "value": "var_D_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D(var_x_fake)[0]",
                            "Subscript"
                        ],
                        [
                            "self.D(var_x_fake)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_567": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_710": {
                "ndarray": {
                    "value": "coefficient_matrix_sym",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coefficient_matrix_abs + np.transpose(coefficient_matrix_abs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_540": {
                "*size": {
                    "value": "self.num_visual_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.code_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_574": {
                "*size": {
                    "value": "in_noise.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_149": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_681": {
                "*size": {
                    "value": "num_sample_per_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "ANA_GAN.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "2333333",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_63": {
                "variable": {
                    "value": "self.G_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_64": {
                "variable": {
                    "value": "self.D_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_65": {
                "variable": {
                    "value": "self.R_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.R.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_69": {
                "variable": {
                    "value": "self.G_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_70": {
                "variable": {
                    "value": "self.D_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "self.R_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.R.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "self.G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "self.D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_200": {
                "obj": {
                    "value": "self.R.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_R.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_212": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_213": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_D.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_214": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_R.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ANA_VAE.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "2333333",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "self.G_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_95": {
                "variable": {
                    "value": "self.E_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.E.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "self.R_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.R.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta1, beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_210": {
                "variable": {
                    "value": "(mu_code, log_var_code)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "var_code",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_221": {
                "variable": {
                    "value": "reconstruction_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.G(var_z_code, var_z_noise, var_y_real_onehot)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "var_x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCELoss_59": {
                "variable": {
                    "value": "self.BCE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_60": {
                "variable": {
                    "value": "self.CE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_61": {
                "variable": {
                    "value": "self.MSE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_63": {
                "variable": {
                    "value": "self.BCE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_64": {
                "variable": {
                    "value": "self.CE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_65": {
                "variable": {
                    "value": "self.MSE_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "num_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.noise_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_195": {
                "input": {
                    "value": "0.5 * (mu ** 2 + torch.exp(log_var) - log_var - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "self.G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_256": {
                "obj": {
                    "value": "self.E.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_E.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_257": {
                "obj": {
                    "value": "self.R.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_R.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_190": {
                "*size": {
                    "value": "mu.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "mu.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_207": {
                "input": {
                    "value": "var_D_real_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "var_y_real",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_268": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_G.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_269": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_E.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_270": {
                "f": {
                    "value": "os.path.join(save_dir, self.model_name + '_R.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_191": {
                "input": {
                    "value": "log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_195": {
                "input": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "[var_out.cpu().data, batch_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST_model.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "utils_torch.block_linear_BN_RELU(code_dim + noise_dim + label_dim, NUM_HIDDEN_1, leaky=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.dconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "utils_torch.block_deconv_BN_RELU(NUM_CHANNELS_1, NUM_CHANNELS_2, kernel_size=4, stride=2, padding=1, leaky=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "in_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[in_noise, in_code, in_label]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "utils_torch.block_conv_BN_RELU(1, NUM_CHANNELS_2, kernel_size=4, stride=2, padding=1, BatchNorm=False, leaky=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "NUM_HIDDEN_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "utils_torch.block_linear_BN_RELU(NUM_HIDDEN_1, NUM_HIDDEN_2, leaky=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "utils_torch.block_conv_BN_IN_RELU(1, NUM_CHANNELS_2, kernel_size=4, stride=2, padding=1, BatchNorm=False, InsNorm=False, leaky=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "NUM_HIDDEN_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "utils_torch.block_linear_BN_IN_RELU(NUM_HIDDEN_1, NUM_HIDDEN_2, leaky=0.2, BatchNorm=True, InsNorm=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "utils_torch.block_conv_BN_RELU(in_channels * 2, NUM_CHANNELS_2 // 2, kernel_size=4, stride=2, padding=1, BatchNorm=False, leaky=0.2, dropout=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "utils_torch.block_linear_BN_RELU(NUM_CHANNELS_2 * 7 * 7, NUM_HIDDEN_1, leaky=0.2, BatchNorm=True, dropout=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "utils_torch.block_conv_BN_RELU(1, NUM_CHANNELS_2, kernel_size=4, stride=2, padding=1, BatchNorm=False, leaky=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "NUM_HIDDEN_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "code_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "NUM_HIDDEN_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "noise_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "self.fc23",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "utils_torch.block_linear_BN_RELU(NUM_HIDDEN_1, NUM_HIDDEN_2, leaky=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_47": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc21(out_fc1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out_D)",
                            "Call"
                        ],
                        [
                            "self.fc21(out_fc1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out_D)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sigmoid_82": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc21(out_fc1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out_D)",
                            "Call"
                        ],
                        [
                            "self.fc21(out_fc1)",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out_D)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_26": {
                "in_channels": {
                    "value": "NUM_CHANNELS_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "NUM_HIDDEN_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "label_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "NUM_HIDDEN_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "label_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "NUM_HIDDEN_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "code_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "NUM_HIDDEN_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "label_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Models_interface.py": {
        "torch": {}
    },
    "utils.py": {
        "torch": {
            "DataLoader_65": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data/mnist', train=True, download=download, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data/mnist', train=False, download=download, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "*size": {
                    "value": "idx.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multinomial_79": {
                "input": {
                    "value": "torch.ones(max_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "num_instance",
                    "type": "variable",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_89": {
                "*size": {
                    "value": "num_instance",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_79": {
                "*size": {
                    "value": "max_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_84": {
                "*size": {
                    "value": "num_instance",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils_torch.py": {
        "torch": {
            "mean_43": {
                "variable": {
                    "value": "mean_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x.data.cpu()",
                            "Call"
                        ],
                        [
                            "x.cpu().data",
                            "Attribute"
                        ],
                        [
                            "torchvision.utils.make_grid(x, nrow=nrow, padding=4, scale_each=True, normalize=True)",
                            "Call"
                        ],
                        [
                            "to_np(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*model_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "*model_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "*model_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_channel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_74": {
                "in_channels": {
                    "value": "in_channel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_19": {
                "obj": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x.data.cpu()",
                            "Call"
                        ],
                        [
                            "x.cpu().data",
                            "Attribute"
                        ],
                        [
                            "torchvision.utils.make_grid(x, nrow=nrow, padding=4, scale_each=True, normalize=True)",
                            "Call"
                        ],
                        [
                            "to_np(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "out_channel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_64": {
                "negative_slope": {
                    "value": "leaky",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout2d_67": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "out_channel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "negative_slope": {
                    "value": "leaky",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_94": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_98": {
                "negative_slope": {
                    "value": "leaky",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_62": {
                "num_features": {
                    "value": "out_channel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_81": {
                "num_features": {
                    "value": "out_channel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_96": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}