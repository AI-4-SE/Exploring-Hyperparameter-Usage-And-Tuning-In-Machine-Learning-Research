{
    "datasets/face300w.py": {
        "torch": {}
    },
    "detect.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./ckpt/NME(4.46).pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "plt.imread(path)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img, dsize=(256, 256), interpolation=cv2.INTER_LINEAR)[:, :, :3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_34": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face300W(dataset_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_23": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./ckpt/120.pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "losses/loss.py": {
        "torch": {
            "randn_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "69",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_39": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "69",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_40": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "69",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_15": {
                "variable": {
                    "value": "lossMat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_18": {
                "input": {
                    "value": "y - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_19": {
                "input": {
                    "value": "y - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_20": {
                "input": {
                    "value": "1 + torch.abs((y[case1_ind] - y_pred[case1_ind]) / self.epsilon) ** (self.alpha - y[case1_ind])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_17": {
                "input": {
                    "value": "1 + (self.theta / self.epsilon) ** (self.alpha - y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_21": {
                "input": {
                    "value": "y[case2_ind] - y_pred[case2_ind]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_20": {
                "input": {
                    "value": "(y[case1_ind] - y_pred[case1_ind]) / self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/CoordConv.py": {
        "torch": {
            "randn_71": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "633",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "357",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_18": {
                "variable": {
                    "value": "xx_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_19": {
                "variable": {
                    "value": "yy_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_19": {
                "variable": {
                    "value": "yy_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, xx_channel.type_as(input_tensor), yy_channel.type_as(input_tensor)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + 2",
                            "BinOp"
                        ],
                        [
                            "in_size + 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "variable": {
                    "value": "rr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(xx_channel.type_as(input_tensor) - 0.5, 2) + torch.pow(yy_channel.type_as(input_tensor) - 0.5, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret, rr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_42": {
                "variable": {
                    "value": "boundary_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boundary_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boundary_map.view(boundary_map.shape[0], 1, boundary_map.shape[1], boundary_map.shape[2])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_43": {
                "variable": {
                    "value": "zero_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(x_dim).repeat(1, y_dim, 1)",
                            "Call"
                        ],
                        [
                            "xx_channel.float() / (x_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "xx_channel * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "xx_channel.repeat(batch_size, 1, 1, 1).transpose(2, 3).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_44": {
                "variable": {
                    "value": "xx_boundary_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "boundary_channel > 0.05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "xx_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(x_dim).repeat(1, y_dim, 1)",
                            "Call"
                        ],
                        [
                            "xx_channel.float() / (x_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "xx_channel * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "xx_channel.repeat(batch_size, 1, 1, 1).transpose(2, 3).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(xx_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_45": {
                "variable": {
                    "value": "yy_boundary_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "boundary_channel > 0.05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "yy_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(y_dim).repeat(1, x_dim, 1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "yy_channel.float() / (y_dim - 1)",
                            "BinOp"
                        ],
                        [
                            "yy_channel * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "yy_channel.repeat(batch_size, 1, 1, 1).transpose(2, 3).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(xx_channel)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_47": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret, xx_boundary_channel, yy_boundary_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_36": {
                "input": {
                    "value": "yy_channel.type_as(input_tensor) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/hourglass.py": {
        "torch": {
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_81": {
                "variable": {
                    "value": "low1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "self.coordconv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "x + fc_ + score_",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_89": {
                "variable": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hg[n - 1][2](low2)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_112": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_131": {
                "variable": {
                    "value": "self.hg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "hg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_132": {
                "variable": {
                    "value": "self.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "self.fc_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "fc_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_[i](y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_136": {
                "variable": {
                    "value": "self.score_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "score_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score_[i](score)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.coordconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "coordconv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "self.heatmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "modules": {
                    "value": "hg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_159": {
                "*args": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "modules": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_125": {
                "in_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "in_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_feats * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "to_mobile.py": {
        "torch": {
            "randn_8": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_10": {
                "variable": {
                    "value": "traced_script_module",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load('./ckpt/NME(4.46).pth', map_location='cpu').eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_6": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./ckpt/NME(4.46).pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_11": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "face300W(dataset_path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "start_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Constant"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiStepLR_49": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.RMSprop(model.parameters(), lr=start_lr, weight_decay=1e-05, momentum=0)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[60, 120]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_28": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrain_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./ckpt/100.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_82": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(pretrain_path)",
                            "Call"
                        ],
                        [
                            "hg(num_stacks=4, num_blocks=2, num_classes=68 + 1)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./ckpt/ + str(epoch) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}