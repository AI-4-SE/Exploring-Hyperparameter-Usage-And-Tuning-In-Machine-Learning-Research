{
    "src/coco.py": {
        "torch": {}
    },
    "src/engine.py": {
        "torch": {}
    },
    "src/mcar_demo.py": {
        "torch": {}
    },
    "src/mobilenetv2.py": {
        "torch": {
            "Sequential_37": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_120": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_divisible(c * width_mult, 4 if width_mult == 0.1 else 8)",
                            "Call"
                        ],
                        [
                            "_make_divisible(1280 * width_mult, 4 if width_mult == 0.1 else 8) if width_mult > 1.0 else 1280",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU6_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_78": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(round(inp * expand_ratio))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.convclass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.conv[0].out_channels",
                            "Attribute"
                        ],
                        [
                            "model.layer4[1].conv1.in_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_46": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convclass(gf)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gs)",
                            "Call"
                        ],
                        [
                            "gs.view(gs.size(0), -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(gf)",
                            "Call"
                        ],
                        [
                            "gs.view(gs.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_53": {
                "variable": {
                    "value": "camscore",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "camscore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convclass(ga.detach())",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(camscore)",
                            "Call"
                        ],
                        [
                            "F.interpolate(camscore, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.convclass(ga.detach())",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(camscore)",
                            "Call"
                        ],
                        [
                            "F.interpolate(camscore, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "linputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, self.topN, 3, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "ls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats_pooling(la, method=self.ps, sh=int(h / 32), sw=int(w / 32))",
                            "Call"
                        ],
                        [
                            "self.convclass(lf)",
                            "Call"
                        ],
                        [
                            "feats_pooling(la, method=self.ps, sh=int(h / 32), sw=int(w / 32))",
                            "Call"
                        ],
                        [
                            "self.convclass(lf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.convclass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.conv[0].out_channels",
                            "Attribute"
                        ],
                        [
                            "model.layer4[1].conv1.in_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_134": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats_pooling(ga, method=self.ps, sh=int(h / 32), sw=int(w / 32))",
                            "Call"
                        ],
                        [
                            "feats_pooling(ga, method=self.ps, sh=int(h / 32), sw=int(w / 32))",
                            "Call"
                        ],
                        [
                            "self.convclass(gf)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_140": {
                "variable": {
                    "value": "camscore",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "camscore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convclass(ga.detach())",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(camscore)",
                            "Call"
                        ],
                        [
                            "F.interpolate(camscore, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.convclass(ga.detach())",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(camscore)",
                            "Call"
                        ],
                        [
                            "F.interpolate(camscore, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "linputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[b, self.topN, 3, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_182": {
                "variable": {
                    "value": "ls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feats_pooling(la, method=self.ps, sh=int(h / 32), sw=int(w / 32))",
                            "Call"
                        ],
                        [
                            "self.convclass(lf)",
                            "Call"
                        ],
                        [
                            "feats_pooling(la, method=self.ps, sh=int(h / 32), sw=int(w / 32))",
                            "Call"
                        ],
                        [
                            "self.convclass(lf)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_208": {
                "variable": {
                    "value": "m2net",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "../pretrained/mobilenetv2_1.0-0c6065bc.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "synchronize_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_79": {
                "variable": {
                    "value": "region_bboxs[i, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_175": {
                "variable": {
                    "value": "region_bboxs[i, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/util.py": {
        "torch": {
            "zeros_254": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.scores.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_255": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_269": {
                "variable": {
                    "value": "(sorted, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_210": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_212": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_21": {
                "input": {
                    "value": "torch.mul(v, torch.log(v + 1e-30))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatStorage_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LongStorage_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_209": {
                "obj": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_211": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_21": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.log(v + 1e-30)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_21": {
                "input": {
                    "value": "v + 1e-30",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/voc.py": {
        "torch": {
            "from_numpy_103": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(num_classes)",
                            "Call"
                        ],
                        [
                            "np.asarray(row[1:num_categories + 1]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}