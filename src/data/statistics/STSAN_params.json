{
    "main.py": {
        "tensorflow": {
            "list_physical_devices_88": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_93": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clear_session_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clear_session_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "tensorflow": {
            "get_custom_objects_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_113": {
                "variable": {
                    "value": "matmul_qk",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_heads(q)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_115": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(k)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_attention_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask * -1000000000.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_123": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_34": {
                "x": {
                    "value": "pos_encoding[np.newaxis, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_64": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.l_hist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_74": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(inps, self.l_hist, axis=-2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_90": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_94": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_97": {
                "variable": {
                    "value": "output_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_f",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "output_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_t",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_106": {
                "variable": {
                    "value": "output_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convs_f[-1](output_f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_145": {
                "variable": {
                    "value": "self.wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_148": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (shape[0], shape[1], shape[2], shape[3], self.n_head, self.depth))",
                            "Call"
                        ],
                        [
                            "self.convs(x, training)",
                            "Call"
                        ],
                        [
                            "x + (ex_enc + self.spe)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.encs[i](x, training, mask)",
                            "Call"
                        ],
                        [
                            "self.convs(x, training)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (shape[0], shape[1], shape[2], shape[3], self.n_head, self.depth))",
                            "Call"
                        ],
                        [
                            "self.convs(x, training)",
                            "Call"
                        ],
                        [
                            "x + (ex_enc + self.spe)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.encs[i](x, training, mask)",
                            "Call"
                        ],
                        [
                            "self.convs(x, training)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(shape[0], shape[1], shape[2], shape[3], self.n_head, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_165": {
                "variable": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(scaled_attention, perm=[0, 2, 3, 4, 1, 5])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 4, 1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_167": {
                "variable": {
                    "value": "d_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(scaled_attention, perm=[0, 2, 3, 4, 1, 5])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "concat_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(scaled_attention, perm=[0, 2, 3, 4, 1, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(d_shape[0], d_shape[1], d_shape[2], d_shape[3], self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "layers": {
                    "value": "[layers.Dense(dff, activation=act), layers.Dense(d_model)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "layers": {
                    "value": "[layers.Dense(dff), layers.Dense(d_model, activation='tanh')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LayerNormalization_197": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNormalization_198": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_200": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_201": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNormalization_224": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNormalization_225": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNormalization_226": {
                "variable": {
                    "value": "self.layernorm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_228": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_229": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_230": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_257": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_287": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_334": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_335": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Activation_13": {
                "activation": {
                    "value": "gelu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_116": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_140": {
                "variable": {
                    "value": "self.wx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_142": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dense_143": {
                "variable": {
                    "value": "self.wkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_150": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (shape[0], shape[1], shape[2], shape[3], self.n_head, self.depth))",
                            "Call"
                        ],
                        [
                            "self.convs(x, training)",
                            "Call"
                        ],
                        [
                            "x + (ex_enc + self.spe)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.encs[i](x, training, mask)",
                            "Call"
                        ],
                        [
                            "self.convs(x, training)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 4, 1, 2, 3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_154": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.wx(q)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_157": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.wkv(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_267": {
                "x": {
                    "value": "tf.cast(self.d_model, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_299": {
                "x": {
                    "value": "tf.cast(self.d_model, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_10": {
                "x": {
                    "value": "tf.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Activation_85": {
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_87": {
                "filters": {
                    "value": "conv_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gelu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2D_88": {
                "filters": {
                    "value": "conv_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gelu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dropout_92": {
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_93": {
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_115": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_heads(k)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_178": {
                "units": {
                    "value": "dff",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gelu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Dense_179": {
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dense_185": {
                "units": {
                    "value": "dff",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dense_186": {
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_267": {
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_299": {
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_59": {
                "filters": {
                    "value": "n_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gelu'",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "rate": {
                    "value": "r_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_68": {
                "variable": {
                    "value": "outputs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_72": {
                "variable": {
                    "value": "outputs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_343": {
                "input": {
                    "value": "dec_output_t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_10": {
                "x": {
                    "value": "2 / np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_10": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (shape[0], shape[1], shape[2], shape[3], self.n_head, self.depth))",
                            "Call"
                        ],
                        [
                            "self.convs(x, training)",
                            "Call"
                        ],
                        [
                            "x + (ex_enc + self.spe)",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.encs[i](x, training, mask)",
                            "Call"
                        ],
                        [
                            "self.convs(x, training)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "MirroredStrategy_21": {
                "variable": {
                    "value": "self.strategy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanSquaredError_84": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RootMeanSquaredError_90": {
                "variable": {
                    "value": "rmse_train_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RootMeanSquaredError_91": {
                "variable": {
                    "value": "rmse_test_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_95": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CustomSchedule(args.d_model, args.warmup_steps)",
                            "Call"
                        ],
                        [
                            "CustomSchedule(args.d_model, args.warmup_steps)",
                            "Call"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "create_file_writer_174": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.environ['HOME'] + '/tensorboard/stsan/{}'.format(self.model_index)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Checkpoint_181": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "Stream_T": {
                    "value": "stream_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Stream_T(args.n_layer, args.d_model, args.n_head, args.dff, args.conv_layer, args.conv_filter, args.l_hist, args.l_half, args.r_d)",
                            "Call"
                        ]
                    ]
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, epsilon=1e-09)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, epsilon=1e-09)",
                            "Call"
                        ]
                    ]
                }
            },
            "CheckpointManager_183": {
                "variable": {
                    "value": "ckpt_manager",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(Stream_T=stream_t, optimizer=optimizer)",
                            "Call"
                        ],
                        [
                            "tf.train.Checkpoint(STSAN=stsan, optimizer=optimizer)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoints/stream_t/{}'.format(self.model_index)",
                            "Call"
                        ],
                        [
                            "'./checkpoints/stsan/{}'.format(self.model_index)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "args.es_patience + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MeanSquaredError_329": {
                "variable": {
                    "value": "loss_object",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_342": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CustomSchedule(args.d_model, args.warmup_steps)",
                            "Call"
                        ],
                        [
                            "CustomSchedule(args.d_model, args.warmup_steps)",
                            "Call"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "create_file_writer_422": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.environ['HOME'] + '/tensorboard/stsan/{}'.format(self.model_index)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Checkpoint_429": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "STSAN": {
                    "value": "stsan",
                    "type": "variable",
                    "possible_values": [
                        [
                            "STSAN(stream_t, args.n_layer, args.d_model, args.n_head, args.dff, args.conv_layer, args.conv_filter, args.l_hist, args.l_half, args.r_d)",
                            "Call"
                        ]
                    ]
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, epsilon=1e-09)",
                            "Call"
                        ],
                        [
                            "tf.keras.optimizers.Adam(learning_rate, beta_1=0.9, beta_2=0.98, epsilon=1e-09)",
                            "Call"
                        ]
                    ]
                }
            },
            "CheckpointManager_431": {
                "variable": {
                    "value": "ckpt_manager",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(Stream_T=stream_t, optimizer=optimizer)",
                            "Call"
                        ],
                        [
                            "tf.train.Checkpoint(STSAN=stsan, optimizer=optimizer)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoints/stream_t/{}'.format(self.model_index)",
                            "Call"
                        ],
                        [
                            "'./checkpoints/stsan/{}'.format(self.model_index)",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "args.es_patience + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_143": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.greater(y_t, test_threshold_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_144": {
                "variable": {
                    "value": "masked_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tar['y_t']",
                            "Subscript"
                        ],
                        [
                            "tar['y_t']",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.math.greater(y_t, test_threshold_t))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.greater(real, test_threshold_f[i]))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_145": {
                "variable": {
                    "value": "masked_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pred_t",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.math.greater(y_t, test_threshold_t))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.greater(real, test_threshold_f[i]))",
                            "Call"
                        ]
                    ]
                }
            },
            "compute_average_loss_88": {
                "per_example_loss": {
                    "value": "loss_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_object(real, pred)",
                            "Call"
                        ],
                        [
                            "loss_object(real, pred)",
                            "Call"
                        ]
                    ]
                },
                "global_batch_size": {
                    "value": "self.GLOBAL_BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "compute_average_loss_333": {
                "per_example_loss": {
                    "value": "loss_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_object(real, pred)",
                            "Call"
                        ],
                        [
                            "loss_object(real, pred)",
                            "Call"
                        ]
                    ]
                },
                "global_batch_size": {
                    "value": "self.GLOBAL_BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RootMeanSquaredError_335": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RootMeanSquaredError_336": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_387": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.greater(real, test_threshold_f[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_388": {
                "variable": {
                    "value": "masked_real",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[..., i] * (weights[i] if is_weights else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.math.greater(y_t, test_threshold_t))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.greater(real, test_threshold_f[i]))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_389": {
                "variable": {
                    "value": "masked_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pred_f[..., i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.math.greater(y_t, test_threshold_t))",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.greater(real, test_threshold_f[i]))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_72": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradientTape_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_143": {
                "x": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tar['y_t']",
                            "Subscript"
                        ],
                        [
                            "tar['y_t']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "test_threshold_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 / param['data_max'][2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_300": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GradientTape_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_387": {
                "x": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[..., i] * (weights[i] if is_weights else 1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "test_threshold_f[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/CustomSchedule.py": {
        "tensorflow": {
            "cast_11": {
                "variable": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_16": {
                "variable": {
                    "value": "arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rsqrt_19": {
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_19": {
                "x": {
                    "value": "arg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.rsqrt(step)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "arg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step * self.warmup_steps ** (-1.5)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/Metrics.py": {
        "tensorflow": {
            "cast_10": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_11": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_12": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_24": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_25": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_26": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "math.subtract(y_true, y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_38": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_16": {
                "x": {
                    "value": "math.divide_no_nan(self.total, self.count)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_no_nan_30": {
                "x": {
                    "value": "self.total",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_no_nan_44": {
                "x": {
                    "value": "self.total",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_no_nan_16": {
                "x": {
                    "value": "self.total",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_26": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_40": {
                "x": {
                    "value": "math.subtract(y_true, y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_40": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_true, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_pred, self._dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(y_pred, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/tools.py": {
        "tensorflow": {
            "reduce_sum_131": {
                "variable": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_132": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(oup, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "list_physical_devices_158": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_132": {
                "x": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_sum(inp, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_memory_growth_162": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}