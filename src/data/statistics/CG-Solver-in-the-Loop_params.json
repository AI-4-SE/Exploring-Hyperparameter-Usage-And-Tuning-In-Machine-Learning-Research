{
    "phi/tf/__init__.py": {
        "tensorflow": {
            "disable_eager_execution_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "phi/tf/profiling.py": {
        "tensorflow": {}
    },
    "phi/tf/session.py": {
        "tensorflow": {
            "list_variables_126": {
                "ckpt_dir_or_file": {
                    "value": "dir",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "phi/tf/util.py": {
        "tensorflow": {
            "NewCheckpointReader_196": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "constants_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "setup.py": {
        "tensorflow": {
            "get_compile_flags_27": {
                "variable": {
                    "value": "tf_cflags",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_link_flags_28": {
                "variable": {
                    "value": "tf_lflags",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "disable_eager_execution_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "phi/torch/flow.py": {
        "torch": {}
    },
    "phi/torch/torch_backend.py": {
        "torch": {
            "pad_63": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_first(value)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(value)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(pad_width[::-1], [] if isinstance(pad_width, list) else ())",
                            "Call"
                        ],
                        [
                            "sum(reversed_axis_pad, [] if isinstance(pad_width, list) else ())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode.lower()",
                            "Call"
                        ],
                        [
                            "'circular'",
                            "str"
                        ],
                        [
                            "'replicate'",
                            "str"
                        ],
                        [
                            "'constant'",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "constant_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_114": {
                "variable": {
                    "value": "resolution",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flip_116": {
                "variable": {
                    "value": "sample_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.as_tensor(sample_coords)",
                            "Call"
                        ],
                        [
                            "2 * sample_coords / (resolution - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "torch.flip(sample_coords, dims=[-1])",
                            "Call"
                        ],
                        [
                            "torch.fmod(sample_coords, shape)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grid_sample_117": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_first(self.as_tensor(inputs))",
                            "Call"
                        ],
                        [
                            "torchf.pad(inputs, [0, 1] * (len(inputs.shape) - 2), mode='circular')",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "sample_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.as_tensor(sample_coords)",
                            "Call"
                        ],
                        [
                            "2 * sample_coords / (resolution - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "torch.flip(sample_coords, dims=[-1])",
                            "Call"
                        ],
                        [
                            "torch.fmod(sample_coords, shape)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "interpolation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "str"
                        ],
                        [
                            "'nearest'",
                            "str"
                        ],
                        [
                            "'linear'",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "boundary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "str"
                        ],
                        [
                            "'border'",
                            "str"
                        ],
                        [
                            "'zeros'",
                            "str"
                        ],
                        [
                            "'constant'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unbind_235": {
                "variable": {
                    "value": "unstacked",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "channels_first(tensor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(value.shape))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fft_263": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "n": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.shape) - 2",
                            "BinOp"
                        ],
                        [
                            "len(k.shape) - 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ifft_273": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k.tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(x.shape) - 2",
                            "BinOp"
                        ],
                        [
                            "len(k.shape) - 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_318": {
                "variable": {
                    "value": "indices_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.LongTensor(indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clone_35": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "channels_first(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_41": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_float(inputs.shape[2:])",
                            "Call"
                        ],
                        [
                            "kernel.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_44": {
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(value.shape))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(value.shape))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_68": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_first(value)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(value)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_float(inputs.shape[2:])",
                            "Call"
                        ],
                        [
                            "kernel.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_74": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_first(value)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(value.shape))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "prod_77": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_first(value)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(value.shape))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_81": {
                "condition": {
                    "value": "y == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(result)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchf.pad(value, pad, mode=mode, value=constant_values)",
                            "Call"
                        ],
                        [
                            "channels_last(result)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x) / self.as_tensor(y)",
                            "BinOp"
                        ],
                        [
                            "torchf.grid_sample(inputs, sample_coords, mode=interpolation, padding_mode=boundary)",
                            "Call"
                        ],
                        [
                            "channels_last(result)",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(A, torch.transpose(b, 0, 1))",
                            "Call"
                        ],
                        [
                            "convf(tensor, kernel, padding=padding)",
                            "Call"
                        ],
                        [
                            "channels_last(result)",
                            "Call"
                        ],
                        [
                            "math.stack([real, imag], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_84": {
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(*(0, -2) + tuple(range(1, len(x.shape) - 2)) + (-1,))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_87": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_first(value)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(value.shape))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_125": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "channels_first(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_128": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.as_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "channels_first(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_135": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(b, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_148": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_151": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "round_154": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ceil_157": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_160": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_165": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(value.shape))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_170": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(value.shape))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_174": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(a, dim=axis)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.as_tensor(b)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_177": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(a, dim=axis)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.as_tensor(b)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_183": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_186": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_207": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(a, dim=axis)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(value.shape))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_306": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_309": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_56": {
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_first(value)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(value)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(pad_width[::-1], [] if isinstance(pad_width, list) else ())",
                            "Call"
                        ],
                        [
                            "sum(reversed_axis_pad, [] if isinstance(pad_width, list) else ())",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode.lower()",
                            "Call"
                        ],
                        [
                            "'circular'",
                            "str"
                        ],
                        [
                            "'replicate'",
                            "str"
                        ],
                        [
                            "'constant'",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "constant_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_81": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchf.pad(value, pad, mode=mode, value=constant_values)",
                            "Call"
                        ],
                        [
                            "channels_last(result)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x) / self.as_tensor(y)",
                            "BinOp"
                        ],
                        [
                            "torchf.grid_sample(inputs, sample_coords, mode=interpolation, padding_mode=boundary)",
                            "Call"
                        ],
                        [
                            "channels_last(result)",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(A, torch.transpose(b, 0, 1))",
                            "Call"
                        ],
                        [
                            "convf(tensor, kernel, padding=padding)",
                            "Call"
                        ],
                        [
                            "channels_last(result)",
                            "Call"
                        ],
                        [
                            "math.stack([real, imag], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_136": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchf.pad(value, pad, mode=mode, value=constant_values)",
                            "Call"
                        ],
                        [
                            "channels_last(result)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x) / self.as_tensor(y)",
                            "BinOp"
                        ],
                        [
                            "torchf.grid_sample(inputs, sample_coords, mode=interpolation, padding_mode=boundary)",
                            "Call"
                        ],
                        [
                            "channels_last(result)",
                            "Call"
                        ],
                        [
                            "torch.sparse.mm(A, torch.transpose(b, 0, 1))",
                            "Call"
                        ],
                        [
                            "convf(tensor, kernel, padding=padding)",
                            "Call"
                        ],
                        [
                            "channels_last(result)",
                            "Call"
                        ],
                        [
                            "math.stack([real, imag], -1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_164": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_169": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_284": {
                "input": {
                    "value": "self.as_tensor(complex)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fmod_109": {
                "variable": {
                    "value": "sample_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.as_tensor(sample_coords)",
                            "Call"
                        ],
                        [
                            "2 * sample_coords / (resolution - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "torch.flip(sample_coords, dims=[-1])",
                            "Call"
                        ],
                        [
                            "torch.fmod(sample_coords, shape)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_float(inputs.shape[2:])",
                            "Call"
                        ],
                        [
                            "kernel.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_110": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels_first(self.as_tensor(inputs))",
                            "Call"
                        ],
                        [
                            "torchf.pad(inputs, [0, 1] * (len(inputs.shape) - 2), mode='circular')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 1] * (len(inputs.shape) - 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "circular",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.as_tensor(b)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_31": {
                "tensors": {
                    "value": "components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.as_tensor(c) for c in x]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_226": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.tensor",
                            "Attribute"
                        ],
                        [
                            "x.permute((0,) + tuple(range(2, len(x.shape) - 1)) + (1, -1))",
                            "Call"
                        ],
                        [
                            "x.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "self.to_complex(x)",
                            "Call"
                        ],
                        [
                            "channels_first(x).tensor",
                            "Attribute"
                        ],
                        [
                            "torch.ifft(k.tensor, rank)",
                            "Call"
                        ],
                        [
                            "ComplexTensor(x)",
                            "Call"
                        ],
                        [
                            "channels_last(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "phi/torch/torch_util.py": {
        "torch": {
            "tensor_12": {
                "data": {
                    "value": "attr.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}